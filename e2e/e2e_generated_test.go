package e2e

import (
	"fmt"
	"github.com/gopher-fleece/gleece/definitions"
	. "github.com/onsi/ginkgo/v2"
	. "github.com/onsi/gomega"
	"os"
)

var _ = Describe("E2E Generated Date Comment Test", func() {
	Context("When skipGenerateDateComment is true", func() {
		It("Should not include 'Generated Date: ' in generated files", func() {

			for _, engine := range definitions.SupportedRoutingEngineStrings {
				filePath := fmt.Sprintf("./%s/routes/%s.e2e.gleece.go", engine, engine)

				// Read the generated file
				content, err := os.ReadFile(filePath)
				Expect(err).ToNot(HaveOccurred(), "Failed to read generated file: "+filePath)

				// Convert content to string and check for "Generated Date: "
				fileContent := string(content)

				// Verify the file content doesn't contain "Generated Date: "
				Expect(fileContent).ToNot(ContainSubstring("Generated Date: "),
					"Generated file should not contain 'Generated Date: ' when skipGenerateDateComment is true: "+filePath)

				// Verify the file was generated correctly (just a sanity check)
				Expect(fileContent).To(ContainSubstring("This file is automatically generated"),
					"Generated file should contain the standard header: "+filePath)
			}
		})

		It("Should include 'Generated Date: ' in ex feature generated files", func() {

			for _, engine := range definitions.SupportedRoutingEngineStrings {
				filePath := fmt.Sprintf("./%s/ex_extra_routes/%s.e2e.ex_extra.gleece.go", engine, engine)

				// Read the generated file
				content, err := os.ReadFile(filePath)
				Expect(err).ToNot(HaveOccurred(), "Failed to read generated file: "+filePath)

				// Convert content to string and check for "Generated Date: "
				fileContent := string(content)

				// Verify the file content doesn't contain "Generated Date: "
				Expect(fileContent).To(ContainSubstring("Generated Date: "),
					"Generated file should not contain 'Generated Date: ' when skipGenerateDateComment is true: "+filePath)

				// Verify the file was generated correctly (just a sanity check)
				Expect(fileContent).To(ContainSubstring("This file is automatically generated"),
					"Generated file should contain the standard header: "+filePath)
			}
		})

	})
})
