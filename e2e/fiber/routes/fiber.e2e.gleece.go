/*
--
This file is automatically generated. Any manual changes to this file may be overwritten.
It includes routes and handlers by the Gleece API Routes Generator.
--
Authors: Haim Kastner & Yuval Pomerchik
Generated by: Gleece Routes Generator
Generated Date: 2025-02-05
--
Usage:
Refer to the Gleece documentation for details on how to use the generated routes and handlers.
--
Repository: https://github.com/gopher-fleece/gleece
--
*/
package routes
import (
	"encoding/json"
	"fmt"
	"net/http"
	"regexp"
	"strings"
	"github.com/go-playground/validator/v10"
	"github.com/gofiber/fiber/v2"
	E2EControllerImport "github.com/gopher-fleece/gleece/e2e/assets"
	RequestAuth "github.com/gopher-fleece/gleece/e2e/fiber/auth"
	"github.com/gopher-fleece/gleece/external"
	"github.com/gopher-fleece/gleece/infrastructure/validation"
	Param33theBody "github.com/gopher-fleece/gleece/e2e/assets"
	Param38theBody "github.com/gopher-fleece/gleece/e2e/assets"
	Param41theBody "github.com/gopher-fleece/gleece/e2e/assets"
	Response62CustomError "github.com/gopher-fleece/gleece/e2e/assets"
	Response65CustomError "github.com/gopher-fleece/gleece/e2e/assets"
	E2EClassSecControllerImport "github.com/gopher-fleece/gleece/e2e/assets"
	CustomValidatorPkg0 "github.com/gopher-fleece/gleece/e2e/assets"
	MiddlewarePkg0 "github.com/gopher-fleece/gleece/e2e/fiber/middlewares"
	MiddlewarePkg1 "github.com/gopher-fleece/gleece/e2e/fiber/middlewares"
	MiddlewarePkg2 "github.com/gopher-fleece/gleece/e2e/fiber/middlewares"
	MiddlewarePkg3 "github.com/gopher-fleece/gleece/e2e/fiber/middlewares"
)
var validatorInstance *validator.Validate
var urlParamRegex *regexp.Regexp
type SecurityListRelation string
const (
	SecurityListRelationAnd SecurityListRelation = "AND"
)
type SecurityCheckList struct {
	Checks   []external.SecurityCheck
	Relation SecurityListRelation
}
func getStatusCode(controller external.Controller, hasReturnValue bool, err error) int {
	if controller.GetStatus() != nil {
		return int(*controller.GetStatus())
	}
	if err != nil {
		return http.StatusInternalServerError
	}
	if hasReturnValue {
		return http.StatusOK
	}
	return http.StatusNoContent
}
func bindAndValidateBody[TOutput any](ctx *fiber.Ctx, contentType string, validation string, output **TOutput) error {
	var err error
	bodyBytes := ctx.Body()
	if len(bodyBytes) == 0 {
		if strings.Contains(validation, "required") {
			return fmt.Errorf("body is required but was not provided")
		}
		return nil
	}
	var deserializedOutput TOutput
	switch contentType {
	case "application/json":
		err = json.Unmarshal(bodyBytes, &deserializedOutput)
	default:
		return fmt.Errorf("content-type %s is not currently supported by the validation subsystem", contentType)
	}
	if err != nil {
		return err
	}
	if err = validatorInstance.Struct(&deserializedOutput); err != nil {
		return err
	}
	*output = &deserializedOutput
	return nil
}
func toFiberUrl(url string) string {
	processedUrl := urlParamRegex.ReplaceAllString(url, ":$1")
	processedUrl = strings.ReplaceAll(processedUrl, "//", "/")
	if processedUrl == "" {
		return "/"
	}
	if !strings.HasPrefix(processedUrl, "/") {
		processedUrl = "/" + processedUrl
	}
	return processedUrl
}
func authorize(ctx *fiber.Ctx, checksLists []SecurityCheckList) *external.SecurityError {
	var lastError *external.SecurityError
	for _, list := range checksLists {
		if list.Relation != SecurityListRelationAnd {
			panic(
				"Encountered a security list relation of type '%s' - this is unexpected and indicates a bug in Gleece itself." +
					"Please open an issue at https://github.com/gopher-fleece/gleece/issues",
			)
		}
		// Iterate over each security list
		encounteredErrorInList := false
		for _, check := range list.Checks {
			secErr := RequestAuth.GleeceRequestAuthorization(ctx, check)
			if secErr != nil {
				lastError = secErr
				encounteredErrorInList = true
				break
			}
		}
		// If no error was encountered, validation is considered successful
		// otherwise, we continue over to the next iteration whilst keeping track of the last error
		if !encounteredErrorInList {
			return nil
		}
	}
	// If we got here it means authentication has failed
	return lastError
}
func handleAuthorizationError(ctx *fiber.Ctx, authErr *external.SecurityError, operationId string) error {
	statusCode := int(authErr.StatusCode)
	if authErr.CustomError != nil {
		// For now, we support JSON only
		return ctx.Status(statusCode).JSON(authErr.CustomError.Payload)
	}
	stdError := external.Rfc7807Error{
		Type:     http.StatusText(statusCode),
		Detail:   authErr.Message,
		Status:   statusCode,
		Instance: "/gleece/authorization/error/" + operationId,
	}
	return ctx.Status(statusCode).JSON(stdError)
}
func wrapValidatorError(validatorErr error, operationId string, fieldName string) external.Rfc7807Error {
	return external.Rfc7807Error{
		Type: http.StatusText(http.StatusUnprocessableEntity),
		Detail: fmt.Sprintf(
			"A request was made to operation '%s' but parameter '%s' did not pass validation - %s",
			operationId,
			fieldName,
			validation.ExtractValidationErrorMessage(validatorErr, &fieldName),
		),
		Status:   http.StatusUnprocessableEntity,
		Instance: fmt.Sprintf("/gleece/validation/error/%s", operationId),
	}
}
func RegisterRoutes(engine *fiber.App) {
	validatorInstance = validator.New()
	urlParamRegex = regexp.MustCompile(`\{([\w\d-_]+)\}`)
	validatorInstance.RegisterValidation("validate_starts_with_letter", func(fl validator.FieldLevel) bool {
		return CustomValidatorPkg0.ValidateStartsWithLetter(fl)
	})
	// E2EController
	engine.Get(toFiberUrl("/e2e/simple-get"), func(ctx *fiber.Ctx) error {
		authErr := authorize(
			ctx,
			[]SecurityCheckList{
				{
					Relation: SecurityListRelationAnd,
					Checks: []external.SecurityCheck{
						{
							SchemaName: "securitySchemaName2",
							Scopes: []string{
								"config",
							},
						},
					},
				},
			},
		)
		if authErr != nil {
			return handleAuthorizationError(ctx, authErr, "SimpleGet")
		}
		controller := E2EControllerImport.E2EController{}
		controller.InitController(ctx)
		if continueOperation := MiddlewarePkg0.MiddlewareBeforeOperation(ctx); continueOperation == false {
			return nil
		}
		value, opError := controller.SimpleGet()
		for key, value := range controller.GetHeaders() {
			ctx.Set(key, value)
		}
		ctx.Set("x-inject", "true")
		statusCode := getStatusCode(&controller, true, opError)
		if opError == nil {
			if continueOperation := MiddlewarePkg1.MiddlewareAfterOperationSuccess(ctx); continueOperation == false {
				return nil
			}
		}
		if opError != nil {
			if continueOperation := MiddlewarePkg2.MiddlewareOnError(ctx, opError); continueOperation == false {
				return nil
			}
			if continueOperation := MiddlewarePkg3.MiddlewareOnError2(ctx, opError); continueOperation == false {
				return nil
			}
			stdError := external.Rfc7807Error{
				Type:       http.StatusText(statusCode),
				Detail:     "Encountered an error during operation 'SimpleGet'",
				Status:     statusCode,
				Instance:   "/gleece/controller/error/SimpleGet",
				Extensions: map[string]string{"error": opError.Error()},
			}
			return ctx.Status(statusCode).JSON(stdError)
		}
		return ctx.Status(statusCode).JSON(value)
	})
	engine.Get(toFiberUrl("/e2e/simple-get-empty-string"), func(ctx *fiber.Ctx) error {
		authErr := authorize(
			ctx,
			[]SecurityCheckList{
				{
					Relation: SecurityListRelationAnd,
					Checks: []external.SecurityCheck{
						{
							SchemaName: "securitySchemaName2",
							Scopes: []string{
								"config",
							},
						},
					},
				},
			},
		)
		if authErr != nil {
			return handleAuthorizationError(ctx, authErr, "SimpleGetEmptyString")
		}
		controller := E2EControllerImport.E2EController{}
		controller.InitController(ctx)
		if continueOperation := MiddlewarePkg0.MiddlewareBeforeOperation(ctx); continueOperation == false {
			return nil
		}
		value, opError := controller.SimpleGetEmptyString()
		for key, value := range controller.GetHeaders() {
			ctx.Set(key, value)
		}
		ctx.Set("x-inject", "true")
		statusCode := getStatusCode(&controller, true, opError)
		if opError == nil {
			if continueOperation := MiddlewarePkg1.MiddlewareAfterOperationSuccess(ctx); continueOperation == false {
				return nil
			}
		}
		if opError != nil {
			if continueOperation := MiddlewarePkg2.MiddlewareOnError(ctx, opError); continueOperation == false {
				return nil
			}
			if continueOperation := MiddlewarePkg3.MiddlewareOnError2(ctx, opError); continueOperation == false {
				return nil
			}
			stdError := external.Rfc7807Error{
				Type:       http.StatusText(statusCode),
				Detail:     "Encountered an error during operation 'SimpleGetEmptyString'",
				Status:     statusCode,
				Instance:   "/gleece/controller/error/SimpleGetEmptyString",
				Extensions: map[string]string{"error": opError.Error()},
			}
			return ctx.Status(statusCode).JSON(stdError)
		}
		return ctx.Status(statusCode).JSON(value)
	})
	engine.Get(toFiberUrl("/e2e/simple-get-ptr-string"), func(ctx *fiber.Ctx) error {
		authErr := authorize(
			ctx,
			[]SecurityCheckList{
				{
					Relation: SecurityListRelationAnd,
					Checks: []external.SecurityCheck{
						{
							SchemaName: "securitySchemaName2",
							Scopes: []string{
								"config",
							},
						},
					},
				},
			},
		)
		if authErr != nil {
			return handleAuthorizationError(ctx, authErr, "SimpleGetPtrString")
		}
		controller := E2EControllerImport.E2EController{}
		controller.InitController(ctx)
		if continueOperation := MiddlewarePkg0.MiddlewareBeforeOperation(ctx); continueOperation == false {
			return nil
		}
		value, opError := controller.SimpleGetPtrString()
		for key, value := range controller.GetHeaders() {
			ctx.Set(key, value)
		}
		ctx.Set("x-inject", "true")
		statusCode := getStatusCode(&controller, true, opError)
		if opError == nil {
			if continueOperation := MiddlewarePkg1.MiddlewareAfterOperationSuccess(ctx); continueOperation == false {
				return nil
			}
		}
		if opError != nil {
			if continueOperation := MiddlewarePkg2.MiddlewareOnError(ctx, opError); continueOperation == false {
				return nil
			}
			if continueOperation := MiddlewarePkg3.MiddlewareOnError2(ctx, opError); continueOperation == false {
				return nil
			}
			stdError := external.Rfc7807Error{
				Type:       http.StatusText(statusCode),
				Detail:     "Encountered an error during operation 'SimpleGetPtrString'",
				Status:     statusCode,
				Instance:   "/gleece/controller/error/SimpleGetPtrString",
				Extensions: map[string]string{"error": opError.Error()},
			}
			return ctx.Status(statusCode).JSON(stdError)
		}
		return ctx.Status(statusCode).JSON(value)
	})
	engine.Get(toFiberUrl("/e2e/simple-get-null-string"), func(ctx *fiber.Ctx) error {
		authErr := authorize(
			ctx,
			[]SecurityCheckList{
				{
					Relation: SecurityListRelationAnd,
					Checks: []external.SecurityCheck{
						{
							SchemaName: "securitySchemaName2",
							Scopes: []string{
								"config",
							},
						},
					},
				},
			},
		)
		if authErr != nil {
			return handleAuthorizationError(ctx, authErr, "SimpleGetNullString")
		}
		controller := E2EControllerImport.E2EController{}
		controller.InitController(ctx)
		if continueOperation := MiddlewarePkg0.MiddlewareBeforeOperation(ctx); continueOperation == false {
			return nil
		}
		value, opError := controller.SimpleGetNullString()
		for key, value := range controller.GetHeaders() {
			ctx.Set(key, value)
		}
		ctx.Set("x-inject", "true")
		statusCode := getStatusCode(&controller, true, opError)
		if opError == nil {
			if continueOperation := MiddlewarePkg1.MiddlewareAfterOperationSuccess(ctx); continueOperation == false {
				return nil
			}
		}
		if opError != nil {
			if continueOperation := MiddlewarePkg2.MiddlewareOnError(ctx, opError); continueOperation == false {
				return nil
			}
			if continueOperation := MiddlewarePkg3.MiddlewareOnError2(ctx, opError); continueOperation == false {
				return nil
			}
			stdError := external.Rfc7807Error{
				Type:       http.StatusText(statusCode),
				Detail:     "Encountered an error during operation 'SimpleGetNullString'",
				Status:     statusCode,
				Instance:   "/gleece/controller/error/SimpleGetNullString",
				Extensions: map[string]string{"error": opError.Error()},
			}
			return ctx.Status(statusCode).JSON(stdError)
		}
		return ctx.Status(statusCode).JSON(value)
	})
	engine.Get(toFiberUrl("/e2e/simple-get-object"), func(ctx *fiber.Ctx) error {
		authErr := authorize(
			ctx,
			[]SecurityCheckList{
				{
					Relation: SecurityListRelationAnd,
					Checks: []external.SecurityCheck{
						{
							SchemaName: "securitySchemaName2",
							Scopes: []string{
								"config",
							},
						},
					},
				},
			},
		)
		if authErr != nil {
			return handleAuthorizationError(ctx, authErr, "SimpleGetObject")
		}
		controller := E2EControllerImport.E2EController{}
		controller.InitController(ctx)
		if continueOperation := MiddlewarePkg0.MiddlewareBeforeOperation(ctx); continueOperation == false {
			return nil
		}
		value, opError := controller.SimpleGetObject()
		for key, value := range controller.GetHeaders() {
			ctx.Set(key, value)
		}
		ctx.Set("x-inject", "true")
		statusCode := getStatusCode(&controller, true, opError)
		if opError == nil {
			if continueOperation := MiddlewarePkg1.MiddlewareAfterOperationSuccess(ctx); continueOperation == false {
				return nil
			}
		}
		if opError != nil {
			if continueOperation := MiddlewarePkg2.MiddlewareOnError(ctx, opError); continueOperation == false {
				return nil
			}
			if continueOperation := MiddlewarePkg3.MiddlewareOnError2(ctx, opError); continueOperation == false {
				return nil
			}
			stdError := external.Rfc7807Error{
				Type:       http.StatusText(statusCode),
				Detail:     "Encountered an error during operation 'SimpleGetObject'",
				Status:     statusCode,
				Instance:   "/gleece/controller/error/SimpleGetObject",
				Extensions: map[string]string{"error": opError.Error()},
			}
			return ctx.Status(statusCode).JSON(stdError)
		}
		return ctx.Status(statusCode).JSON(value)
	})
	engine.Get(toFiberUrl("/e2e/simple-get-object-ptr"), func(ctx *fiber.Ctx) error {
		authErr := authorize(
			ctx,
			[]SecurityCheckList{
				{
					Relation: SecurityListRelationAnd,
					Checks: []external.SecurityCheck{
						{
							SchemaName: "securitySchemaName2",
							Scopes: []string{
								"config",
							},
						},
					},
				},
			},
		)
		if authErr != nil {
			return handleAuthorizationError(ctx, authErr, "SimpleGetObjectPtr")
		}
		controller := E2EControllerImport.E2EController{}
		controller.InitController(ctx)
		if continueOperation := MiddlewarePkg0.MiddlewareBeforeOperation(ctx); continueOperation == false {
			return nil
		}
		value, opError := controller.SimpleGetObjectPtr()
		for key, value := range controller.GetHeaders() {
			ctx.Set(key, value)
		}
		ctx.Set("x-inject", "true")
		statusCode := getStatusCode(&controller, true, opError)
		if opError == nil {
			if continueOperation := MiddlewarePkg1.MiddlewareAfterOperationSuccess(ctx); continueOperation == false {
				return nil
			}
		}
		if opError != nil {
			if continueOperation := MiddlewarePkg2.MiddlewareOnError(ctx, opError); continueOperation == false {
				return nil
			}
			if continueOperation := MiddlewarePkg3.MiddlewareOnError2(ctx, opError); continueOperation == false {
				return nil
			}
			stdError := external.Rfc7807Error{
				Type:       http.StatusText(statusCode),
				Detail:     "Encountered an error during operation 'SimpleGetObjectPtr'",
				Status:     statusCode,
				Instance:   "/gleece/controller/error/SimpleGetObjectPtr",
				Extensions: map[string]string{"error": opError.Error()},
			}
			return ctx.Status(statusCode).JSON(stdError)
		}
		return ctx.Status(statusCode).JSON(value)
	})
	engine.Get(toFiberUrl("/e2e/simple-get-object-null"), func(ctx *fiber.Ctx) error {
		authErr := authorize(
			ctx,
			[]SecurityCheckList{
				{
					Relation: SecurityListRelationAnd,
					Checks: []external.SecurityCheck{
						{
							SchemaName: "securitySchemaName2",
							Scopes: []string{
								"config",
							},
						},
					},
				},
			},
		)
		if authErr != nil {
			return handleAuthorizationError(ctx, authErr, "SimpleGetObjectNull")
		}
		controller := E2EControllerImport.E2EController{}
		controller.InitController(ctx)
		if continueOperation := MiddlewarePkg0.MiddlewareBeforeOperation(ctx); continueOperation == false {
			return nil
		}
		value, opError := controller.SimpleGetObjectNull()
		for key, value := range controller.GetHeaders() {
			ctx.Set(key, value)
		}
		ctx.Set("x-inject", "true")
		statusCode := getStatusCode(&controller, true, opError)
		if opError == nil {
			if continueOperation := MiddlewarePkg1.MiddlewareAfterOperationSuccess(ctx); continueOperation == false {
				return nil
			}
		}
		if opError != nil {
			if continueOperation := MiddlewarePkg2.MiddlewareOnError(ctx, opError); continueOperation == false {
				return nil
			}
			if continueOperation := MiddlewarePkg3.MiddlewareOnError2(ctx, opError); continueOperation == false {
				return nil
			}
			stdError := external.Rfc7807Error{
				Type:       http.StatusText(statusCode),
				Detail:     "Encountered an error during operation 'SimpleGetObjectNull'",
				Status:     statusCode,
				Instance:   "/gleece/controller/error/SimpleGetObjectNull",
				Extensions: map[string]string{"error": opError.Error()},
			}
			return ctx.Status(statusCode).JSON(stdError)
		}
		return ctx.Status(statusCode).JSON(value)
	})
	engine.Get(toFiberUrl("/e2e/simple-get-empty"), func(ctx *fiber.Ctx) error {
		authErr := authorize(
			ctx,
			[]SecurityCheckList{
				{
					Relation: SecurityListRelationAnd,
					Checks: []external.SecurityCheck{
						{
							SchemaName: "securitySchemaName2",
							Scopes: []string{
								"config",
							},
						},
					},
				},
			},
		)
		if authErr != nil {
			return handleAuthorizationError(ctx, authErr, "SimpleGetEmpty")
		}
		controller := E2EControllerImport.E2EController{}
		controller.InitController(ctx)
		var queryParamRawPtr *string = nil
		queryParamRaw := ctx.Query("queryParam")
		isqueryParamExists := ctx.Context().QueryArgs().Has("queryParam")
		if isqueryParamExists {
			queryParam := queryParamRaw
			queryParamRawPtr = &queryParam
		}
		if validatorErr := validatorInstance.Var(queryParamRawPtr, "required"); validatorErr != nil {
			fieldName := "queryParam"
			validationError := wrapValidatorError(validatorErr, "SimpleGetEmpty", fieldName)
			return ctx.Status(http.StatusUnprocessableEntity).JSON(validationError)
		}
		if continueOperation := MiddlewarePkg0.MiddlewareBeforeOperation(ctx); continueOperation == false {
			return nil
		}
		opError := controller.SimpleGetEmpty(*queryParamRawPtr)
		for key, value := range controller.GetHeaders() {
			ctx.Set(key, value)
		}
		ctx.Set("x-inject", "true")
		statusCode := getStatusCode(&controller, false, opError)
		if opError == nil {
			if continueOperation := MiddlewarePkg1.MiddlewareAfterOperationSuccess(ctx); continueOperation == false {
				return nil
			}
		}
		if opError != nil {
			if continueOperation := MiddlewarePkg2.MiddlewareOnError(ctx, opError); continueOperation == false {
				return nil
			}
			if continueOperation := MiddlewarePkg3.MiddlewareOnError2(ctx, opError); continueOperation == false {
				return nil
			}
			stdError := external.Rfc7807Error{
				Type:       http.StatusText(statusCode),
				Detail:     "Encountered an error during operation 'SimpleGetEmpty'",
				Status:     statusCode,
				Instance:   "/gleece/controller/error/SimpleGetEmpty",
				Extensions: map[string]string{"error": opError.Error()},
			}
			return ctx.Status(statusCode).JSON(stdError)
		}
		ctx.Set("Content-Type", "application/json")
		ctx.Status(statusCode)
		return nil
	})
	engine.Get(toFiberUrl("/e2e/get-with-all-params/{pathParam}"), func(ctx *fiber.Ctx) error {
		authErr := authorize(
			ctx,
			[]SecurityCheckList{
				{
					Relation: SecurityListRelationAnd,
					Checks: []external.SecurityCheck{
						{
							SchemaName: "securitySchemaName2",
							Scopes: []string{
								"config",
							},
						},
					},
				},
			},
		)
		if authErr != nil {
			return handleAuthorizationError(ctx, authErr, "GetWithAllParams")
		}
		controller := E2EControllerImport.E2EController{}
		controller.InitController(ctx)
		var queryParamRawPtr *string = nil
		queryParamRaw := ctx.Query("queryParam")
		isqueryParamExists := ctx.Context().QueryArgs().Has("queryParam")
		if isqueryParamExists {
			queryParam := queryParamRaw
			queryParamRawPtr = &queryParam
		}
		if validatorErr := validatorInstance.Var(queryParamRawPtr, "required"); validatorErr != nil {
			fieldName := "queryParam"
			validationError := wrapValidatorError(validatorErr, "GetWithAllParams", fieldName)
			return ctx.Status(http.StatusUnprocessableEntity).JSON(validationError)
		}
		var pathParamRawPtr *string = nil
		pathParamRaw := ctx.Params("pathParam")
		ispathParamExists := true // if parameter is in route but not provided, it won't reach this handler
		if ispathParamExists {
			pathParam := pathParamRaw
			pathParamRawPtr = &pathParam
		}
		if validatorErr := validatorInstance.Var(pathParamRawPtr, "required"); validatorErr != nil {
			fieldName := "pathParam"
			validationError := wrapValidatorError(validatorErr, "GetWithAllParams", fieldName)
			return ctx.Status(http.StatusUnprocessableEntity).JSON(validationError)
		}
		var headerParamRawPtr *string = nil
		headerParamRaw := ctx.Get("headerParam")
		isheaderParamExists := len(ctx.Request().Header.Peek("headerParam")) > 0
		if isheaderParamExists {
			headerParam := headerParamRaw
			headerParamRawPtr = &headerParam
		}
		if validatorErr := validatorInstance.Var(headerParamRawPtr, "required"); validatorErr != nil {
			fieldName := "headerParam"
			validationError := wrapValidatorError(validatorErr, "GetWithAllParams", fieldName)
			return ctx.Status(http.StatusUnprocessableEntity).JSON(validationError)
		}
		if continueOperation := MiddlewarePkg0.MiddlewareBeforeOperation(ctx); continueOperation == false {
			return nil
		}
		value, opError := controller.GetWithAllParams(*queryParamRawPtr, *pathParamRawPtr, *headerParamRawPtr)
		for key, value := range controller.GetHeaders() {
			ctx.Set(key, value)
		}
		ctx.Set("x-inject", "true")
		statusCode := getStatusCode(&controller, true, opError)
		if opError == nil {
			if continueOperation := MiddlewarePkg1.MiddlewareAfterOperationSuccess(ctx); continueOperation == false {
				return nil
			}
		}
		if opError != nil {
			if continueOperation := MiddlewarePkg2.MiddlewareOnError(ctx, opError); continueOperation == false {
				return nil
			}
			if continueOperation := MiddlewarePkg3.MiddlewareOnError2(ctx, opError); continueOperation == false {
				return nil
			}
			stdError := external.Rfc7807Error{
				Type:       http.StatusText(statusCode),
				Detail:     "Encountered an error during operation 'GetWithAllParams'",
				Status:     statusCode,
				Instance:   "/gleece/controller/error/GetWithAllParams",
				Extensions: map[string]string{"error": opError.Error()},
			}
			return ctx.Status(statusCode).JSON(stdError)
		}
		return ctx.Status(statusCode).JSON(value)
	})
	engine.Get(toFiberUrl("/e2e/get-with-all-params-ptr/{pathParam}"), func(ctx *fiber.Ctx) error {
		authErr := authorize(
			ctx,
			[]SecurityCheckList{
				{
					Relation: SecurityListRelationAnd,
					Checks: []external.SecurityCheck{
						{
							SchemaName: "securitySchemaName2",
							Scopes: []string{
								"config",
							},
						},
					},
				},
			},
		)
		if authErr != nil {
			return handleAuthorizationError(ctx, authErr, "GetWithAllParamsPtr")
		}
		controller := E2EControllerImport.E2EController{}
		controller.InitController(ctx)
		var queryParamRawPtr *string = nil
		queryParamRaw := ctx.Query("queryParam")
		isqueryParamExists := ctx.Context().QueryArgs().Has("queryParam")
		if isqueryParamExists {
			queryParam := queryParamRaw
			queryParamRawPtr = &queryParam
		}
		var pathParamRawPtr *string = nil
		pathParamRaw := ctx.Params("pathParam")
		ispathParamExists := true // if parameter is in route but not provided, it won't reach this handler
		if ispathParamExists {
			pathParam := pathParamRaw
			pathParamRawPtr = &pathParam
		}
		if validatorErr := validatorInstance.Var(pathParamRawPtr, "required"); validatorErr != nil {
			fieldName := "pathParam"
			validationError := wrapValidatorError(validatorErr, "GetWithAllParamsPtr", fieldName)
			return ctx.Status(http.StatusUnprocessableEntity).JSON(validationError)
		}
		var headerParamRawPtr *string = nil
		headerParamRaw := ctx.Get("headerParam")
		isheaderParamExists := len(ctx.Request().Header.Peek("headerParam")) > 0
		if isheaderParamExists {
			headerParam := headerParamRaw
			headerParamRawPtr = &headerParam
		}
		if continueOperation := MiddlewarePkg0.MiddlewareBeforeOperation(ctx); continueOperation == false {
			return nil
		}
		value, opError := controller.GetWithAllParamsPtr(queryParamRawPtr, pathParamRawPtr, headerParamRawPtr)
		for key, value := range controller.GetHeaders() {
			ctx.Set(key, value)
		}
		ctx.Set("x-inject", "true")
		statusCode := getStatusCode(&controller, true, opError)
		if opError == nil {
			if continueOperation := MiddlewarePkg1.MiddlewareAfterOperationSuccess(ctx); continueOperation == false {
				return nil
			}
		}
		if opError != nil {
			if continueOperation := MiddlewarePkg2.MiddlewareOnError(ctx, opError); continueOperation == false {
				return nil
			}
			if continueOperation := MiddlewarePkg3.MiddlewareOnError2(ctx, opError); continueOperation == false {
				return nil
			}
			stdError := external.Rfc7807Error{
				Type:       http.StatusText(statusCode),
				Detail:     "Encountered an error during operation 'GetWithAllParamsPtr'",
				Status:     statusCode,
				Instance:   "/gleece/controller/error/GetWithAllParamsPtr",
				Extensions: map[string]string{"error": opError.Error()},
			}
			return ctx.Status(statusCode).JSON(stdError)
		}
		return ctx.Status(statusCode).JSON(value)
	})
	engine.Get(toFiberUrl("/e2e/get-with-all-params-required-ptr/{pathParam}"), func(ctx *fiber.Ctx) error {
		authErr := authorize(
			ctx,
			[]SecurityCheckList{
				{
					Relation: SecurityListRelationAnd,
					Checks: []external.SecurityCheck{
						{
							SchemaName: "securitySchemaName2",
							Scopes: []string{
								"config",
							},
						},
					},
				},
			},
		)
		if authErr != nil {
			return handleAuthorizationError(ctx, authErr, "GetWithAllParamsRequiredPtr")
		}
		controller := E2EControllerImport.E2EController{}
		controller.InitController(ctx)
		var queryParamRawPtr *string = nil
		queryParamRaw := ctx.Query("queryParam")
		isqueryParamExists := ctx.Context().QueryArgs().Has("queryParam")
		if isqueryParamExists {
			queryParam := queryParamRaw
			queryParamRawPtr = &queryParam
		}
		if validatorErr := validatorInstance.Var(queryParamRawPtr, "required"); validatorErr != nil {
			fieldName := "queryParam"
			validationError := wrapValidatorError(validatorErr, "GetWithAllParamsRequiredPtr", fieldName)
			return ctx.Status(http.StatusUnprocessableEntity).JSON(validationError)
		}
		var pathParamRawPtr *string = nil
		pathParamRaw := ctx.Params("pathParam")
		ispathParamExists := true // if parameter is in route but not provided, it won't reach this handler
		if ispathParamExists {
			pathParam := pathParamRaw
			pathParamRawPtr = &pathParam
		}
		if validatorErr := validatorInstance.Var(pathParamRawPtr, "required"); validatorErr != nil {
			fieldName := "pathParam"
			validationError := wrapValidatorError(validatorErr, "GetWithAllParamsRequiredPtr", fieldName)
			return ctx.Status(http.StatusUnprocessableEntity).JSON(validationError)
		}
		var headerParamRawPtr *string = nil
		headerParamRaw := ctx.Get("headerParam")
		isheaderParamExists := len(ctx.Request().Header.Peek("headerParam")) > 0
		if isheaderParamExists {
			headerParam := headerParamRaw
			headerParamRawPtr = &headerParam
		}
		if validatorErr := validatorInstance.Var(headerParamRawPtr, "required"); validatorErr != nil {
			fieldName := "headerParam"
			validationError := wrapValidatorError(validatorErr, "GetWithAllParamsRequiredPtr", fieldName)
			return ctx.Status(http.StatusUnprocessableEntity).JSON(validationError)
		}
		if continueOperation := MiddlewarePkg0.MiddlewareBeforeOperation(ctx); continueOperation == false {
			return nil
		}
		value, opError := controller.GetWithAllParamsRequiredPtr(queryParamRawPtr, pathParamRawPtr, headerParamRawPtr)
		for key, value := range controller.GetHeaders() {
			ctx.Set(key, value)
		}
		ctx.Set("x-inject", "true")
		statusCode := getStatusCode(&controller, true, opError)
		if opError == nil {
			if continueOperation := MiddlewarePkg1.MiddlewareAfterOperationSuccess(ctx); continueOperation == false {
				return nil
			}
		}
		if opError != nil {
			if continueOperation := MiddlewarePkg2.MiddlewareOnError(ctx, opError); continueOperation == false {
				return nil
			}
			if continueOperation := MiddlewarePkg3.MiddlewareOnError2(ctx, opError); continueOperation == false {
				return nil
			}
			stdError := external.Rfc7807Error{
				Type:       http.StatusText(statusCode),
				Detail:     "Encountered an error during operation 'GetWithAllParamsRequiredPtr'",
				Status:     statusCode,
				Instance:   "/gleece/controller/error/GetWithAllParamsRequiredPtr",
				Extensions: map[string]string{"error": opError.Error()},
			}
			return ctx.Status(statusCode).JSON(stdError)
		}
		return ctx.Status(statusCode).JSON(value)
	})
	engine.Post(toFiberUrl("/e2e/post-with-all-params-body"), func(ctx *fiber.Ctx) error {
		authErr := authorize(
			ctx,
			[]SecurityCheckList{
				{
					Relation: SecurityListRelationAnd,
					Checks: []external.SecurityCheck{
						{
							SchemaName: "securitySchemaName2",
							Scopes: []string{
								"config",
							},
						},
					},
				},
			},
		)
		if authErr != nil {
			return handleAuthorizationError(ctx, authErr, "PostWithAllParamsWithBody")
		}
		controller := E2EControllerImport.E2EController{}
		controller.InitController(ctx)
		var conversionErr error
		var queryParamRawPtr *string = nil
		queryParamRaw := ctx.Query("queryParam")
		isqueryParamExists := ctx.Context().QueryArgs().Has("queryParam")
		if isqueryParamExists {
			queryParam := queryParamRaw
			queryParamRawPtr = &queryParam
		}
		if validatorErr := validatorInstance.Var(queryParamRawPtr, "required"); validatorErr != nil {
			fieldName := "queryParam"
			validationError := wrapValidatorError(validatorErr, "PostWithAllParamsWithBody", fieldName)
			return ctx.Status(http.StatusUnprocessableEntity).JSON(validationError)
		}
		var headerParamRawPtr *string = nil
		headerParamRaw := ctx.Get("headerParam")
		isheaderParamExists := len(ctx.Request().Header.Peek("headerParam")) > 0
		if isheaderParamExists {
			headerParam := headerParamRaw
			headerParamRawPtr = &headerParam
		}
		if validatorErr := validatorInstance.Var(headerParamRawPtr, "required"); validatorErr != nil {
			fieldName := "headerParam"
			validationError := wrapValidatorError(validatorErr, "PostWithAllParamsWithBody", fieldName)
			return ctx.Status(http.StatusUnprocessableEntity).JSON(validationError)
		}
		var theBodyRawPtr *Param33theBody.BodyInfo = nil
		conversionErr = bindAndValidateBody(ctx, "application/json", "required", &theBodyRawPtr)
		if conversionErr != nil {
			validationError := external.Rfc7807Error{
				Type: http.StatusText(http.StatusUnprocessableEntity),
				Detail: fmt.Sprintf(
					"A request was made to operation 'PostWithAllParamsWithBody' but body parameter '%s' did not pass validation of '%s' - %s",
					"theBody",
					"BodyInfo",
					validation.ExtractValidationErrorMessage(conversionErr, nil),
				),
				Status:   http.StatusUnprocessableEntity,
				Instance: "/gleece/validation/error/PostWithAllParamsWithBody",
			}
			return ctx.Status(http.StatusUnprocessableEntity).JSON(validationError)
		}
		if continueOperation := MiddlewarePkg0.MiddlewareBeforeOperation(ctx); continueOperation == false {
			return nil
		}
		value, opError := controller.PostWithAllParamsWithBody(*queryParamRawPtr, *headerParamRawPtr, *theBodyRawPtr)
		for key, value := range controller.GetHeaders() {
			ctx.Set(key, value)
		}
		ctx.Set("x-inject", "true")
		statusCode := getStatusCode(&controller, true, opError)
		if opError == nil {
			if continueOperation := MiddlewarePkg1.MiddlewareAfterOperationSuccess(ctx); continueOperation == false {
				return nil
			}
		}
		if opError != nil {
			if continueOperation := MiddlewarePkg2.MiddlewareOnError(ctx, opError); continueOperation == false {
				return nil
			}
			if continueOperation := MiddlewarePkg3.MiddlewareOnError2(ctx, opError); continueOperation == false {
				return nil
			}
			stdError := external.Rfc7807Error{
				Type:       http.StatusText(statusCode),
				Detail:     "Encountered an error during operation 'PostWithAllParamsWithBody'",
				Status:     statusCode,
				Instance:   "/gleece/controller/error/PostWithAllParamsWithBody",
				Extensions: map[string]string{"error": opError.Error()},
			}
			return ctx.Status(statusCode).JSON(stdError)
		}
		return ctx.Status(statusCode).JSON(value)
	})
	engine.Post(toFiberUrl("/e2e/post-with-all-params-body-ptr"), func(ctx *fiber.Ctx) error {
		authErr := authorize(
			ctx,
			[]SecurityCheckList{
				{
					Relation: SecurityListRelationAnd,
					Checks: []external.SecurityCheck{
						{
							SchemaName: "securitySchemaName2",
							Scopes: []string{
								"config",
							},
						},
					},
				},
			},
		)
		if authErr != nil {
			return handleAuthorizationError(ctx, authErr, "PostWithAllParamsWithBodyPtr")
		}
		controller := E2EControllerImport.E2EController{}
		controller.InitController(ctx)
		var conversionErr error
		var queryParamRawPtr *string = nil
		queryParamRaw := ctx.Query("queryParam")
		isqueryParamExists := ctx.Context().QueryArgs().Has("queryParam")
		if isqueryParamExists {
			queryParam := queryParamRaw
			queryParamRawPtr = &queryParam
		}
		var headerParamRawPtr *string = nil
		headerParamRaw := ctx.Get("headerParam")
		isheaderParamExists := len(ctx.Request().Header.Peek("headerParam")) > 0
		if isheaderParamExists {
			headerParam := headerParamRaw
			headerParamRawPtr = &headerParam
		}
		var theBodyRawPtr *Param38theBody.BodyInfo = nil
		conversionErr = bindAndValidateBody(ctx, "application/json", "", &theBodyRawPtr)
		if conversionErr != nil {
			validationError := external.Rfc7807Error{
				Type: http.StatusText(http.StatusUnprocessableEntity),
				Detail: fmt.Sprintf(
					"A request was made to operation 'PostWithAllParamsWithBodyPtr' but body parameter '%s' did not pass validation of '%s' - %s",
					"theBody",
					"BodyInfo",
					validation.ExtractValidationErrorMessage(conversionErr, nil),
				),
				Status:   http.StatusUnprocessableEntity,
				Instance: "/gleece/validation/error/PostWithAllParamsWithBodyPtr",
			}
			return ctx.Status(http.StatusUnprocessableEntity).JSON(validationError)
		}
		if continueOperation := MiddlewarePkg0.MiddlewareBeforeOperation(ctx); continueOperation == false {
			return nil
		}
		value, opError := controller.PostWithAllParamsWithBodyPtr(queryParamRawPtr, headerParamRawPtr, theBodyRawPtr)
		for key, value := range controller.GetHeaders() {
			ctx.Set(key, value)
		}
		ctx.Set("x-inject", "true")
		statusCode := getStatusCode(&controller, true, opError)
		if opError == nil {
			if continueOperation := MiddlewarePkg1.MiddlewareAfterOperationSuccess(ctx); continueOperation == false {
				return nil
			}
		}
		if opError != nil {
			if continueOperation := MiddlewarePkg2.MiddlewareOnError(ctx, opError); continueOperation == false {
				return nil
			}
			if continueOperation := MiddlewarePkg3.MiddlewareOnError2(ctx, opError); continueOperation == false {
				return nil
			}
			stdError := external.Rfc7807Error{
				Type:       http.StatusText(statusCode),
				Detail:     "Encountered an error during operation 'PostWithAllParamsWithBodyPtr'",
				Status:     statusCode,
				Instance:   "/gleece/controller/error/PostWithAllParamsWithBodyPtr",
				Extensions: map[string]string{"error": opError.Error()},
			}
			return ctx.Status(statusCode).JSON(stdError)
		}
		return ctx.Status(statusCode).JSON(value)
	})
	engine.Post(toFiberUrl("/e2e/post-with-all-params-body-required-ptr"), func(ctx *fiber.Ctx) error {
		authErr := authorize(
			ctx,
			[]SecurityCheckList{
				{
					Relation: SecurityListRelationAnd,
					Checks: []external.SecurityCheck{
						{
							SchemaName: "securitySchemaName2",
							Scopes: []string{
								"config",
							},
						},
					},
				},
			},
		)
		if authErr != nil {
			return handleAuthorizationError(ctx, authErr, "PostWithAllParamsWithBodyRequiredPtr")
		}
		controller := E2EControllerImport.E2EController{}
		controller.InitController(ctx)
		var conversionErr error
		var theBodyRawPtr *Param41theBody.BodyInfo = nil
		conversionErr = bindAndValidateBody(ctx, "application/json", "required", &theBodyRawPtr)
		if conversionErr != nil {
			validationError := external.Rfc7807Error{
				Type: http.StatusText(http.StatusUnprocessableEntity),
				Detail: fmt.Sprintf(
					"A request was made to operation 'PostWithAllParamsWithBodyRequiredPtr' but body parameter '%s' did not pass validation of '%s' - %s",
					"theBody",
					"BodyInfo",
					validation.ExtractValidationErrorMessage(conversionErr, nil),
				),
				Status:   http.StatusUnprocessableEntity,
				Instance: "/gleece/validation/error/PostWithAllParamsWithBodyRequiredPtr",
			}
			return ctx.Status(http.StatusUnprocessableEntity).JSON(validationError)
		}
		if continueOperation := MiddlewarePkg0.MiddlewareBeforeOperation(ctx); continueOperation == false {
			return nil
		}
		value, opError := controller.PostWithAllParamsWithBodyRequiredPtr(theBodyRawPtr)
		for key, value := range controller.GetHeaders() {
			ctx.Set(key, value)
		}
		ctx.Set("x-inject", "true")
		statusCode := getStatusCode(&controller, true, opError)
		if opError == nil {
			if continueOperation := MiddlewarePkg1.MiddlewareAfterOperationSuccess(ctx); continueOperation == false {
				return nil
			}
		}
		if opError != nil {
			if continueOperation := MiddlewarePkg2.MiddlewareOnError(ctx, opError); continueOperation == false {
				return nil
			}
			if continueOperation := MiddlewarePkg3.MiddlewareOnError2(ctx, opError); continueOperation == false {
				return nil
			}
			stdError := external.Rfc7807Error{
				Type:       http.StatusText(statusCode),
				Detail:     "Encountered an error during operation 'PostWithAllParamsWithBodyRequiredPtr'",
				Status:     statusCode,
				Instance:   "/gleece/controller/error/PostWithAllParamsWithBodyRequiredPtr",
				Extensions: map[string]string{"error": opError.Error()},
			}
			return ctx.Status(statusCode).JSON(stdError)
		}
		return ctx.Status(statusCode).JSON(value)
	})
	engine.Get(toFiberUrl("/e2e/get-header-start-with-letter"), func(ctx *fiber.Ctx) error {
		authErr := authorize(
			ctx,
			[]SecurityCheckList{
				{
					Relation: SecurityListRelationAnd,
					Checks: []external.SecurityCheck{
						{
							SchemaName: "securitySchemaName2",
							Scopes: []string{
								"config",
							},
						},
					},
				},
			},
		)
		if authErr != nil {
			return handleAuthorizationError(ctx, authErr, "GetHeaderStartWithLetter")
		}
		controller := E2EControllerImport.E2EController{}
		controller.InitController(ctx)
		var headerParamRawPtr *string = nil
		headerParamRaw := ctx.Get("headerParam")
		isheaderParamExists := len(ctx.Request().Header.Peek("headerParam")) > 0
		if isheaderParamExists {
			headerParam := headerParamRaw
			headerParamRawPtr = &headerParam
		}
		if validatorErr := validatorInstance.Var(headerParamRawPtr, "required,validate_starts_with_letter"); validatorErr != nil {
			fieldName := "headerParam"
			validationError := wrapValidatorError(validatorErr, "GetHeaderStartWithLetter", fieldName)
			return ctx.Status(http.StatusUnprocessableEntity).JSON(validationError)
		}
		if continueOperation := MiddlewarePkg0.MiddlewareBeforeOperation(ctx); continueOperation == false {
			return nil
		}
		value, opError := controller.GetHeaderStartWithLetter(*headerParamRawPtr)
		for key, value := range controller.GetHeaders() {
			ctx.Set(key, value)
		}
		ctx.Set("x-inject", "true")
		statusCode := getStatusCode(&controller, true, opError)
		if opError == nil {
			if continueOperation := MiddlewarePkg1.MiddlewareAfterOperationSuccess(ctx); continueOperation == false {
				return nil
			}
		}
		if opError != nil {
			if continueOperation := MiddlewarePkg2.MiddlewareOnError(ctx, opError); continueOperation == false {
				return nil
			}
			if continueOperation := MiddlewarePkg3.MiddlewareOnError2(ctx, opError); continueOperation == false {
				return nil
			}
			stdError := external.Rfc7807Error{
				Type:       http.StatusText(statusCode),
				Detail:     "Encountered an error during operation 'GetHeaderStartWithLetter'",
				Status:     statusCode,
				Instance:   "/gleece/controller/error/GetHeaderStartWithLetter",
				Extensions: map[string]string{"error": opError.Error()},
			}
			return ctx.Status(statusCode).JSON(stdError)
		}
		return ctx.Status(statusCode).JSON(value)
	})
	engine.Get(toFiberUrl("/e2e/with-default-config-security"), func(ctx *fiber.Ctx) error {
		authErr := authorize(
			ctx,
			[]SecurityCheckList{
				{
					Relation: SecurityListRelationAnd,
					Checks: []external.SecurityCheck{
						{
							SchemaName: "securitySchemaName2",
							Scopes: []string{
								"config",
							},
						},
					},
				},
			},
		)
		if authErr != nil {
			return handleAuthorizationError(ctx, authErr, "WithDefaultConfigSecurity")
		}
		controller := E2EControllerImport.E2EController{}
		controller.InitController(ctx)
		var headerParamRawPtr *string = nil
		headerParamRaw := ctx.Get("x-test-scopes")
		isheaderParamExists := len(ctx.Request().Header.Peek("x-test-scopes")) > 0
		if isheaderParamExists {
			headerParam := headerParamRaw
			headerParamRawPtr = &headerParam
		}
		if validatorErr := validatorInstance.Var(headerParamRawPtr, "required"); validatorErr != nil {
			fieldName := "headerParam"
			validationError := wrapValidatorError(validatorErr, "WithDefaultConfigSecurity", fieldName)
			return ctx.Status(http.StatusUnprocessableEntity).JSON(validationError)
		}
		if continueOperation := MiddlewarePkg0.MiddlewareBeforeOperation(ctx); continueOperation == false {
			return nil
		}
		value, opError := controller.WithDefaultConfigSecurity(*headerParamRawPtr)
		for key, value := range controller.GetHeaders() {
			ctx.Set(key, value)
		}
		ctx.Set("x-inject", "true")
		statusCode := getStatusCode(&controller, true, opError)
		if opError == nil {
			if continueOperation := MiddlewarePkg1.MiddlewareAfterOperationSuccess(ctx); continueOperation == false {
				return nil
			}
		}
		if opError != nil {
			if continueOperation := MiddlewarePkg2.MiddlewareOnError(ctx, opError); continueOperation == false {
				return nil
			}
			if continueOperation := MiddlewarePkg3.MiddlewareOnError2(ctx, opError); continueOperation == false {
				return nil
			}
			stdError := external.Rfc7807Error{
				Type:       http.StatusText(statusCode),
				Detail:     "Encountered an error during operation 'WithDefaultConfigSecurity'",
				Status:     statusCode,
				Instance:   "/gleece/controller/error/WithDefaultConfigSecurity",
				Extensions: map[string]string{"error": opError.Error()},
			}
			return ctx.Status(statusCode).JSON(stdError)
		}
		return ctx.Status(statusCode).JSON(value)
	})
	engine.Get(toFiberUrl("/e2e/with-one-security"), func(ctx *fiber.Ctx) error {
		authErr := authorize(
			ctx,
			[]SecurityCheckList{
				{
					Relation: SecurityListRelationAnd,
					Checks: []external.SecurityCheck{
						{
							SchemaName: "securitySchemaName",
							Scopes: []string{
								"other",
							},
						},
					},
				},
			},
		)
		if authErr != nil {
			return handleAuthorizationError(ctx, authErr, "WithOneSecurity")
		}
		controller := E2EControllerImport.E2EController{}
		controller.InitController(ctx)
		var headerParamRawPtr *string = nil
		headerParamRaw := ctx.Get("x-test-scopes")
		isheaderParamExists := len(ctx.Request().Header.Peek("x-test-scopes")) > 0
		if isheaderParamExists {
			headerParam := headerParamRaw
			headerParamRawPtr = &headerParam
		}
		if validatorErr := validatorInstance.Var(headerParamRawPtr, "required"); validatorErr != nil {
			fieldName := "headerParam"
			validationError := wrapValidatorError(validatorErr, "WithOneSecurity", fieldName)
			return ctx.Status(http.StatusUnprocessableEntity).JSON(validationError)
		}
		if continueOperation := MiddlewarePkg0.MiddlewareBeforeOperation(ctx); continueOperation == false {
			return nil
		}
		value, opError := controller.WithOneSecurity(*headerParamRawPtr)
		for key, value := range controller.GetHeaders() {
			ctx.Set(key, value)
		}
		ctx.Set("x-inject", "true")
		statusCode := getStatusCode(&controller, true, opError)
		if opError == nil {
			if continueOperation := MiddlewarePkg1.MiddlewareAfterOperationSuccess(ctx); continueOperation == false {
				return nil
			}
		}
		if opError != nil {
			if continueOperation := MiddlewarePkg2.MiddlewareOnError(ctx, opError); continueOperation == false {
				return nil
			}
			if continueOperation := MiddlewarePkg3.MiddlewareOnError2(ctx, opError); continueOperation == false {
				return nil
			}
			stdError := external.Rfc7807Error{
				Type:       http.StatusText(statusCode),
				Detail:     "Encountered an error during operation 'WithOneSecurity'",
				Status:     statusCode,
				Instance:   "/gleece/controller/error/WithOneSecurity",
				Extensions: map[string]string{"error": opError.Error()},
			}
			return ctx.Status(statusCode).JSON(stdError)
		}
		return ctx.Status(statusCode).JSON(value)
	})
	engine.Get(toFiberUrl("/e2e/with-two-security"), func(ctx *fiber.Ctx) error {
		authErr := authorize(
			ctx,
			[]SecurityCheckList{
				{
					Relation: SecurityListRelationAnd,
					Checks: []external.SecurityCheck{
						{
							SchemaName: "securitySchemaName",
							Scopes: []string{
								"other",
							},
						},
					},
				},
				{
					Relation: SecurityListRelationAnd,
					Checks: []external.SecurityCheck{
						{
							SchemaName: "securitySchemaName2",
							Scopes: []string{
								"write",
								"read",
							},
						},
					},
				},
			},
		)
		if authErr != nil {
			return handleAuthorizationError(ctx, authErr, "WithTwoSecurity")
		}
		controller := E2EControllerImport.E2EController{}
		controller.InitController(ctx)
		var headerParamRawPtr *string = nil
		headerParamRaw := ctx.Get("x-test-scopes")
		isheaderParamExists := len(ctx.Request().Header.Peek("x-test-scopes")) > 0
		if isheaderParamExists {
			headerParam := headerParamRaw
			headerParamRawPtr = &headerParam
		}
		if validatorErr := validatorInstance.Var(headerParamRawPtr, "required"); validatorErr != nil {
			fieldName := "headerParam"
			validationError := wrapValidatorError(validatorErr, "WithTwoSecurity", fieldName)
			return ctx.Status(http.StatusUnprocessableEntity).JSON(validationError)
		}
		if continueOperation := MiddlewarePkg0.MiddlewareBeforeOperation(ctx); continueOperation == false {
			return nil
		}
		value, opError := controller.WithTwoSecurity(*headerParamRawPtr)
		for key, value := range controller.GetHeaders() {
			ctx.Set(key, value)
		}
		ctx.Set("x-inject", "true")
		statusCode := getStatusCode(&controller, true, opError)
		if opError == nil {
			if continueOperation := MiddlewarePkg1.MiddlewareAfterOperationSuccess(ctx); continueOperation == false {
				return nil
			}
		}
		if opError != nil {
			if continueOperation := MiddlewarePkg2.MiddlewareOnError(ctx, opError); continueOperation == false {
				return nil
			}
			if continueOperation := MiddlewarePkg3.MiddlewareOnError2(ctx, opError); continueOperation == false {
				return nil
			}
			stdError := external.Rfc7807Error{
				Type:       http.StatusText(statusCode),
				Detail:     "Encountered an error during operation 'WithTwoSecurity'",
				Status:     statusCode,
				Instance:   "/gleece/controller/error/WithTwoSecurity",
				Extensions: map[string]string{"error": opError.Error()},
			}
			return ctx.Status(statusCode).JSON(stdError)
		}
		return ctx.Status(statusCode).JSON(value)
	})
	engine.Get(toFiberUrl("/e2e/with-two-security-same-method"), func(ctx *fiber.Ctx) error {
		authErr := authorize(
			ctx,
			[]SecurityCheckList{
				{
					Relation: SecurityListRelationAnd,
					Checks: []external.SecurityCheck{
						{
							SchemaName: "securitySchemaName",
							Scopes: []string{
								"other",
							},
						},
					},
				},
				{
					Relation: SecurityListRelationAnd,
					Checks: []external.SecurityCheck{
						{
							SchemaName: "securitySchemaName",
							Scopes: []string{
								"write",
								"read",
							},
						},
					},
				},
			},
		)
		if authErr != nil {
			return handleAuthorizationError(ctx, authErr, "WithTwoSecuritySameMethod")
		}
		controller := E2EControllerImport.E2EController{}
		controller.InitController(ctx)
		var headerParamRawPtr *string = nil
		headerParamRaw := ctx.Get("x-test-scopes")
		isheaderParamExists := len(ctx.Request().Header.Peek("x-test-scopes")) > 0
		if isheaderParamExists {
			headerParam := headerParamRaw
			headerParamRawPtr = &headerParam
		}
		if validatorErr := validatorInstance.Var(headerParamRawPtr, "required"); validatorErr != nil {
			fieldName := "headerParam"
			validationError := wrapValidatorError(validatorErr, "WithTwoSecuritySameMethod", fieldName)
			return ctx.Status(http.StatusUnprocessableEntity).JSON(validationError)
		}
		if continueOperation := MiddlewarePkg0.MiddlewareBeforeOperation(ctx); continueOperation == false {
			return nil
		}
		value, opError := controller.WithTwoSecuritySameMethod(*headerParamRawPtr)
		for key, value := range controller.GetHeaders() {
			ctx.Set(key, value)
		}
		ctx.Set("x-inject", "true")
		statusCode := getStatusCode(&controller, true, opError)
		if opError == nil {
			if continueOperation := MiddlewarePkg1.MiddlewareAfterOperationSuccess(ctx); continueOperation == false {
				return nil
			}
		}
		if opError != nil {
			if continueOperation := MiddlewarePkg2.MiddlewareOnError(ctx, opError); continueOperation == false {
				return nil
			}
			if continueOperation := MiddlewarePkg3.MiddlewareOnError2(ctx, opError); continueOperation == false {
				return nil
			}
			stdError := external.Rfc7807Error{
				Type:       http.StatusText(statusCode),
				Detail:     "Encountered an error during operation 'WithTwoSecuritySameMethod'",
				Status:     statusCode,
				Instance:   "/gleece/controller/error/WithTwoSecuritySameMethod",
				Extensions: map[string]string{"error": opError.Error()},
			}
			return ctx.Status(statusCode).JSON(stdError)
		}
		return ctx.Status(statusCode).JSON(value)
	})
	engine.Get(toFiberUrl("/e2e/default-error"), func(ctx *fiber.Ctx) error {
		authErr := authorize(
			ctx,
			[]SecurityCheckList{
				{
					Relation: SecurityListRelationAnd,
					Checks: []external.SecurityCheck{
						{
							SchemaName: "securitySchemaName2",
							Scopes: []string{
								"config",
							},
						},
					},
				},
			},
		)
		if authErr != nil {
			return handleAuthorizationError(ctx, authErr, "DefaultError")
		}
		controller := E2EControllerImport.E2EController{}
		controller.InitController(ctx)
		if continueOperation := MiddlewarePkg0.MiddlewareBeforeOperation(ctx); continueOperation == false {
			return nil
		}
		opError := controller.DefaultError()
		for key, value := range controller.GetHeaders() {
			ctx.Set(key, value)
		}
		ctx.Set("x-inject", "true")
		statusCode := getStatusCode(&controller, false, opError)
		if opError == nil {
			if continueOperation := MiddlewarePkg1.MiddlewareAfterOperationSuccess(ctx); continueOperation == false {
				return nil
			}
		}
		if opError != nil {
			if continueOperation := MiddlewarePkg2.MiddlewareOnError(ctx, opError); continueOperation == false {
				return nil
			}
			if continueOperation := MiddlewarePkg3.MiddlewareOnError2(ctx, opError); continueOperation == false {
				return nil
			}
			stdError := external.Rfc7807Error{
				Type:       http.StatusText(statusCode),
				Detail:     "Encountered an error during operation 'DefaultError'",
				Status:     statusCode,
				Instance:   "/gleece/controller/error/DefaultError",
				Extensions: map[string]string{"error": opError.Error()},
			}
			return ctx.Status(statusCode).JSON(stdError)
		}
		ctx.Set("Content-Type", "application/json")
		ctx.Status(statusCode)
		return nil
	})
	engine.Get(toFiberUrl("/e2e/default-error-with-payload"), func(ctx *fiber.Ctx) error {
		authErr := authorize(
			ctx,
			[]SecurityCheckList{
				{
					Relation: SecurityListRelationAnd,
					Checks: []external.SecurityCheck{
						{
							SchemaName: "securitySchemaName2",
							Scopes: []string{
								"config",
							},
						},
					},
				},
			},
		)
		if authErr != nil {
			return handleAuthorizationError(ctx, authErr, "DefaultErrorWithPayload")
		}
		controller := E2EControllerImport.E2EController{}
		controller.InitController(ctx)
		if continueOperation := MiddlewarePkg0.MiddlewareBeforeOperation(ctx); continueOperation == false {
			return nil
		}
		value, opError := controller.DefaultErrorWithPayload()
		for key, value := range controller.GetHeaders() {
			ctx.Set(key, value)
		}
		ctx.Set("x-inject", "true")
		statusCode := getStatusCode(&controller, true, opError)
		if opError == nil {
			if continueOperation := MiddlewarePkg1.MiddlewareAfterOperationSuccess(ctx); continueOperation == false {
				return nil
			}
		}
		if opError != nil {
			if continueOperation := MiddlewarePkg2.MiddlewareOnError(ctx, opError); continueOperation == false {
				return nil
			}
			if continueOperation := MiddlewarePkg3.MiddlewareOnError2(ctx, opError); continueOperation == false {
				return nil
			}
			stdError := external.Rfc7807Error{
				Type:       http.StatusText(statusCode),
				Detail:     "Encountered an error during operation 'DefaultErrorWithPayload'",
				Status:     statusCode,
				Instance:   "/gleece/controller/error/DefaultErrorWithPayload",
				Extensions: map[string]string{"error": opError.Error()},
			}
			return ctx.Status(statusCode).JSON(stdError)
		}
		return ctx.Status(statusCode).JSON(value)
	})
	engine.Get(toFiberUrl("/e2e/custom-error"), func(ctx *fiber.Ctx) error {
		authErr := authorize(
			ctx,
			[]SecurityCheckList{
				{
					Relation: SecurityListRelationAnd,
					Checks: []external.SecurityCheck{
						{
							SchemaName: "securitySchemaName2",
							Scopes: []string{
								"config",
							},
						},
					},
				},
			},
		)
		if authErr != nil {
			return handleAuthorizationError(ctx, authErr, "CustomError")
		}
		controller := E2EControllerImport.E2EController{}
		controller.InitController(ctx)
		if continueOperation := MiddlewarePkg0.MiddlewareBeforeOperation(ctx); continueOperation == false {
			return nil
		}
		opError := controller.CustomError()
		for key, value := range controller.GetHeaders() {
			ctx.Set(key, value)
		}
		ctx.Set("x-inject", "true")
		statusCode := getStatusCode(&controller, false, opError)
		emptyErr := Response62CustomError.CustomError{}
		if opError == emptyErr {
			if continueOperation := MiddlewarePkg1.MiddlewareAfterOperationSuccess(ctx); continueOperation == false {
				return nil
			}
		}
		if opError != emptyErr {
			if continueOperation := MiddlewarePkg2.MiddlewareOnError(ctx, opError); continueOperation == false {
				return nil
			}
			if continueOperation := MiddlewarePkg3.MiddlewareOnError2(ctx, opError); continueOperation == false {
				return nil
			}
			return ctx.Status(statusCode).JSON(opError)
		}
		ctx.Set("Content-Type", "application/json")
		ctx.Status(statusCode)
		return nil
	})
	engine.Get(toFiberUrl("/e2e/custom-error-ptr"), func(ctx *fiber.Ctx) error {
		authErr := authorize(
			ctx,
			[]SecurityCheckList{
				{
					Relation: SecurityListRelationAnd,
					Checks: []external.SecurityCheck{
						{
							SchemaName: "securitySchemaName2",
							Scopes: []string{
								"config",
							},
						},
					},
				},
			},
		)
		if authErr != nil {
			return handleAuthorizationError(ctx, authErr, "CustomPtrError")
		}
		controller := E2EControllerImport.E2EController{}
		controller.InitController(ctx)
		if continueOperation := MiddlewarePkg0.MiddlewareBeforeOperation(ctx); continueOperation == false {
			return nil
		}
		opError := controller.CustomPtrError()
		for key, value := range controller.GetHeaders() {
			ctx.Set(key, value)
		}
		ctx.Set("x-inject", "true")
		statusCode := getStatusCode(&controller, false, opError)
		if opError == nil {
			if continueOperation := MiddlewarePkg1.MiddlewareAfterOperationSuccess(ctx); continueOperation == false {
				return nil
			}
		}
		if opError != nil {
			if continueOperation := MiddlewarePkg2.MiddlewareOnError(ctx, opError); continueOperation == false {
				return nil
			}
			if continueOperation := MiddlewarePkg3.MiddlewareOnError2(ctx, opError); continueOperation == false {
				return nil
			}
			return ctx.Status(statusCode).JSON(opError)
		}
		ctx.Set("Content-Type", "application/json")
		ctx.Status(statusCode)
		return nil
	})
	engine.Get(toFiberUrl("/e2e/503-error-code"), func(ctx *fiber.Ctx) error {
		authErr := authorize(
			ctx,
			[]SecurityCheckList{
				{
					Relation: SecurityListRelationAnd,
					Checks: []external.SecurityCheck{
						{
							SchemaName: "securitySchemaName2",
							Scopes: []string{
								"config",
							},
						},
					},
				},
			},
		)
		if authErr != nil {
			return handleAuthorizationError(ctx, authErr, "Error503")
		}
		controller := E2EControllerImport.E2EController{}
		controller.InitController(ctx)
		if continueOperation := MiddlewarePkg0.MiddlewareBeforeOperation(ctx); continueOperation == false {
			return nil
		}
		opError := controller.Error503()
		for key, value := range controller.GetHeaders() {
			ctx.Set(key, value)
		}
		ctx.Set("x-inject", "true")
		statusCode := getStatusCode(&controller, false, opError)
		if opError == nil {
			if continueOperation := MiddlewarePkg1.MiddlewareAfterOperationSuccess(ctx); continueOperation == false {
				return nil
			}
		}
		if opError != nil {
			if continueOperation := MiddlewarePkg2.MiddlewareOnError(ctx, opError); continueOperation == false {
				return nil
			}
			if continueOperation := MiddlewarePkg3.MiddlewareOnError2(ctx, opError); continueOperation == false {
				return nil
			}
			stdError := external.Rfc7807Error{
				Type:       http.StatusText(statusCode),
				Detail:     "Encountered an error during operation 'Error503'",
				Status:     statusCode,
				Instance:   "/gleece/controller/error/Error503",
				Extensions: map[string]string{"error": opError.Error()},
			}
			return ctx.Status(statusCode).JSON(stdError)
		}
		ctx.Set("Content-Type", "application/json")
		ctx.Status(statusCode)
		return nil
	})
	engine.Get(toFiberUrl("/e2e/custom-error-503"), func(ctx *fiber.Ctx) error {
		authErr := authorize(
			ctx,
			[]SecurityCheckList{
				{
					Relation: SecurityListRelationAnd,
					Checks: []external.SecurityCheck{
						{
							SchemaName: "securitySchemaName2",
							Scopes: []string{
								"config",
							},
						},
					},
				},
			},
		)
		if authErr != nil {
			return handleAuthorizationError(ctx, authErr, "CustomError503")
		}
		controller := E2EControllerImport.E2EController{}
		controller.InitController(ctx)
		if continueOperation := MiddlewarePkg0.MiddlewareBeforeOperation(ctx); continueOperation == false {
			return nil
		}
		opError := controller.CustomError503()
		for key, value := range controller.GetHeaders() {
			ctx.Set(key, value)
		}
		ctx.Set("x-inject", "true")
		statusCode := getStatusCode(&controller, false, opError)
		emptyErr := Response65CustomError.CustomError{}
		if opError == emptyErr {
			if continueOperation := MiddlewarePkg1.MiddlewareAfterOperationSuccess(ctx); continueOperation == false {
				return nil
			}
		}
		if opError != emptyErr {
			if continueOperation := MiddlewarePkg2.MiddlewareOnError(ctx, opError); continueOperation == false {
				return nil
			}
			if continueOperation := MiddlewarePkg3.MiddlewareOnError2(ctx, opError); continueOperation == false {
				return nil
			}
			return ctx.Status(statusCode).JSON(opError)
		}
		ctx.Set("Content-Type", "application/json")
		ctx.Status(statusCode)
		return nil
	})
	engine.Get(toFiberUrl("/e2e/context-access"), func(ctx *fiber.Ctx) error {
		authErr := authorize(
			ctx,
			[]SecurityCheckList{
				{
					Relation: SecurityListRelationAnd,
					Checks: []external.SecurityCheck{
						{
							SchemaName: "securitySchemaName2",
							Scopes: []string{
								"config",
							},
						},
					},
				},
			},
		)
		if authErr != nil {
			return handleAuthorizationError(ctx, authErr, "ContextAccess")
		}
		controller := E2EControllerImport.E2EController{}
		controller.InitController(ctx)
		if continueOperation := MiddlewarePkg0.MiddlewareBeforeOperation(ctx); continueOperation == false {
			return nil
		}
		opError := controller.ContextAccess()
		for key, value := range controller.GetHeaders() {
			ctx.Set(key, value)
		}
		ctx.Set("x-inject", "true")
		statusCode := getStatusCode(&controller, false, opError)
		if opError == nil {
			if continueOperation := MiddlewarePkg1.MiddlewareAfterOperationSuccess(ctx); continueOperation == false {
				return nil
			}
		}
		if opError != nil {
			if continueOperation := MiddlewarePkg2.MiddlewareOnError(ctx, opError); continueOperation == false {
				return nil
			}
			if continueOperation := MiddlewarePkg3.MiddlewareOnError2(ctx, opError); continueOperation == false {
				return nil
			}
			stdError := external.Rfc7807Error{
				Type:       http.StatusText(statusCode),
				Detail:     "Encountered an error during operation 'ContextAccess'",
				Status:     statusCode,
				Instance:   "/gleece/controller/error/ContextAccess",
				Extensions: map[string]string{"error": opError.Error()},
			}
			return ctx.Status(statusCode).JSON(stdError)
		}
		ctx.Set("Content-Type", "application/json")
		ctx.Status(statusCode)
		return nil
	})
	engine.Get(toFiberUrl("/e2e/http-method"), func(ctx *fiber.Ctx) error {
		authErr := authorize(
			ctx,
			[]SecurityCheckList{
				{
					Relation: SecurityListRelationAnd,
					Checks: []external.SecurityCheck{
						{
							SchemaName: "securitySchemaName2",
							Scopes: []string{
								"config",
							},
						},
					},
				},
			},
		)
		if authErr != nil {
			return handleAuthorizationError(ctx, authErr, "Get")
		}
		controller := E2EControllerImport.E2EController{}
		controller.InitController(ctx)
		if continueOperation := MiddlewarePkg0.MiddlewareBeforeOperation(ctx); continueOperation == false {
			return nil
		}
		opError := controller.Get()
		for key, value := range controller.GetHeaders() {
			ctx.Set(key, value)
		}
		ctx.Set("x-inject", "true")
		statusCode := getStatusCode(&controller, false, opError)
		if opError == nil {
			if continueOperation := MiddlewarePkg1.MiddlewareAfterOperationSuccess(ctx); continueOperation == false {
				return nil
			}
		}
		if opError != nil {
			if continueOperation := MiddlewarePkg2.MiddlewareOnError(ctx, opError); continueOperation == false {
				return nil
			}
			if continueOperation := MiddlewarePkg3.MiddlewareOnError2(ctx, opError); continueOperation == false {
				return nil
			}
			stdError := external.Rfc7807Error{
				Type:       http.StatusText(statusCode),
				Detail:     "Encountered an error during operation 'Get'",
				Status:     statusCode,
				Instance:   "/gleece/controller/error/Get",
				Extensions: map[string]string{"error": opError.Error()},
			}
			return ctx.Status(statusCode).JSON(stdError)
		}
		ctx.Set("Content-Type", "application/json")
		ctx.Status(statusCode)
		return nil
	})
	engine.Post(toFiberUrl("/e2e/http-method"), func(ctx *fiber.Ctx) error {
		authErr := authorize(
			ctx,
			[]SecurityCheckList{
				{
					Relation: SecurityListRelationAnd,
					Checks: []external.SecurityCheck{
						{
							SchemaName: "securitySchemaName2",
							Scopes: []string{
								"config",
							},
						},
					},
				},
			},
		)
		if authErr != nil {
			return handleAuthorizationError(ctx, authErr, "Post")
		}
		controller := E2EControllerImport.E2EController{}
		controller.InitController(ctx)
		if continueOperation := MiddlewarePkg0.MiddlewareBeforeOperation(ctx); continueOperation == false {
			return nil
		}
		opError := controller.Post()
		for key, value := range controller.GetHeaders() {
			ctx.Set(key, value)
		}
		ctx.Set("x-inject", "true")
		statusCode := getStatusCode(&controller, false, opError)
		if opError == nil {
			if continueOperation := MiddlewarePkg1.MiddlewareAfterOperationSuccess(ctx); continueOperation == false {
				return nil
			}
		}
		if opError != nil {
			if continueOperation := MiddlewarePkg2.MiddlewareOnError(ctx, opError); continueOperation == false {
				return nil
			}
			if continueOperation := MiddlewarePkg3.MiddlewareOnError2(ctx, opError); continueOperation == false {
				return nil
			}
			stdError := external.Rfc7807Error{
				Type:       http.StatusText(statusCode),
				Detail:     "Encountered an error during operation 'Post'",
				Status:     statusCode,
				Instance:   "/gleece/controller/error/Post",
				Extensions: map[string]string{"error": opError.Error()},
			}
			return ctx.Status(statusCode).JSON(stdError)
		}
		ctx.Set("Content-Type", "application/json")
		ctx.Status(statusCode)
		return nil
	})
	engine.Put(toFiberUrl("/e2e/http-method"), func(ctx *fiber.Ctx) error {
		authErr := authorize(
			ctx,
			[]SecurityCheckList{
				{
					Relation: SecurityListRelationAnd,
					Checks: []external.SecurityCheck{
						{
							SchemaName: "securitySchemaName2",
							Scopes: []string{
								"config",
							},
						},
					},
				},
			},
		)
		if authErr != nil {
			return handleAuthorizationError(ctx, authErr, "Put")
		}
		controller := E2EControllerImport.E2EController{}
		controller.InitController(ctx)
		if continueOperation := MiddlewarePkg0.MiddlewareBeforeOperation(ctx); continueOperation == false {
			return nil
		}
		opError := controller.Put()
		for key, value := range controller.GetHeaders() {
			ctx.Set(key, value)
		}
		ctx.Set("x-inject", "true")
		statusCode := getStatusCode(&controller, false, opError)
		if opError == nil {
			if continueOperation := MiddlewarePkg1.MiddlewareAfterOperationSuccess(ctx); continueOperation == false {
				return nil
			}
		}
		if opError != nil {
			if continueOperation := MiddlewarePkg2.MiddlewareOnError(ctx, opError); continueOperation == false {
				return nil
			}
			if continueOperation := MiddlewarePkg3.MiddlewareOnError2(ctx, opError); continueOperation == false {
				return nil
			}
			stdError := external.Rfc7807Error{
				Type:       http.StatusText(statusCode),
				Detail:     "Encountered an error during operation 'Put'",
				Status:     statusCode,
				Instance:   "/gleece/controller/error/Put",
				Extensions: map[string]string{"error": opError.Error()},
			}
			return ctx.Status(statusCode).JSON(stdError)
		}
		ctx.Set("Content-Type", "application/json")
		ctx.Status(statusCode)
		return nil
	})
	engine.Delete(toFiberUrl("/e2e/http-method"), func(ctx *fiber.Ctx) error {
		authErr := authorize(
			ctx,
			[]SecurityCheckList{
				{
					Relation: SecurityListRelationAnd,
					Checks: []external.SecurityCheck{
						{
							SchemaName: "securitySchemaName2",
							Scopes: []string{
								"config",
							},
						},
					},
				},
			},
		)
		if authErr != nil {
			return handleAuthorizationError(ctx, authErr, "Delete")
		}
		controller := E2EControllerImport.E2EController{}
		controller.InitController(ctx)
		if continueOperation := MiddlewarePkg0.MiddlewareBeforeOperation(ctx); continueOperation == false {
			return nil
		}
		opError := controller.Delete()
		for key, value := range controller.GetHeaders() {
			ctx.Set(key, value)
		}
		ctx.Set("x-inject", "true")
		statusCode := getStatusCode(&controller, false, opError)
		if opError == nil {
			if continueOperation := MiddlewarePkg1.MiddlewareAfterOperationSuccess(ctx); continueOperation == false {
				return nil
			}
		}
		if opError != nil {
			if continueOperation := MiddlewarePkg2.MiddlewareOnError(ctx, opError); continueOperation == false {
				return nil
			}
			if continueOperation := MiddlewarePkg3.MiddlewareOnError2(ctx, opError); continueOperation == false {
				return nil
			}
			stdError := external.Rfc7807Error{
				Type:       http.StatusText(statusCode),
				Detail:     "Encountered an error during operation 'Delete'",
				Status:     statusCode,
				Instance:   "/gleece/controller/error/Delete",
				Extensions: map[string]string{"error": opError.Error()},
			}
			return ctx.Status(statusCode).JSON(stdError)
		}
		ctx.Set("Content-Type", "application/json")
		ctx.Status(statusCode)
		return nil
	})
	engine.Patch(toFiberUrl("/e2e/http-method"), func(ctx *fiber.Ctx) error {
		authErr := authorize(
			ctx,
			[]SecurityCheckList{
				{
					Relation: SecurityListRelationAnd,
					Checks: []external.SecurityCheck{
						{
							SchemaName: "securitySchemaName2",
							Scopes: []string{
								"config",
							},
						},
					},
				},
			},
		)
		if authErr != nil {
			return handleAuthorizationError(ctx, authErr, "Patch")
		}
		controller := E2EControllerImport.E2EController{}
		controller.InitController(ctx)
		if continueOperation := MiddlewarePkg0.MiddlewareBeforeOperation(ctx); continueOperation == false {
			return nil
		}
		opError := controller.Patch()
		for key, value := range controller.GetHeaders() {
			ctx.Set(key, value)
		}
		ctx.Set("x-inject", "true")
		statusCode := getStatusCode(&controller, false, opError)
		if opError == nil {
			if continueOperation := MiddlewarePkg1.MiddlewareAfterOperationSuccess(ctx); continueOperation == false {
				return nil
			}
		}
		if opError != nil {
			if continueOperation := MiddlewarePkg2.MiddlewareOnError(ctx, opError); continueOperation == false {
				return nil
			}
			if continueOperation := MiddlewarePkg3.MiddlewareOnError2(ctx, opError); continueOperation == false {
				return nil
			}
			stdError := external.Rfc7807Error{
				Type:       http.StatusText(statusCode),
				Detail:     "Encountered an error during operation 'Patch'",
				Status:     statusCode,
				Instance:   "/gleece/controller/error/Patch",
				Extensions: map[string]string{"error": opError.Error()},
			}
			return ctx.Status(statusCode).JSON(stdError)
		}
		ctx.Set("Content-Type", "application/json")
		ctx.Status(statusCode)
		return nil
	})
	// E2EClassSecController
	engine.Get(toFiberUrl("/e2e/with-default-class-security"), func(ctx *fiber.Ctx) error {
		authErr := authorize(
			ctx,
			[]SecurityCheckList{
				{
					Relation: SecurityListRelationAnd,
					Checks: []external.SecurityCheck{
						{
							SchemaName: "securitySchemaName",
							Scopes: []string{
								"class",
							},
						},
					},
				},
			},
		)
		if authErr != nil {
			return handleAuthorizationError(ctx, authErr, "WithDefaultClassSecurity")
		}
		controller := E2EClassSecControllerImport.E2EClassSecController{}
		controller.InitController(ctx)
		var headerParamRawPtr *string = nil
		headerParamRaw := ctx.Get("x-test-scopes")
		isheaderParamExists := len(ctx.Request().Header.Peek("x-test-scopes")) > 0
		if isheaderParamExists {
			headerParam := headerParamRaw
			headerParamRawPtr = &headerParam
		}
		if validatorErr := validatorInstance.Var(headerParamRawPtr, "required"); validatorErr != nil {
			fieldName := "headerParam"
			validationError := wrapValidatorError(validatorErr, "WithDefaultClassSecurity", fieldName)
			return ctx.Status(http.StatusUnprocessableEntity).JSON(validationError)
		}
		if continueOperation := MiddlewarePkg0.MiddlewareBeforeOperation(ctx); continueOperation == false {
			return nil
		}
		value, opError := controller.WithDefaultClassSecurity(*headerParamRawPtr)
		for key, value := range controller.GetHeaders() {
			ctx.Set(key, value)
		}
		ctx.Set("x-inject", "true")
		statusCode := getStatusCode(&controller, true, opError)
		if opError == nil {
			if continueOperation := MiddlewarePkg1.MiddlewareAfterOperationSuccess(ctx); continueOperation == false {
				return nil
			}
		}
		if opError != nil {
			if continueOperation := MiddlewarePkg2.MiddlewareOnError(ctx, opError); continueOperation == false {
				return nil
			}
			if continueOperation := MiddlewarePkg3.MiddlewareOnError2(ctx, opError); continueOperation == false {
				return nil
			}
			stdError := external.Rfc7807Error{
				Type:       http.StatusText(statusCode),
				Detail:     "Encountered an error during operation 'WithDefaultClassSecurity'",
				Status:     statusCode,
				Instance:   "/gleece/controller/error/WithDefaultClassSecurity",
				Extensions: map[string]string{"error": opError.Error()},
			}
			return ctx.Status(statusCode).JSON(stdError)
		}
		return ctx.Status(statusCode).JSON(value)
	})
	engine.Get(toFiberUrl("/e2e/with-default-override-class-security"), func(ctx *fiber.Ctx) error {
		authErr := authorize(
			ctx,
			[]SecurityCheckList{
				{
					Relation: SecurityListRelationAnd,
					Checks: []external.SecurityCheck{
						{
							SchemaName: "securitySchemaName",
							Scopes: []string{
								"method",
							},
						},
					},
				},
			},
		)
		if authErr != nil {
			return handleAuthorizationError(ctx, authErr, "WithOverrideClassSecurity")
		}
		controller := E2EClassSecControllerImport.E2EClassSecController{}
		controller.InitController(ctx)
		var headerParamRawPtr *string = nil
		headerParamRaw := ctx.Get("x-test-scopes")
		isheaderParamExists := len(ctx.Request().Header.Peek("x-test-scopes")) > 0
		if isheaderParamExists {
			headerParam := headerParamRaw
			headerParamRawPtr = &headerParam
		}
		if validatorErr := validatorInstance.Var(headerParamRawPtr, "required"); validatorErr != nil {
			fieldName := "headerParam"
			validationError := wrapValidatorError(validatorErr, "WithOverrideClassSecurity", fieldName)
			return ctx.Status(http.StatusUnprocessableEntity).JSON(validationError)
		}
		if continueOperation := MiddlewarePkg0.MiddlewareBeforeOperation(ctx); continueOperation == false {
			return nil
		}
		value, opError := controller.WithOverrideClassSecurity(*headerParamRawPtr)
		for key, value := range controller.GetHeaders() {
			ctx.Set(key, value)
		}
		ctx.Set("x-inject", "true")
		statusCode := getStatusCode(&controller, true, opError)
		if opError == nil {
			if continueOperation := MiddlewarePkg1.MiddlewareAfterOperationSuccess(ctx); continueOperation == false {
				return nil
			}
		}
		if opError != nil {
			if continueOperation := MiddlewarePkg2.MiddlewareOnError(ctx, opError); continueOperation == false {
				return nil
			}
			if continueOperation := MiddlewarePkg3.MiddlewareOnError2(ctx, opError); continueOperation == false {
				return nil
			}
			stdError := external.Rfc7807Error{
				Type:       http.StatusText(statusCode),
				Detail:     "Encountered an error during operation 'WithOverrideClassSecurity'",
				Status:     statusCode,
				Instance:   "/gleece/controller/error/WithOverrideClassSecurity",
				Extensions: map[string]string{"error": opError.Error()},
			}
			return ctx.Status(statusCode).JSON(stdError)
		}
		return ctx.Status(statusCode).JSON(value)
	})
}
