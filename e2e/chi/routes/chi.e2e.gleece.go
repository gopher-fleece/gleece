/*
--
This file is automatically generated. Any manual changes to this file may be overwritten.
It includes routes and handlers by the Gleece API Routes Generator.
--
Authors: Haim Kastner & Yuval Pomerchik
Generated by: Gleece Routes Generator
Generated Date: 2025-03-11
Target Engine: Chi v5 (https://github.com/go-chi/chi)
--
Usage:
Refer to the Gleece documentation for details on how to use the generated routes and handlers.
--
Repository: https://github.com/gopher-fleece/gleece
--
*/
package routes
import (
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"reflect"
	"regexp"
	"strconv"
	"strings"
	"github.com/go-chi/chi/v5"
	"github.com/go-playground/validator/v10"
	RequestAuth "github.com/gopher-fleece/gleece/e2e/chi/auth"
	"github.com/gopher-fleece/runtime"
	E2EControllerImport "github.com/gopher-fleece/gleece/e2e/assets"
	Param33theBody "github.com/gopher-fleece/gleece/e2e/assets"
	Param38theBody "github.com/gopher-fleece/gleece/e2e/assets"
	Param41theBody "github.com/gopher-fleece/gleece/e2e/assets"
	Response62CustomError "github.com/gopher-fleece/gleece/e2e/assets"
	Response65CustomError "github.com/gopher-fleece/gleece/e2e/assets"
	E2EClassSecControllerImport "github.com/gopher-fleece/gleece/e2e/assets"
	// ImportsExtension - test
)
var validatorInstance = validator.New()
var urlParamRegex *regexp.Regexp
type SecurityListRelation string
const (
	SecurityListRelationAnd SecurityListRelation = "AND"
)
type SecurityCheckList struct {
	Checks   []runtime.SecurityCheck
	Relation SecurityListRelation
}
// TypeDeclarationsExtension - test
func extractValidationErrorMessage(err error, fieldName *string) string {
	if err == nil {
		return ""
	}
	validationErrors, ok := err.(validator.ValidationErrors)
	if !ok {
		return err.Error()
	}
	var errStr string
	for _, validationErr := range validationErrors {
		fName := validationErr.Field()
		if fieldName != nil {
			fName = *fieldName
		}
		errStr += fmt.Sprintf("Field '%s' failed validation with tag '%s'. ", fName, validationErr.Tag())
	}
	return errStr
}
func getStatusCode(controller runtime.Controller, hasReturnValue bool, err error) int {
	if controller.GetStatus() != nil {
		return int(*controller.GetStatus())
	}
	if err != nil {
		return http.StatusInternalServerError
	}
	if hasReturnValue {
		return http.StatusOK
	}
	return http.StatusNoContent
}
func bindAndValidateBody[TOutput any](ctx *http.Request, contentType string, validation string, output **TOutput) error {
	var err error
	bodyBytes, err := io.ReadAll(ctx.Body)
	if err != nil || len(bodyBytes) == 0 {
		if strings.Contains(validation, "required") {
			return fmt.Errorf("body is required but was not provided")
		}
		return nil
	}
	var deserializedOutput TOutput
	switch contentType {
	case "application/json":
		err = json.Unmarshal(bodyBytes, &deserializedOutput)
	default:
		return fmt.Errorf("content-type %s is not currently supported by the validation subsystem", contentType)
	}
	if err != nil {
		return err
	}
	if err = validatorInstance.Struct(&deserializedOutput); err != nil {
		return err
	}
	*output = &deserializedOutput
	return nil
}
func toChiUrl(url string) string {
	return url
}
func authorize(ctx *http.Request, checksLists []SecurityCheckList) *runtime.SecurityError {
	var lastError *runtime.SecurityError
	for _, list := range checksLists {
		if list.Relation != SecurityListRelationAnd {
			panic(
				"Encountered a security list relation of type '%s' - this is unexpected and indicates a bug in Gleece itself." +
					"Please open an issue at https://github.com/gopher-fleece/gleece/issues",
			)
		}
		// Iterate over each security list
		encounteredErrorInList := false
		for _, check := range list.Checks {
			secErr := RequestAuth.GleeceRequestAuthorization(ctx, check)
			if secErr != nil {
				lastError = secErr
				encounteredErrorInList = true
				break
			}
		}
		// If no error was encountered, validation is considered successful
		// otherwise, we continue over to the next iteration whilst keeping track of the last error
		if !encounteredErrorInList {
			return nil
		}
	}
	// If we got here it means authentication has failed
	return lastError
}
func handleAuthorizationError(w http.ResponseWriter, authErr *runtime.SecurityError, operationId string) {
	statusCode := int(authErr.StatusCode)
	if authErr.CustomError != nil {
		// For now, we support JSON only
		w.WriteHeader(statusCode)
		json.NewEncoder(w).Encode(authErr.CustomError.Payload)
		return
	}
	stdError := runtime.Rfc7807Error{
		Type:     http.StatusText(statusCode),
		Detail:   authErr.Message,
		Status:   statusCode,
		Instance: "/gleece/authorization/error/" + operationId,
	}
	w.WriteHeader(statusCode)
	json.NewEncoder(w).Encode(stdError)
}
func wrapValidatorError(validatorErr error, operationId string, fieldName string) runtime.Rfc7807Error {
	return runtime.Rfc7807Error{
		Type: http.StatusText(http.StatusUnprocessableEntity),
		Detail: fmt.Sprintf(
			"A request was made to operation '%s' but parameter '%s' did not pass validation - %s",
			operationId,
			fieldName,
			extractValidationErrorMessage(validatorErr, &fieldName),
		),
		Status:   http.StatusUnprocessableEntity,
		Instance: fmt.Sprintf("/gleece/validation/error/%s", operationId),
	}
}
// FunctionDeclarationsExtension - test
type MiddlewareFunc func(w http.ResponseWriter, r *http.Request) bool
type ErrorMiddlewareFunc func(w http.ResponseWriter, r *http.Request, err error) bool
var beforeOperationMiddlewares []MiddlewareFunc
var afterOperationSuccessMiddlewares []MiddlewareFunc
var onErrorMiddlewares []ErrorMiddlewareFunc
var onInputValidationMiddlewares []ErrorMiddlewareFunc
var onOutputValidationMiddlewares []ErrorMiddlewareFunc
func RegisterMiddleware(executionType runtime.MiddlewareExecutionType, middlewareFunc MiddlewareFunc) {
	switch executionType {
	case runtime.BeforeOperation:
		beforeOperationMiddlewares = append(beforeOperationMiddlewares, middlewareFunc)
	case runtime.AfterOperationSuccess:
		afterOperationSuccessMiddlewares = append(afterOperationSuccessMiddlewares, middlewareFunc)
	}
}
func RegisterErrorMiddleware(executionType runtime.ErrorMiddlewareExecutionType, errorMiddlewareFunc ErrorMiddlewareFunc) {
	switch executionType {
	case runtime.OnInputValidationError:
		onInputValidationMiddlewares = append(onInputValidationMiddlewares, errorMiddlewareFunc)
	case runtime.OnOutputValidationError:
		onOutputValidationMiddlewares = append(onOutputValidationMiddlewares, errorMiddlewareFunc)
	case runtime.OnOperationError:
		onErrorMiddlewares = append(onErrorMiddlewares, errorMiddlewareFunc)
	}
}
func RegisterCustomValidator(validateTagName string, validateFunc runtime.ValidationFunc) {
	validatorInstance.RegisterValidation(validateTagName, func(fl validator.FieldLevel) bool {
		return validateFunc(fl)
	})
}
func RegisterRoutes(engine *chi.Mux) {
	urlParamRegex = regexp.MustCompile(`\{([\w\d-_]+)\}`)
	// RegisterRoutesExtension - test
	// E2EController
	engine.Get(toChiUrl("/e2e/simple-get"), func(w http.ResponseWriter, ctx *http.Request) {
		w.Header().Set("x-RouteStartRoutesExtension", "SimpleGet")
		authErr := authorize(
			ctx,
			[]SecurityCheckList{
				{
					Relation: SecurityListRelationAnd,
					Checks: []runtime.SecurityCheck{
						{
							SchemaName: "securitySchemaName2",
							Scopes: []string{
								"config",
							},
						},
					},
				},
			},
		)
		if authErr != nil {
			handleAuthorizationError(w, authErr, "SimpleGet")
			return
		}
		controller := E2EControllerImport.E2EController{}
		controller.InitController(ctx)
		// Middlewares beforeOperationMiddlewares section
		for _, middleware := range beforeOperationMiddlewares {
			if continueOperation := middleware(w, ctx); !continueOperation {
				return
			}
		}
		// End middlewares beforeOperationMiddlewares section
		w.Header().Set("x-BeforeOperationRoutesExtension", "SimpleGet")
		value, opError := controller.SimpleGet()
		for key, value := range controller.GetHeaders() {
			w.Header().Set(key, value)
		}
		w.Header().Set("x-inject", "true")
		w.Header().Set("x-ResponseHeadersExtension", "SimpleGet")
		statusCode := getStatusCode(&controller, true, opError)
		if opError != nil {
			// Middlewares onErrorMiddlewares section
			for _, middleware := range onErrorMiddlewares {
				if continueOperation := middleware(w, ctx, opError); !continueOperation {
					return
				}
			}
			// End middlewares onErrorMiddlewares section
			stdError := runtime.Rfc7807Error{
				Type:       http.StatusText(statusCode),
				Detail:     "Encountered an error during operation 'SimpleGet'",
				Status:     statusCode,
				Instance:   "/gleece/controller/error/SimpleGet",
				Extensions: map[string]string{"error": opError.Error()},
			}
			w.Header().Set("x-JsonErrorResponseExtension", "SimpleGet")
			w.WriteHeader(statusCode)
			json.NewEncoder(w).Encode(stdError)
			return
		}
		w.Header().Set("x-JsonResponseExtension", "SimpleGet")
		// Middlewares afterOperationSuccessMiddlewares section
		for _, middleware := range afterOperationSuccessMiddlewares {
			if continueOperation := middleware(w, ctx); !continueOperation {
				return
			}
		}
		// End middlewares afterOperationSuccessMiddlewares section
		w.Header().Set("x-AfterOperationRoutesExtension", "SimpleGet")
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(statusCode)
		json.NewEncoder(w).Encode(value)
		w.Header().Set("x-RouteEndRoutesExtension", "SimpleGet")
	})
	engine.Get(toChiUrl("/e2e/simple-get-empty-string"), func(w http.ResponseWriter, ctx *http.Request) {
		w.Header().Set("x-RouteStartRoutesExtension", "SimpleGetEmptyString")
		authErr := authorize(
			ctx,
			[]SecurityCheckList{
				{
					Relation: SecurityListRelationAnd,
					Checks: []runtime.SecurityCheck{
						{
							SchemaName: "securitySchemaName2",
							Scopes: []string{
								"config",
							},
						},
					},
				},
			},
		)
		if authErr != nil {
			handleAuthorizationError(w, authErr, "SimpleGetEmptyString")
			return
		}
		controller := E2EControllerImport.E2EController{}
		controller.InitController(ctx)
		// Middlewares beforeOperationMiddlewares section
		for _, middleware := range beforeOperationMiddlewares {
			if continueOperation := middleware(w, ctx); !continueOperation {
				return
			}
		}
		// End middlewares beforeOperationMiddlewares section
		w.Header().Set("x-BeforeOperationRoutesExtension", "SimpleGetEmptyString")
		value, opError := controller.SimpleGetEmptyString()
		for key, value := range controller.GetHeaders() {
			w.Header().Set(key, value)
		}
		w.Header().Set("x-inject", "true")
		w.Header().Set("x-ResponseHeadersExtension", "SimpleGetEmptyString")
		statusCode := getStatusCode(&controller, true, opError)
		if opError != nil {
			// Middlewares onErrorMiddlewares section
			for _, middleware := range onErrorMiddlewares {
				if continueOperation := middleware(w, ctx, opError); !continueOperation {
					return
				}
			}
			// End middlewares onErrorMiddlewares section
			stdError := runtime.Rfc7807Error{
				Type:       http.StatusText(statusCode),
				Detail:     "Encountered an error during operation 'SimpleGetEmptyString'",
				Status:     statusCode,
				Instance:   "/gleece/controller/error/SimpleGetEmptyString",
				Extensions: map[string]string{"error": opError.Error()},
			}
			w.Header().Set("x-JsonErrorResponseExtension", "SimpleGetEmptyString")
			w.WriteHeader(statusCode)
			json.NewEncoder(w).Encode(stdError)
			return
		}
		w.Header().Set("x-JsonResponseExtension", "SimpleGetEmptyString")
		// Middlewares afterOperationSuccessMiddlewares section
		for _, middleware := range afterOperationSuccessMiddlewares {
			if continueOperation := middleware(w, ctx); !continueOperation {
				return
			}
		}
		// End middlewares afterOperationSuccessMiddlewares section
		w.Header().Set("x-AfterOperationRoutesExtension", "SimpleGetEmptyString")
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(statusCode)
		json.NewEncoder(w).Encode(value)
		w.Header().Set("x-RouteEndRoutesExtension", "SimpleGetEmptyString")
	})
	engine.Get(toChiUrl("/e2e/simple-get-ptr-string"), func(w http.ResponseWriter, ctx *http.Request) {
		w.Header().Set("x-RouteStartRoutesExtension", "SimpleGetPtrString")
		authErr := authorize(
			ctx,
			[]SecurityCheckList{
				{
					Relation: SecurityListRelationAnd,
					Checks: []runtime.SecurityCheck{
						{
							SchemaName: "securitySchemaName2",
							Scopes: []string{
								"config",
							},
						},
					},
				},
			},
		)
		if authErr != nil {
			handleAuthorizationError(w, authErr, "SimpleGetPtrString")
			return
		}
		controller := E2EControllerImport.E2EController{}
		controller.InitController(ctx)
		// Middlewares beforeOperationMiddlewares section
		for _, middleware := range beforeOperationMiddlewares {
			if continueOperation := middleware(w, ctx); !continueOperation {
				return
			}
		}
		// End middlewares beforeOperationMiddlewares section
		w.Header().Set("x-BeforeOperationRoutesExtension", "SimpleGetPtrString")
		value, opError := controller.SimpleGetPtrString()
		for key, value := range controller.GetHeaders() {
			w.Header().Set(key, value)
		}
		w.Header().Set("x-inject", "true")
		w.Header().Set("x-ResponseHeadersExtension", "SimpleGetPtrString")
		statusCode := getStatusCode(&controller, true, opError)
		if opError != nil {
			// Middlewares onErrorMiddlewares section
			for _, middleware := range onErrorMiddlewares {
				if continueOperation := middleware(w, ctx, opError); !continueOperation {
					return
				}
			}
			// End middlewares onErrorMiddlewares section
			stdError := runtime.Rfc7807Error{
				Type:       http.StatusText(statusCode),
				Detail:     "Encountered an error during operation 'SimpleGetPtrString'",
				Status:     statusCode,
				Instance:   "/gleece/controller/error/SimpleGetPtrString",
				Extensions: map[string]string{"error": opError.Error()},
			}
			w.Header().Set("x-JsonErrorResponseExtension", "SimpleGetPtrString")
			w.WriteHeader(statusCode)
			json.NewEncoder(w).Encode(stdError)
			return
		}
		w.Header().Set("x-JsonResponseExtension", "SimpleGetPtrString")
		// Middlewares afterOperationSuccessMiddlewares section
		for _, middleware := range afterOperationSuccessMiddlewares {
			if continueOperation := middleware(w, ctx); !continueOperation {
				return
			}
		}
		// End middlewares afterOperationSuccessMiddlewares section
		w.Header().Set("x-AfterOperationRoutesExtension", "SimpleGetPtrString")
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(statusCode)
		json.NewEncoder(w).Encode(value)
		w.Header().Set("x-RouteEndRoutesExtension", "SimpleGetPtrString")
	})
	engine.Get(toChiUrl("/e2e/simple-get-null-string"), func(w http.ResponseWriter, ctx *http.Request) {
		w.Header().Set("x-RouteStartRoutesExtension", "SimpleGetNullString")
		authErr := authorize(
			ctx,
			[]SecurityCheckList{
				{
					Relation: SecurityListRelationAnd,
					Checks: []runtime.SecurityCheck{
						{
							SchemaName: "securitySchemaName2",
							Scopes: []string{
								"config",
							},
						},
					},
				},
			},
		)
		if authErr != nil {
			handleAuthorizationError(w, authErr, "SimpleGetNullString")
			return
		}
		controller := E2EControllerImport.E2EController{}
		controller.InitController(ctx)
		// Middlewares beforeOperationMiddlewares section
		for _, middleware := range beforeOperationMiddlewares {
			if continueOperation := middleware(w, ctx); !continueOperation {
				return
			}
		}
		// End middlewares beforeOperationMiddlewares section
		w.Header().Set("x-BeforeOperationRoutesExtension", "SimpleGetNullString")
		value, opError := controller.SimpleGetNullString()
		for key, value := range controller.GetHeaders() {
			w.Header().Set(key, value)
		}
		w.Header().Set("x-inject", "true")
		w.Header().Set("x-ResponseHeadersExtension", "SimpleGetNullString")
		statusCode := getStatusCode(&controller, true, opError)
		if opError != nil {
			// Middlewares onErrorMiddlewares section
			for _, middleware := range onErrorMiddlewares {
				if continueOperation := middleware(w, ctx, opError); !continueOperation {
					return
				}
			}
			// End middlewares onErrorMiddlewares section
			stdError := runtime.Rfc7807Error{
				Type:       http.StatusText(statusCode),
				Detail:     "Encountered an error during operation 'SimpleGetNullString'",
				Status:     statusCode,
				Instance:   "/gleece/controller/error/SimpleGetNullString",
				Extensions: map[string]string{"error": opError.Error()},
			}
			w.Header().Set("x-JsonErrorResponseExtension", "SimpleGetNullString")
			w.WriteHeader(statusCode)
			json.NewEncoder(w).Encode(stdError)
			return
		}
		w.Header().Set("x-JsonResponseExtension", "SimpleGetNullString")
		// Middlewares afterOperationSuccessMiddlewares section
		for _, middleware := range afterOperationSuccessMiddlewares {
			if continueOperation := middleware(w, ctx); !continueOperation {
				return
			}
		}
		// End middlewares afterOperationSuccessMiddlewares section
		w.Header().Set("x-AfterOperationRoutesExtension", "SimpleGetNullString")
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(statusCode)
		json.NewEncoder(w).Encode(value)
		w.Header().Set("x-RouteEndRoutesExtension", "SimpleGetNullString")
	})
	engine.Get(toChiUrl("/e2e/simple-get-object"), func(w http.ResponseWriter, ctx *http.Request) {
		w.Header().Set("x-RouteStartRoutesExtension", "SimpleGetObject")
		authErr := authorize(
			ctx,
			[]SecurityCheckList{
				{
					Relation: SecurityListRelationAnd,
					Checks: []runtime.SecurityCheck{
						{
							SchemaName: "securitySchemaName2",
							Scopes: []string{
								"config",
							},
						},
					},
				},
			},
		)
		if authErr != nil {
			handleAuthorizationError(w, authErr, "SimpleGetObject")
			return
		}
		controller := E2EControllerImport.E2EController{}
		controller.InitController(ctx)
		// Middlewares beforeOperationMiddlewares section
		for _, middleware := range beforeOperationMiddlewares {
			if continueOperation := middleware(w, ctx); !continueOperation {
				return
			}
		}
		// End middlewares beforeOperationMiddlewares section
		w.Header().Set("x-BeforeOperationRoutesExtension", "SimpleGetObject")
		value, opError := controller.SimpleGetObject()
		for key, value := range controller.GetHeaders() {
			w.Header().Set(key, value)
		}
		w.Header().Set("x-inject", "true")
		w.Header().Set("x-ResponseHeadersExtension", "SimpleGetObject")
		statusCode := getStatusCode(&controller, true, opError)
		if opError != nil {
			// Middlewares onErrorMiddlewares section
			for _, middleware := range onErrorMiddlewares {
				if continueOperation := middleware(w, ctx, opError); !continueOperation {
					return
				}
			}
			// End middlewares onErrorMiddlewares section
			stdError := runtime.Rfc7807Error{
				Type:       http.StatusText(statusCode),
				Detail:     "Encountered an error during operation 'SimpleGetObject'",
				Status:     statusCode,
				Instance:   "/gleece/controller/error/SimpleGetObject",
				Extensions: map[string]string{"error": opError.Error()},
			}
			w.Header().Set("x-JsonErrorResponseExtension", "SimpleGetObject")
			w.WriteHeader(statusCode)
			json.NewEncoder(w).Encode(stdError)
			return
		}
		w.Header().Set("x-JsonResponseExtension", "SimpleGetObject")
		var outputValidationErr error
		outputValidationErr = validatorInstance.Struct(value)
		if outputValidationErr != nil {
			// Middlewares onOutputValidationMiddlewares section
			for _, middleware := range onOutputValidationMiddlewares {
				if continueOperation := middleware(w, ctx, outputValidationErr); !continueOperation {
					return
				}
			}
			// End middlewares onOutputValidationMiddlewares section
			outputValidationStatusCode := http.StatusInternalServerError
			outputValidationRfc7807Error := runtime.Rfc7807Error{
				Type:       http.StatusText(outputValidationStatusCode),
				Detail:     "Encountered an error during operation 'SimpleGetObject'",
				Status:     outputValidationStatusCode,
				Instance:   "/gleece/controller/error/SimpleGetObject",
				Extensions: map[string]string{},
			}
			w.Header().Set("Content-Type", "application/json")
			w.WriteHeader(outputValidationStatusCode)
			json.NewEncoder(w).Encode(outputValidationRfc7807Error)
			return
		}
		// Middlewares afterOperationSuccessMiddlewares section
		for _, middleware := range afterOperationSuccessMiddlewares {
			if continueOperation := middleware(w, ctx); !continueOperation {
				return
			}
		}
		// End middlewares afterOperationSuccessMiddlewares section
		w.Header().Set("x-AfterOperationRoutesExtension", "SimpleGetObject")
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(statusCode)
		json.NewEncoder(w).Encode(value)
		w.Header().Set("x-RouteEndRoutesExtension", "SimpleGetObject")
	})
	engine.Get(toChiUrl("/e2e/simple-get-object-ptr"), func(w http.ResponseWriter, ctx *http.Request) {
		w.Header().Set("x-RouteStartRoutesExtension", "SimpleGetObjectPtr")
		authErr := authorize(
			ctx,
			[]SecurityCheckList{
				{
					Relation: SecurityListRelationAnd,
					Checks: []runtime.SecurityCheck{
						{
							SchemaName: "securitySchemaName2",
							Scopes: []string{
								"config",
							},
						},
					},
				},
			},
		)
		if authErr != nil {
			handleAuthorizationError(w, authErr, "SimpleGetObjectPtr")
			return
		}
		controller := E2EControllerImport.E2EController{}
		controller.InitController(ctx)
		// Middlewares beforeOperationMiddlewares section
		for _, middleware := range beforeOperationMiddlewares {
			if continueOperation := middleware(w, ctx); !continueOperation {
				return
			}
		}
		// End middlewares beforeOperationMiddlewares section
		w.Header().Set("x-BeforeOperationRoutesExtension", "SimpleGetObjectPtr")
		value, opError := controller.SimpleGetObjectPtr()
		for key, value := range controller.GetHeaders() {
			w.Header().Set(key, value)
		}
		w.Header().Set("x-inject", "true")
		w.Header().Set("x-ResponseHeadersExtension", "SimpleGetObjectPtr")
		statusCode := getStatusCode(&controller, true, opError)
		if opError != nil {
			// Middlewares onErrorMiddlewares section
			for _, middleware := range onErrorMiddlewares {
				if continueOperation := middleware(w, ctx, opError); !continueOperation {
					return
				}
			}
			// End middlewares onErrorMiddlewares section
			stdError := runtime.Rfc7807Error{
				Type:       http.StatusText(statusCode),
				Detail:     "Encountered an error during operation 'SimpleGetObjectPtr'",
				Status:     statusCode,
				Instance:   "/gleece/controller/error/SimpleGetObjectPtr",
				Extensions: map[string]string{"error": opError.Error()},
			}
			w.Header().Set("x-JsonErrorResponseExtension", "SimpleGetObjectPtr")
			w.WriteHeader(statusCode)
			json.NewEncoder(w).Encode(stdError)
			return
		}
		w.Header().Set("x-JsonResponseExtension", "SimpleGetObjectPtr")
		var outputValidationErr error
		if value == nil {
			outputValidationErr = fmt.Errorf("Response payload is nil")
		} else {
			outputValidationErr = validatorInstance.Struct(value)
		}
		if outputValidationErr != nil {
			// Middlewares onOutputValidationMiddlewares section
			for _, middleware := range onOutputValidationMiddlewares {
				if continueOperation := middleware(w, ctx, outputValidationErr); !continueOperation {
					return
				}
			}
			// End middlewares onOutputValidationMiddlewares section
			outputValidationStatusCode := http.StatusInternalServerError
			outputValidationRfc7807Error := runtime.Rfc7807Error{
				Type:       http.StatusText(outputValidationStatusCode),
				Detail:     "Encountered an error during operation 'SimpleGetObjectPtr'",
				Status:     outputValidationStatusCode,
				Instance:   "/gleece/controller/error/SimpleGetObjectPtr",
				Extensions: map[string]string{},
			}
			w.Header().Set("Content-Type", "application/json")
			w.WriteHeader(outputValidationStatusCode)
			json.NewEncoder(w).Encode(outputValidationRfc7807Error)
			return
		}
		// Middlewares afterOperationSuccessMiddlewares section
		for _, middleware := range afterOperationSuccessMiddlewares {
			if continueOperation := middleware(w, ctx); !continueOperation {
				return
			}
		}
		// End middlewares afterOperationSuccessMiddlewares section
		w.Header().Set("x-AfterOperationRoutesExtension", "SimpleGetObjectPtr")
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(statusCode)
		json.NewEncoder(w).Encode(value)
		w.Header().Set("x-RouteEndRoutesExtension", "SimpleGetObjectPtr")
	})
	engine.Get(toChiUrl("/e2e/simple-get-object-null"), func(w http.ResponseWriter, ctx *http.Request) {
		w.Header().Set("x-RouteStartRoutesExtension", "SimpleGetObjectNull")
		authErr := authorize(
			ctx,
			[]SecurityCheckList{
				{
					Relation: SecurityListRelationAnd,
					Checks: []runtime.SecurityCheck{
						{
							SchemaName: "securitySchemaName2",
							Scopes: []string{
								"config",
							},
						},
					},
				},
			},
		)
		if authErr != nil {
			handleAuthorizationError(w, authErr, "SimpleGetObjectNull")
			return
		}
		controller := E2EControllerImport.E2EController{}
		controller.InitController(ctx)
		// Middlewares beforeOperationMiddlewares section
		for _, middleware := range beforeOperationMiddlewares {
			if continueOperation := middleware(w, ctx); !continueOperation {
				return
			}
		}
		// End middlewares beforeOperationMiddlewares section
		w.Header().Set("x-BeforeOperationRoutesExtension", "SimpleGetObjectNull")
		value, opError := controller.SimpleGetObjectNull()
		for key, value := range controller.GetHeaders() {
			w.Header().Set(key, value)
		}
		w.Header().Set("x-inject", "true")
		w.Header().Set("x-ResponseHeadersExtension", "SimpleGetObjectNull")
		statusCode := getStatusCode(&controller, true, opError)
		if opError != nil {
			// Middlewares onErrorMiddlewares section
			for _, middleware := range onErrorMiddlewares {
				if continueOperation := middleware(w, ctx, opError); !continueOperation {
					return
				}
			}
			// End middlewares onErrorMiddlewares section
			stdError := runtime.Rfc7807Error{
				Type:       http.StatusText(statusCode),
				Detail:     "Encountered an error during operation 'SimpleGetObjectNull'",
				Status:     statusCode,
				Instance:   "/gleece/controller/error/SimpleGetObjectNull",
				Extensions: map[string]string{"error": opError.Error()},
			}
			w.Header().Set("x-JsonErrorResponseExtension", "SimpleGetObjectNull")
			w.WriteHeader(statusCode)
			json.NewEncoder(w).Encode(stdError)
			return
		}
		w.Header().Set("x-JsonResponseExtension", "SimpleGetObjectNull")
		var outputValidationErr error
		if value == nil {
			outputValidationErr = fmt.Errorf("Response payload is nil")
		} else {
			outputValidationErr = validatorInstance.Struct(value)
		}
		if outputValidationErr != nil {
			// Middlewares onOutputValidationMiddlewares section
			for _, middleware := range onOutputValidationMiddlewares {
				if continueOperation := middleware(w, ctx, outputValidationErr); !continueOperation {
					return
				}
			}
			// End middlewares onOutputValidationMiddlewares section
			outputValidationStatusCode := http.StatusInternalServerError
			outputValidationRfc7807Error := runtime.Rfc7807Error{
				Type:       http.StatusText(outputValidationStatusCode),
				Detail:     "Encountered an error during operation 'SimpleGetObjectNull'",
				Status:     outputValidationStatusCode,
				Instance:   "/gleece/controller/error/SimpleGetObjectNull",
				Extensions: map[string]string{},
			}
			w.Header().Set("Content-Type", "application/json")
			w.WriteHeader(outputValidationStatusCode)
			json.NewEncoder(w).Encode(outputValidationRfc7807Error)
			return
		}
		// Middlewares afterOperationSuccessMiddlewares section
		for _, middleware := range afterOperationSuccessMiddlewares {
			if continueOperation := middleware(w, ctx); !continueOperation {
				return
			}
		}
		// End middlewares afterOperationSuccessMiddlewares section
		w.Header().Set("x-AfterOperationRoutesExtension", "SimpleGetObjectNull")
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(statusCode)
		json.NewEncoder(w).Encode(value)
		w.Header().Set("x-RouteEndRoutesExtension", "SimpleGetObjectNull")
	})
	engine.Get(toChiUrl("/e2e/simple-get-empty"), func(w http.ResponseWriter, ctx *http.Request) {
		w.Header().Set("x-RouteStartRoutesExtension", "SimpleGetEmpty")
		authErr := authorize(
			ctx,
			[]SecurityCheckList{
				{
					Relation: SecurityListRelationAnd,
					Checks: []runtime.SecurityCheck{
						{
							SchemaName: "securitySchemaName2",
							Scopes: []string{
								"config",
							},
						},
					},
				},
			},
		)
		if authErr != nil {
			handleAuthorizationError(w, authErr, "SimpleGetEmpty")
			return
		}
		controller := E2EControllerImport.E2EController{}
		controller.InitController(ctx)
		var queryParamRawPtr *string = nil
		queryParamRaw := ctx.URL.Query().Get("queryParam")
		isqueryParamExists := ctx.URL.Query().Has("queryParam")
		if isqueryParamExists {
			queryParam := queryParamRaw
			queryParamRawPtr = &queryParam
		}
		if validatorErr := validatorInstance.Var(queryParamRawPtr, "required"); validatorErr != nil {
			// Middlewares onInputValidationMiddlewares section
			for _, middleware := range onInputValidationMiddlewares {
				if continueOperation := middleware(w, ctx, validatorErr); !continueOperation {
					return
				}
			}
			// End middlewares onInputValidationMiddlewares section
			fieldName := "queryParam"
			validationError := wrapValidatorError(validatorErr, "SimpleGetEmpty", fieldName)
			w.Header().Set("x-RunValidatorExtension", "SimpleGetEmpty")
			w.WriteHeader(http.StatusUnprocessableEntity)
			json.NewEncoder(w).Encode(validationError)
			return
		}
		// Middlewares beforeOperationMiddlewares section
		for _, middleware := range beforeOperationMiddlewares {
			if continueOperation := middleware(w, ctx); !continueOperation {
				return
			}
		}
		// End middlewares beforeOperationMiddlewares section
		w.Header().Set("x-BeforeOperationRoutesExtension", "SimpleGetEmpty")
		opError := controller.SimpleGetEmpty(*queryParamRawPtr)
		for key, value := range controller.GetHeaders() {
			w.Header().Set(key, value)
		}
		w.Header().Set("x-inject", "true")
		w.Header().Set("x-ResponseHeadersExtension", "SimpleGetEmpty")
		statusCode := getStatusCode(&controller, false, opError)
		if opError != nil {
			// Middlewares onErrorMiddlewares section
			for _, middleware := range onErrorMiddlewares {
				if continueOperation := middleware(w, ctx, opError); !continueOperation {
					return
				}
			}
			// End middlewares onErrorMiddlewares section
			stdError := runtime.Rfc7807Error{
				Type:       http.StatusText(statusCode),
				Detail:     "Encountered an error during operation 'SimpleGetEmpty'",
				Status:     statusCode,
				Instance:   "/gleece/controller/error/SimpleGetEmpty",
				Extensions: map[string]string{"error": opError.Error()},
			}
			w.Header().Set("x-JsonErrorResponseExtension", "SimpleGetEmpty")
			w.WriteHeader(statusCode)
			json.NewEncoder(w).Encode(stdError)
			return
		}
		w.Header().Set("x-JsonResponseExtension", "SimpleGetEmpty")
		// Middlewares afterOperationSuccessMiddlewares section
		for _, middleware := range afterOperationSuccessMiddlewares {
			if continueOperation := middleware(w, ctx); !continueOperation {
				return
			}
		}
		// End middlewares afterOperationSuccessMiddlewares section
		w.Header().Set("x-AfterOperationRoutesExtension", "SimpleGetEmpty")
		w.WriteHeader(statusCode)
		w.Header().Set("x-RouteEndRoutesExtension", "SimpleGetEmpty")
	})
	engine.Get(toChiUrl("/e2e/get-with-all-params/{pathParam}"), func(w http.ResponseWriter, ctx *http.Request) {
		w.Header().Set("x-RouteStartRoutesExtension", "GetWithAllParams")
		authErr := authorize(
			ctx,
			[]SecurityCheckList{
				{
					Relation: SecurityListRelationAnd,
					Checks: []runtime.SecurityCheck{
						{
							SchemaName: "securitySchemaName2",
							Scopes: []string{
								"config",
							},
						},
					},
				},
			},
		)
		if authErr != nil {
			handleAuthorizationError(w, authErr, "GetWithAllParams")
			return
		}
		controller := E2EControllerImport.E2EController{}
		controller.InitController(ctx)
		var queryParamRawPtr *string = nil
		queryParamRaw := ctx.URL.Query().Get("queryParam")
		isqueryParamExists := ctx.URL.Query().Has("queryParam")
		if isqueryParamExists {
			queryParam := queryParamRaw
			queryParamRawPtr = &queryParam
		}
		if validatorErr := validatorInstance.Var(queryParamRawPtr, "required"); validatorErr != nil {
			// Middlewares onInputValidationMiddlewares section
			for _, middleware := range onInputValidationMiddlewares {
				if continueOperation := middleware(w, ctx, validatorErr); !continueOperation {
					return
				}
			}
			// End middlewares onInputValidationMiddlewares section
			fieldName := "queryParam"
			validationError := wrapValidatorError(validatorErr, "GetWithAllParams", fieldName)
			w.Header().Set("x-RunValidatorExtension", "GetWithAllParams")
			w.WriteHeader(http.StatusUnprocessableEntity)
			json.NewEncoder(w).Encode(validationError)
			return
		}
		var pathParamRawPtr *string = nil
		pathParamRaw := chi.URLParam(ctx, "pathParam")
		ispathParamExists := true // if parameter is in route but not provided, it won't reach this handler
		if ispathParamExists {
			pathParam := pathParamRaw
			pathParamRawPtr = &pathParam
		}
		if validatorErr := validatorInstance.Var(pathParamRawPtr, "required"); validatorErr != nil {
			// Middlewares onInputValidationMiddlewares section
			for _, middleware := range onInputValidationMiddlewares {
				if continueOperation := middleware(w, ctx, validatorErr); !continueOperation {
					return
				}
			}
			// End middlewares onInputValidationMiddlewares section
			fieldName := "pathParam"
			validationError := wrapValidatorError(validatorErr, "GetWithAllParams", fieldName)
			w.Header().Set("x-RunValidatorExtension", "GetWithAllParams")
			w.WriteHeader(http.StatusUnprocessableEntity)
			json.NewEncoder(w).Encode(validationError)
			return
		}
		var headerParamRawPtr *string = nil
		headerParamRaw := ctx.Header.Get("headerParam")
		_, isheaderParamExists := ctx.Header["headerParam"]
		if !isheaderParamExists {
			// In echo, the ctx..Header["key"] is not 100% reliable, so we need other check, but only if is was not found in the first method
			headerValues := ctx.Header.Values("headerParam")
			isheaderParamExists = len(headerValues) > 0
		}
		if isheaderParamExists {
			headerParam := headerParamRaw
			headerParamRawPtr = &headerParam
		}
		if validatorErr := validatorInstance.Var(headerParamRawPtr, "required"); validatorErr != nil {
			// Middlewares onInputValidationMiddlewares section
			for _, middleware := range onInputValidationMiddlewares {
				if continueOperation := middleware(w, ctx, validatorErr); !continueOperation {
					return
				}
			}
			// End middlewares onInputValidationMiddlewares section
			fieldName := "headerParam"
			validationError := wrapValidatorError(validatorErr, "GetWithAllParams", fieldName)
			w.Header().Set("x-RunValidatorExtension", "GetWithAllParams")
			w.WriteHeader(http.StatusUnprocessableEntity)
			json.NewEncoder(w).Encode(validationError)
			return
		}
		// Middlewares beforeOperationMiddlewares section
		for _, middleware := range beforeOperationMiddlewares {
			if continueOperation := middleware(w, ctx); !continueOperation {
				return
			}
		}
		// End middlewares beforeOperationMiddlewares section
		w.Header().Set("x-BeforeOperationRoutesExtension", "GetWithAllParams")
		value, opError := controller.GetWithAllParams(*queryParamRawPtr, *pathParamRawPtr, *headerParamRawPtr)
		for key, value := range controller.GetHeaders() {
			w.Header().Set(key, value)
		}
		w.Header().Set("x-inject", "true")
		w.Header().Set("x-ResponseHeadersExtension", "GetWithAllParams")
		statusCode := getStatusCode(&controller, true, opError)
		if opError != nil {
			// Middlewares onErrorMiddlewares section
			for _, middleware := range onErrorMiddlewares {
				if continueOperation := middleware(w, ctx, opError); !continueOperation {
					return
				}
			}
			// End middlewares onErrorMiddlewares section
			stdError := runtime.Rfc7807Error{
				Type:       http.StatusText(statusCode),
				Detail:     "Encountered an error during operation 'GetWithAllParams'",
				Status:     statusCode,
				Instance:   "/gleece/controller/error/GetWithAllParams",
				Extensions: map[string]string{"error": opError.Error()},
			}
			w.Header().Set("x-JsonErrorResponseExtension", "GetWithAllParams")
			w.WriteHeader(statusCode)
			json.NewEncoder(w).Encode(stdError)
			return
		}
		w.Header().Set("x-JsonResponseExtension", "GetWithAllParams")
		// Middlewares afterOperationSuccessMiddlewares section
		for _, middleware := range afterOperationSuccessMiddlewares {
			if continueOperation := middleware(w, ctx); !continueOperation {
				return
			}
		}
		// End middlewares afterOperationSuccessMiddlewares section
		w.Header().Set("x-AfterOperationRoutesExtension", "GetWithAllParams")
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(statusCode)
		json.NewEncoder(w).Encode(value)
		w.Header().Set("x-RouteEndRoutesExtension", "GetWithAllParams")
	})
	engine.Get(toChiUrl("/e2e/get-with-all-params-ptr/{pathParam}"), func(w http.ResponseWriter, ctx *http.Request) {
		w.Header().Set("x-RouteStartRoutesExtension", "GetWithAllParamsPtr")
		authErr := authorize(
			ctx,
			[]SecurityCheckList{
				{
					Relation: SecurityListRelationAnd,
					Checks: []runtime.SecurityCheck{
						{
							SchemaName: "securitySchemaName2",
							Scopes: []string{
								"config",
							},
						},
					},
				},
			},
		)
		if authErr != nil {
			handleAuthorizationError(w, authErr, "GetWithAllParamsPtr")
			return
		}
		controller := E2EControllerImport.E2EController{}
		controller.InitController(ctx)
		var queryParamRawPtr *string = nil
		queryParamRaw := ctx.URL.Query().Get("queryParam")
		isqueryParamExists := ctx.URL.Query().Has("queryParam")
		if isqueryParamExists {
			queryParam := queryParamRaw
			queryParamRawPtr = &queryParam
		}
		var pathParamRawPtr *string = nil
		pathParamRaw := chi.URLParam(ctx, "pathParam")
		ispathParamExists := true // if parameter is in route but not provided, it won't reach this handler
		if ispathParamExists {
			pathParam := pathParamRaw
			pathParamRawPtr = &pathParam
		}
		if validatorErr := validatorInstance.Var(pathParamRawPtr, "required"); validatorErr != nil {
			// Middlewares onInputValidationMiddlewares section
			for _, middleware := range onInputValidationMiddlewares {
				if continueOperation := middleware(w, ctx, validatorErr); !continueOperation {
					return
				}
			}
			// End middlewares onInputValidationMiddlewares section
			fieldName := "pathParam"
			validationError := wrapValidatorError(validatorErr, "GetWithAllParamsPtr", fieldName)
			w.Header().Set("x-RunValidatorExtension", "GetWithAllParamsPtr")
			w.WriteHeader(http.StatusUnprocessableEntity)
			json.NewEncoder(w).Encode(validationError)
			return
		}
		var headerParamRawPtr *string = nil
		headerParamRaw := ctx.Header.Get("headerParam")
		_, isheaderParamExists := ctx.Header["headerParam"]
		if !isheaderParamExists {
			// In echo, the ctx..Header["key"] is not 100% reliable, so we need other check, but only if is was not found in the first method
			headerValues := ctx.Header.Values("headerParam")
			isheaderParamExists = len(headerValues) > 0
		}
		if isheaderParamExists {
			headerParam := headerParamRaw
			headerParamRawPtr = &headerParam
		}
		// Middlewares beforeOperationMiddlewares section
		for _, middleware := range beforeOperationMiddlewares {
			if continueOperation := middleware(w, ctx); !continueOperation {
				return
			}
		}
		// End middlewares beforeOperationMiddlewares section
		w.Header().Set("x-BeforeOperationRoutesExtension", "GetWithAllParamsPtr")
		value, opError := controller.GetWithAllParamsPtr(queryParamRawPtr, pathParamRawPtr, headerParamRawPtr)
		for key, value := range controller.GetHeaders() {
			w.Header().Set(key, value)
		}
		w.Header().Set("x-inject", "true")
		w.Header().Set("x-ResponseHeadersExtension", "GetWithAllParamsPtr")
		statusCode := getStatusCode(&controller, true, opError)
		if opError != nil {
			// Middlewares onErrorMiddlewares section
			for _, middleware := range onErrorMiddlewares {
				if continueOperation := middleware(w, ctx, opError); !continueOperation {
					return
				}
			}
			// End middlewares onErrorMiddlewares section
			stdError := runtime.Rfc7807Error{
				Type:       http.StatusText(statusCode),
				Detail:     "Encountered an error during operation 'GetWithAllParamsPtr'",
				Status:     statusCode,
				Instance:   "/gleece/controller/error/GetWithAllParamsPtr",
				Extensions: map[string]string{"error": opError.Error()},
			}
			w.Header().Set("x-JsonErrorResponseExtension", "GetWithAllParamsPtr")
			w.WriteHeader(statusCode)
			json.NewEncoder(w).Encode(stdError)
			return
		}
		w.Header().Set("x-JsonResponseExtension", "GetWithAllParamsPtr")
		// Middlewares afterOperationSuccessMiddlewares section
		for _, middleware := range afterOperationSuccessMiddlewares {
			if continueOperation := middleware(w, ctx); !continueOperation {
				return
			}
		}
		// End middlewares afterOperationSuccessMiddlewares section
		w.Header().Set("x-AfterOperationRoutesExtension", "GetWithAllParamsPtr")
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(statusCode)
		json.NewEncoder(w).Encode(value)
		w.Header().Set("x-RouteEndRoutesExtension", "GetWithAllParamsPtr")
	})
	engine.Get(toChiUrl("/e2e/get-with-all-params-required-ptr/{pathParam}"), func(w http.ResponseWriter, ctx *http.Request) {
		w.Header().Set("x-RouteStartRoutesExtension", "GetWithAllParamsRequiredPtr")
		authErr := authorize(
			ctx,
			[]SecurityCheckList{
				{
					Relation: SecurityListRelationAnd,
					Checks: []runtime.SecurityCheck{
						{
							SchemaName: "securitySchemaName2",
							Scopes: []string{
								"config",
							},
						},
					},
				},
			},
		)
		if authErr != nil {
			handleAuthorizationError(w, authErr, "GetWithAllParamsRequiredPtr")
			return
		}
		controller := E2EControllerImport.E2EController{}
		controller.InitController(ctx)
		var queryParamRawPtr *string = nil
		queryParamRaw := ctx.URL.Query().Get("queryParam")
		isqueryParamExists := ctx.URL.Query().Has("queryParam")
		if isqueryParamExists {
			queryParam := queryParamRaw
			queryParamRawPtr = &queryParam
		}
		if validatorErr := validatorInstance.Var(queryParamRawPtr, "required"); validatorErr != nil {
			// Middlewares onInputValidationMiddlewares section
			for _, middleware := range onInputValidationMiddlewares {
				if continueOperation := middleware(w, ctx, validatorErr); !continueOperation {
					return
				}
			}
			// End middlewares onInputValidationMiddlewares section
			fieldName := "queryParam"
			validationError := wrapValidatorError(validatorErr, "GetWithAllParamsRequiredPtr", fieldName)
			w.Header().Set("x-RunValidatorExtension", "GetWithAllParamsRequiredPtr")
			w.WriteHeader(http.StatusUnprocessableEntity)
			json.NewEncoder(w).Encode(validationError)
			return
		}
		var pathParamRawPtr *string = nil
		pathParamRaw := chi.URLParam(ctx, "pathParam")
		ispathParamExists := true // if parameter is in route but not provided, it won't reach this handler
		if ispathParamExists {
			pathParam := pathParamRaw
			pathParamRawPtr = &pathParam
		}
		if validatorErr := validatorInstance.Var(pathParamRawPtr, "required"); validatorErr != nil {
			// Middlewares onInputValidationMiddlewares section
			for _, middleware := range onInputValidationMiddlewares {
				if continueOperation := middleware(w, ctx, validatorErr); !continueOperation {
					return
				}
			}
			// End middlewares onInputValidationMiddlewares section
			fieldName := "pathParam"
			validationError := wrapValidatorError(validatorErr, "GetWithAllParamsRequiredPtr", fieldName)
			w.Header().Set("x-RunValidatorExtension", "GetWithAllParamsRequiredPtr")
			w.WriteHeader(http.StatusUnprocessableEntity)
			json.NewEncoder(w).Encode(validationError)
			return
		}
		var headerParamRawPtr *string = nil
		headerParamRaw := ctx.Header.Get("headerParam")
		_, isheaderParamExists := ctx.Header["headerParam"]
		if !isheaderParamExists {
			// In echo, the ctx..Header["key"] is not 100% reliable, so we need other check, but only if is was not found in the first method
			headerValues := ctx.Header.Values("headerParam")
			isheaderParamExists = len(headerValues) > 0
		}
		if isheaderParamExists {
			headerParam := headerParamRaw
			headerParamRawPtr = &headerParam
		}
		if validatorErr := validatorInstance.Var(headerParamRawPtr, "required"); validatorErr != nil {
			// Middlewares onInputValidationMiddlewares section
			for _, middleware := range onInputValidationMiddlewares {
				if continueOperation := middleware(w, ctx, validatorErr); !continueOperation {
					return
				}
			}
			// End middlewares onInputValidationMiddlewares section
			fieldName := "headerParam"
			validationError := wrapValidatorError(validatorErr, "GetWithAllParamsRequiredPtr", fieldName)
			w.Header().Set("x-RunValidatorExtension", "GetWithAllParamsRequiredPtr")
			w.WriteHeader(http.StatusUnprocessableEntity)
			json.NewEncoder(w).Encode(validationError)
			return
		}
		// Middlewares beforeOperationMiddlewares section
		for _, middleware := range beforeOperationMiddlewares {
			if continueOperation := middleware(w, ctx); !continueOperation {
				return
			}
		}
		// End middlewares beforeOperationMiddlewares section
		w.Header().Set("x-BeforeOperationRoutesExtension", "GetWithAllParamsRequiredPtr")
		value, opError := controller.GetWithAllParamsRequiredPtr(queryParamRawPtr, pathParamRawPtr, headerParamRawPtr)
		for key, value := range controller.GetHeaders() {
			w.Header().Set(key, value)
		}
		w.Header().Set("x-inject", "true")
		w.Header().Set("x-ResponseHeadersExtension", "GetWithAllParamsRequiredPtr")
		statusCode := getStatusCode(&controller, true, opError)
		if opError != nil {
			// Middlewares onErrorMiddlewares section
			for _, middleware := range onErrorMiddlewares {
				if continueOperation := middleware(w, ctx, opError); !continueOperation {
					return
				}
			}
			// End middlewares onErrorMiddlewares section
			stdError := runtime.Rfc7807Error{
				Type:       http.StatusText(statusCode),
				Detail:     "Encountered an error during operation 'GetWithAllParamsRequiredPtr'",
				Status:     statusCode,
				Instance:   "/gleece/controller/error/GetWithAllParamsRequiredPtr",
				Extensions: map[string]string{"error": opError.Error()},
			}
			w.Header().Set("x-JsonErrorResponseExtension", "GetWithAllParamsRequiredPtr")
			w.WriteHeader(statusCode)
			json.NewEncoder(w).Encode(stdError)
			return
		}
		w.Header().Set("x-JsonResponseExtension", "GetWithAllParamsRequiredPtr")
		// Middlewares afterOperationSuccessMiddlewares section
		for _, middleware := range afterOperationSuccessMiddlewares {
			if continueOperation := middleware(w, ctx); !continueOperation {
				return
			}
		}
		// End middlewares afterOperationSuccessMiddlewares section
		w.Header().Set("x-AfterOperationRoutesExtension", "GetWithAllParamsRequiredPtr")
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(statusCode)
		json.NewEncoder(w).Encode(value)
		w.Header().Set("x-RouteEndRoutesExtension", "GetWithAllParamsRequiredPtr")
	})
	engine.Post(toChiUrl("/e2e/post-with-all-params-body"), func(w http.ResponseWriter, ctx *http.Request) {
		w.Header().Set("x-RouteStartRoutesExtension", "PostWithAllParamsWithBody")
		authErr := authorize(
			ctx,
			[]SecurityCheckList{
				{
					Relation: SecurityListRelationAnd,
					Checks: []runtime.SecurityCheck{
						{
							SchemaName: "securitySchemaName2",
							Scopes: []string{
								"config",
							},
						},
					},
				},
			},
		)
		if authErr != nil {
			handleAuthorizationError(w, authErr, "PostWithAllParamsWithBody")
			return
		}
		controller := E2EControllerImport.E2EController{}
		controller.InitController(ctx)
		var conversionErr error
		var queryParamRawPtr *string = nil
		queryParamRaw := ctx.URL.Query().Get("queryParam")
		isqueryParamExists := ctx.URL.Query().Has("queryParam")
		if isqueryParamExists {
			queryParam := queryParamRaw
			queryParamRawPtr = &queryParam
		}
		if validatorErr := validatorInstance.Var(queryParamRawPtr, "required"); validatorErr != nil {
			// Middlewares onInputValidationMiddlewares section
			for _, middleware := range onInputValidationMiddlewares {
				if continueOperation := middleware(w, ctx, validatorErr); !continueOperation {
					return
				}
			}
			// End middlewares onInputValidationMiddlewares section
			fieldName := "queryParam"
			validationError := wrapValidatorError(validatorErr, "PostWithAllParamsWithBody", fieldName)
			w.Header().Set("x-RunValidatorExtension", "PostWithAllParamsWithBody")
			w.WriteHeader(http.StatusUnprocessableEntity)
			json.NewEncoder(w).Encode(validationError)
			return
		}
		var headerParamRawPtr *string = nil
		headerParamRaw := ctx.Header.Get("headerParam")
		_, isheaderParamExists := ctx.Header["headerParam"]
		if !isheaderParamExists {
			// In echo, the ctx..Header["key"] is not 100% reliable, so we need other check, but only if is was not found in the first method
			headerValues := ctx.Header.Values("headerParam")
			isheaderParamExists = len(headerValues) > 0
		}
		if isheaderParamExists {
			headerParam := headerParamRaw
			headerParamRawPtr = &headerParam
		}
		if validatorErr := validatorInstance.Var(headerParamRawPtr, "required"); validatorErr != nil {
			// Middlewares onInputValidationMiddlewares section
			for _, middleware := range onInputValidationMiddlewares {
				if continueOperation := middleware(w, ctx, validatorErr); !continueOperation {
					return
				}
			}
			// End middlewares onInputValidationMiddlewares section
			fieldName := "headerParam"
			validationError := wrapValidatorError(validatorErr, "PostWithAllParamsWithBody", fieldName)
			w.Header().Set("x-RunValidatorExtension", "PostWithAllParamsWithBody")
			w.WriteHeader(http.StatusUnprocessableEntity)
			json.NewEncoder(w).Encode(validationError)
			return
		}
		var theBodyRawPtr *Param33theBody.BodyInfo = nil
		conversionErr = bindAndValidateBody(ctx, "application/json", "required", &theBodyRawPtr)
		if conversionErr != nil {
			// Middlewares onInputValidationMiddlewares section
			for _, middleware := range onInputValidationMiddlewares {
				if continueOperation := middleware(w, ctx, conversionErr); !continueOperation {
					return
				}
			}
			// End middlewares onInputValidationMiddlewares section
			validationError := runtime.Rfc7807Error{
				Type: http.StatusText(http.StatusUnprocessableEntity),
				Detail: fmt.Sprintf(
					"A request was made to operation 'PostWithAllParamsWithBody' but body parameter '%s' did not pass validation of '%s' - %s",
					"theBody",
					"BodyInfo",
					extractValidationErrorMessage(conversionErr, nil),
				),
				Status:   http.StatusUnprocessableEntity,
				Instance: "/gleece/validation/error/PostWithAllParamsWithBody",
			}
			w.Header().Set("x-JsonBodyValidationErrorResponseExtension", "PostWithAllParamsWithBody")
			w.WriteHeader(http.StatusUnprocessableEntity)
			json.NewEncoder(w).Encode(validationError)
			return
		}
		// Middlewares beforeOperationMiddlewares section
		for _, middleware := range beforeOperationMiddlewares {
			if continueOperation := middleware(w, ctx); !continueOperation {
				return
			}
		}
		// End middlewares beforeOperationMiddlewares section
		w.Header().Set("x-BeforeOperationRoutesExtension", "PostWithAllParamsWithBody")
		value, opError := controller.PostWithAllParamsWithBody(*queryParamRawPtr, *headerParamRawPtr, *theBodyRawPtr)
		for key, value := range controller.GetHeaders() {
			w.Header().Set(key, value)
		}
		w.Header().Set("x-inject", "true")
		w.Header().Set("x-ResponseHeadersExtension", "PostWithAllParamsWithBody")
		statusCode := getStatusCode(&controller, true, opError)
		if opError != nil {
			// Middlewares onErrorMiddlewares section
			for _, middleware := range onErrorMiddlewares {
				if continueOperation := middleware(w, ctx, opError); !continueOperation {
					return
				}
			}
			// End middlewares onErrorMiddlewares section
			stdError := runtime.Rfc7807Error{
				Type:       http.StatusText(statusCode),
				Detail:     "Encountered an error during operation 'PostWithAllParamsWithBody'",
				Status:     statusCode,
				Instance:   "/gleece/controller/error/PostWithAllParamsWithBody",
				Extensions: map[string]string{"error": opError.Error()},
			}
			w.Header().Set("x-JsonErrorResponseExtension", "PostWithAllParamsWithBody")
			w.WriteHeader(statusCode)
			json.NewEncoder(w).Encode(stdError)
			return
		}
		w.Header().Set("x-JsonResponseExtension", "PostWithAllParamsWithBody")
		var outputValidationErr error
		outputValidationErr = validatorInstance.Struct(value)
		if outputValidationErr != nil {
			// Middlewares onOutputValidationMiddlewares section
			for _, middleware := range onOutputValidationMiddlewares {
				if continueOperation := middleware(w, ctx, outputValidationErr); !continueOperation {
					return
				}
			}
			// End middlewares onOutputValidationMiddlewares section
			outputValidationStatusCode := http.StatusInternalServerError
			outputValidationRfc7807Error := runtime.Rfc7807Error{
				Type:       http.StatusText(outputValidationStatusCode),
				Detail:     "Encountered an error during operation 'PostWithAllParamsWithBody'",
				Status:     outputValidationStatusCode,
				Instance:   "/gleece/controller/error/PostWithAllParamsWithBody",
				Extensions: map[string]string{},
			}
			w.Header().Set("Content-Type", "application/json")
			w.WriteHeader(outputValidationStatusCode)
			json.NewEncoder(w).Encode(outputValidationRfc7807Error)
			return
		}
		// Middlewares afterOperationSuccessMiddlewares section
		for _, middleware := range afterOperationSuccessMiddlewares {
			if continueOperation := middleware(w, ctx); !continueOperation {
				return
			}
		}
		// End middlewares afterOperationSuccessMiddlewares section
		w.Header().Set("x-AfterOperationRoutesExtension", "PostWithAllParamsWithBody")
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(statusCode)
		json.NewEncoder(w).Encode(value)
		w.Header().Set("x-RouteEndRoutesExtension", "PostWithAllParamsWithBody")
	})
	engine.Post(toChiUrl("/e2e/post-with-all-params-body-ptr"), func(w http.ResponseWriter, ctx *http.Request) {
		w.Header().Set("x-RouteStartRoutesExtension", "PostWithAllParamsWithBodyPtr")
		authErr := authorize(
			ctx,
			[]SecurityCheckList{
				{
					Relation: SecurityListRelationAnd,
					Checks: []runtime.SecurityCheck{
						{
							SchemaName: "securitySchemaName2",
							Scopes: []string{
								"config",
							},
						},
					},
				},
			},
		)
		if authErr != nil {
			handleAuthorizationError(w, authErr, "PostWithAllParamsWithBodyPtr")
			return
		}
		controller := E2EControllerImport.E2EController{}
		controller.InitController(ctx)
		var conversionErr error
		var queryParamRawPtr *string = nil
		queryParamRaw := ctx.URL.Query().Get("queryParam")
		isqueryParamExists := ctx.URL.Query().Has("queryParam")
		if isqueryParamExists {
			queryParam := queryParamRaw
			queryParamRawPtr = &queryParam
		}
		var headerParamRawPtr *string = nil
		headerParamRaw := ctx.Header.Get("headerParam")
		_, isheaderParamExists := ctx.Header["headerParam"]
		if !isheaderParamExists {
			// In echo, the ctx..Header["key"] is not 100% reliable, so we need other check, but only if is was not found in the first method
			headerValues := ctx.Header.Values("headerParam")
			isheaderParamExists = len(headerValues) > 0
		}
		if isheaderParamExists {
			headerParam := headerParamRaw
			headerParamRawPtr = &headerParam
		}
		var theBodyRawPtr *Param38theBody.BodyInfo = nil
		conversionErr = bindAndValidateBody(ctx, "application/json", "", &theBodyRawPtr)
		if conversionErr != nil {
			// Middlewares onInputValidationMiddlewares section
			for _, middleware := range onInputValidationMiddlewares {
				if continueOperation := middleware(w, ctx, conversionErr); !continueOperation {
					return
				}
			}
			// End middlewares onInputValidationMiddlewares section
			validationError := runtime.Rfc7807Error{
				Type: http.StatusText(http.StatusUnprocessableEntity),
				Detail: fmt.Sprintf(
					"A request was made to operation 'PostWithAllParamsWithBodyPtr' but body parameter '%s' did not pass validation of '%s' - %s",
					"theBody",
					"BodyInfo",
					extractValidationErrorMessage(conversionErr, nil),
				),
				Status:   http.StatusUnprocessableEntity,
				Instance: "/gleece/validation/error/PostWithAllParamsWithBodyPtr",
			}
			w.Header().Set("x-JsonBodyValidationErrorResponseExtension", "PostWithAllParamsWithBodyPtr")
			w.WriteHeader(http.StatusUnprocessableEntity)
			json.NewEncoder(w).Encode(validationError)
			return
		}
		// Middlewares beforeOperationMiddlewares section
		for _, middleware := range beforeOperationMiddlewares {
			if continueOperation := middleware(w, ctx); !continueOperation {
				return
			}
		}
		// End middlewares beforeOperationMiddlewares section
		w.Header().Set("x-BeforeOperationRoutesExtension", "PostWithAllParamsWithBodyPtr")
		value, opError := controller.PostWithAllParamsWithBodyPtr(queryParamRawPtr, headerParamRawPtr, theBodyRawPtr)
		for key, value := range controller.GetHeaders() {
			w.Header().Set(key, value)
		}
		w.Header().Set("x-inject", "true")
		w.Header().Set("x-ResponseHeadersExtension", "PostWithAllParamsWithBodyPtr")
		statusCode := getStatusCode(&controller, true, opError)
		if opError != nil {
			// Middlewares onErrorMiddlewares section
			for _, middleware := range onErrorMiddlewares {
				if continueOperation := middleware(w, ctx, opError); !continueOperation {
					return
				}
			}
			// End middlewares onErrorMiddlewares section
			stdError := runtime.Rfc7807Error{
				Type:       http.StatusText(statusCode),
				Detail:     "Encountered an error during operation 'PostWithAllParamsWithBodyPtr'",
				Status:     statusCode,
				Instance:   "/gleece/controller/error/PostWithAllParamsWithBodyPtr",
				Extensions: map[string]string{"error": opError.Error()},
			}
			w.Header().Set("x-JsonErrorResponseExtension", "PostWithAllParamsWithBodyPtr")
			w.WriteHeader(statusCode)
			json.NewEncoder(w).Encode(stdError)
			return
		}
		w.Header().Set("x-JsonResponseExtension", "PostWithAllParamsWithBodyPtr")
		var outputValidationErr error
		if value == nil {
			outputValidationErr = fmt.Errorf("Response payload is nil")
		} else {
			outputValidationErr = validatorInstance.Struct(value)
		}
		if outputValidationErr != nil {
			// Middlewares onOutputValidationMiddlewares section
			for _, middleware := range onOutputValidationMiddlewares {
				if continueOperation := middleware(w, ctx, outputValidationErr); !continueOperation {
					return
				}
			}
			// End middlewares onOutputValidationMiddlewares section
			outputValidationStatusCode := http.StatusInternalServerError
			outputValidationRfc7807Error := runtime.Rfc7807Error{
				Type:       http.StatusText(outputValidationStatusCode),
				Detail:     "Encountered an error during operation 'PostWithAllParamsWithBodyPtr'",
				Status:     outputValidationStatusCode,
				Instance:   "/gleece/controller/error/PostWithAllParamsWithBodyPtr",
				Extensions: map[string]string{},
			}
			w.Header().Set("Content-Type", "application/json")
			w.WriteHeader(outputValidationStatusCode)
			json.NewEncoder(w).Encode(outputValidationRfc7807Error)
			return
		}
		// Middlewares afterOperationSuccessMiddlewares section
		for _, middleware := range afterOperationSuccessMiddlewares {
			if continueOperation := middleware(w, ctx); !continueOperation {
				return
			}
		}
		// End middlewares afterOperationSuccessMiddlewares section
		w.Header().Set("x-AfterOperationRoutesExtension", "PostWithAllParamsWithBodyPtr")
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(statusCode)
		json.NewEncoder(w).Encode(value)
		w.Header().Set("x-RouteEndRoutesExtension", "PostWithAllParamsWithBodyPtr")
	})
	engine.Post(toChiUrl("/e2e/post-with-all-params-body-required-ptr"), func(w http.ResponseWriter, ctx *http.Request) {
		w.Header().Set("x-RouteStartRoutesExtension", "PostWithAllParamsWithBodyRequiredPtr")
		authErr := authorize(
			ctx,
			[]SecurityCheckList{
				{
					Relation: SecurityListRelationAnd,
					Checks: []runtime.SecurityCheck{
						{
							SchemaName: "securitySchemaName2",
							Scopes: []string{
								"config",
							},
						},
					},
				},
			},
		)
		if authErr != nil {
			handleAuthorizationError(w, authErr, "PostWithAllParamsWithBodyRequiredPtr")
			return
		}
		controller := E2EControllerImport.E2EController{}
		controller.InitController(ctx)
		var conversionErr error
		var theBodyRawPtr *Param41theBody.BodyInfo = nil
		conversionErr = bindAndValidateBody(ctx, "application/json", "required", &theBodyRawPtr)
		if conversionErr != nil {
			// Middlewares onInputValidationMiddlewares section
			for _, middleware := range onInputValidationMiddlewares {
				if continueOperation := middleware(w, ctx, conversionErr); !continueOperation {
					return
				}
			}
			// End middlewares onInputValidationMiddlewares section
			validationError := runtime.Rfc7807Error{
				Type: http.StatusText(http.StatusUnprocessableEntity),
				Detail: fmt.Sprintf(
					"A request was made to operation 'PostWithAllParamsWithBodyRequiredPtr' but body parameter '%s' did not pass validation of '%s' - %s",
					"theBody",
					"BodyInfo",
					extractValidationErrorMessage(conversionErr, nil),
				),
				Status:   http.StatusUnprocessableEntity,
				Instance: "/gleece/validation/error/PostWithAllParamsWithBodyRequiredPtr",
			}
			w.Header().Set("x-JsonBodyValidationErrorResponseExtension", "PostWithAllParamsWithBodyRequiredPtr")
			w.WriteHeader(http.StatusUnprocessableEntity)
			json.NewEncoder(w).Encode(validationError)
			return
		}
		// Middlewares beforeOperationMiddlewares section
		for _, middleware := range beforeOperationMiddlewares {
			if continueOperation := middleware(w, ctx); !continueOperation {
				return
			}
		}
		// End middlewares beforeOperationMiddlewares section
		w.Header().Set("x-BeforeOperationRoutesExtension", "PostWithAllParamsWithBodyRequiredPtr")
		value, opError := controller.PostWithAllParamsWithBodyRequiredPtr(theBodyRawPtr)
		for key, value := range controller.GetHeaders() {
			w.Header().Set(key, value)
		}
		w.Header().Set("x-inject", "true")
		w.Header().Set("x-ResponseHeadersExtension", "PostWithAllParamsWithBodyRequiredPtr")
		statusCode := getStatusCode(&controller, true, opError)
		if opError != nil {
			// Middlewares onErrorMiddlewares section
			for _, middleware := range onErrorMiddlewares {
				if continueOperation := middleware(w, ctx, opError); !continueOperation {
					return
				}
			}
			// End middlewares onErrorMiddlewares section
			stdError := runtime.Rfc7807Error{
				Type:       http.StatusText(statusCode),
				Detail:     "Encountered an error during operation 'PostWithAllParamsWithBodyRequiredPtr'",
				Status:     statusCode,
				Instance:   "/gleece/controller/error/PostWithAllParamsWithBodyRequiredPtr",
				Extensions: map[string]string{"error": opError.Error()},
			}
			w.Header().Set("x-JsonErrorResponseExtension", "PostWithAllParamsWithBodyRequiredPtr")
			w.WriteHeader(statusCode)
			json.NewEncoder(w).Encode(stdError)
			return
		}
		w.Header().Set("x-JsonResponseExtension", "PostWithAllParamsWithBodyRequiredPtr")
		var outputValidationErr error
		if value == nil {
			outputValidationErr = fmt.Errorf("Response payload is nil")
		} else {
			outputValidationErr = validatorInstance.Struct(value)
		}
		if outputValidationErr != nil {
			// Middlewares onOutputValidationMiddlewares section
			for _, middleware := range onOutputValidationMiddlewares {
				if continueOperation := middleware(w, ctx, outputValidationErr); !continueOperation {
					return
				}
			}
			// End middlewares onOutputValidationMiddlewares section
			outputValidationStatusCode := http.StatusInternalServerError
			outputValidationRfc7807Error := runtime.Rfc7807Error{
				Type:       http.StatusText(outputValidationStatusCode),
				Detail:     "Encountered an error during operation 'PostWithAllParamsWithBodyRequiredPtr'",
				Status:     outputValidationStatusCode,
				Instance:   "/gleece/controller/error/PostWithAllParamsWithBodyRequiredPtr",
				Extensions: map[string]string{},
			}
			w.Header().Set("Content-Type", "application/json")
			w.WriteHeader(outputValidationStatusCode)
			json.NewEncoder(w).Encode(outputValidationRfc7807Error)
			return
		}
		// Middlewares afterOperationSuccessMiddlewares section
		for _, middleware := range afterOperationSuccessMiddlewares {
			if continueOperation := middleware(w, ctx); !continueOperation {
				return
			}
		}
		// End middlewares afterOperationSuccessMiddlewares section
		w.Header().Set("x-AfterOperationRoutesExtension", "PostWithAllParamsWithBodyRequiredPtr")
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(statusCode)
		json.NewEncoder(w).Encode(value)
		w.Header().Set("x-RouteEndRoutesExtension", "PostWithAllParamsWithBodyRequiredPtr")
	})
	engine.Get(toChiUrl("/e2e/get-header-start-with-letter"), func(w http.ResponseWriter, ctx *http.Request) {
		w.Header().Set("x-RouteStartRoutesExtension", "GetHeaderStartWithLetter")
		authErr := authorize(
			ctx,
			[]SecurityCheckList{
				{
					Relation: SecurityListRelationAnd,
					Checks: []runtime.SecurityCheck{
						{
							SchemaName: "securitySchemaName2",
							Scopes: []string{
								"config",
							},
						},
					},
				},
			},
		)
		if authErr != nil {
			handleAuthorizationError(w, authErr, "GetHeaderStartWithLetter")
			return
		}
		controller := E2EControllerImport.E2EController{}
		controller.InitController(ctx)
		var headerParamRawPtr *string = nil
		headerParamRaw := ctx.Header.Get("headerParam")
		_, isheaderParamExists := ctx.Header["headerParam"]
		if !isheaderParamExists {
			// In echo, the ctx..Header["key"] is not 100% reliable, so we need other check, but only if is was not found in the first method
			headerValues := ctx.Header.Values("headerParam")
			isheaderParamExists = len(headerValues) > 0
		}
		if isheaderParamExists {
			headerParam := headerParamRaw
			headerParamRawPtr = &headerParam
		}
		if validatorErr := validatorInstance.Var(headerParamRawPtr, "required,validate_starts_with_letter"); validatorErr != nil {
			// Middlewares onInputValidationMiddlewares section
			for _, middleware := range onInputValidationMiddlewares {
				if continueOperation := middleware(w, ctx, validatorErr); !continueOperation {
					return
				}
			}
			// End middlewares onInputValidationMiddlewares section
			fieldName := "headerParam"
			validationError := wrapValidatorError(validatorErr, "GetHeaderStartWithLetter", fieldName)
			w.Header().Set("x-RunValidatorExtension", "GetHeaderStartWithLetter")
			w.WriteHeader(http.StatusUnprocessableEntity)
			json.NewEncoder(w).Encode(validationError)
			return
		}
		// Middlewares beforeOperationMiddlewares section
		for _, middleware := range beforeOperationMiddlewares {
			if continueOperation := middleware(w, ctx); !continueOperation {
				return
			}
		}
		// End middlewares beforeOperationMiddlewares section
		w.Header().Set("x-BeforeOperationRoutesExtension", "GetHeaderStartWithLetter")
		value, opError := controller.GetHeaderStartWithLetter(*headerParamRawPtr)
		for key, value := range controller.GetHeaders() {
			w.Header().Set(key, value)
		}
		w.Header().Set("x-inject", "true")
		w.Header().Set("x-ResponseHeadersExtension", "GetHeaderStartWithLetter")
		statusCode := getStatusCode(&controller, true, opError)
		if opError != nil {
			// Middlewares onErrorMiddlewares section
			for _, middleware := range onErrorMiddlewares {
				if continueOperation := middleware(w, ctx, opError); !continueOperation {
					return
				}
			}
			// End middlewares onErrorMiddlewares section
			stdError := runtime.Rfc7807Error{
				Type:       http.StatusText(statusCode),
				Detail:     "Encountered an error during operation 'GetHeaderStartWithLetter'",
				Status:     statusCode,
				Instance:   "/gleece/controller/error/GetHeaderStartWithLetter",
				Extensions: map[string]string{"error": opError.Error()},
			}
			w.Header().Set("x-JsonErrorResponseExtension", "GetHeaderStartWithLetter")
			w.WriteHeader(statusCode)
			json.NewEncoder(w).Encode(stdError)
			return
		}
		w.Header().Set("x-JsonResponseExtension", "GetHeaderStartWithLetter")
		// Middlewares afterOperationSuccessMiddlewares section
		for _, middleware := range afterOperationSuccessMiddlewares {
			if continueOperation := middleware(w, ctx); !continueOperation {
				return
			}
		}
		// End middlewares afterOperationSuccessMiddlewares section
		w.Header().Set("x-AfterOperationRoutesExtension", "GetHeaderStartWithLetter")
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(statusCode)
		json.NewEncoder(w).Encode(value)
		w.Header().Set("x-RouteEndRoutesExtension", "GetHeaderStartWithLetter")
	})
	engine.Get(toChiUrl("/e2e/with-default-config-security"), func(w http.ResponseWriter, ctx *http.Request) {
		w.Header().Set("x-RouteStartRoutesExtension", "WithDefaultConfigSecurity")
		authErr := authorize(
			ctx,
			[]SecurityCheckList{
				{
					Relation: SecurityListRelationAnd,
					Checks: []runtime.SecurityCheck{
						{
							SchemaName: "securitySchemaName2",
							Scopes: []string{
								"config",
							},
						},
					},
				},
			},
		)
		if authErr != nil {
			handleAuthorizationError(w, authErr, "WithDefaultConfigSecurity")
			return
		}
		controller := E2EControllerImport.E2EController{}
		controller.InitController(ctx)
		var headerParamRawPtr *string = nil
		headerParamRaw := ctx.Header.Get("x-test-scopes")
		_, isheaderParamExists := ctx.Header["x-test-scopes"]
		if !isheaderParamExists {
			// In echo, the ctx..Header["key"] is not 100% reliable, so we need other check, but only if is was not found in the first method
			headerValues := ctx.Header.Values("x-test-scopes")
			isheaderParamExists = len(headerValues) > 0
		}
		if isheaderParamExists {
			headerParam := headerParamRaw
			headerParamRawPtr = &headerParam
		}
		if validatorErr := validatorInstance.Var(headerParamRawPtr, "required"); validatorErr != nil {
			// Middlewares onInputValidationMiddlewares section
			for _, middleware := range onInputValidationMiddlewares {
				if continueOperation := middleware(w, ctx, validatorErr); !continueOperation {
					return
				}
			}
			// End middlewares onInputValidationMiddlewares section
			fieldName := "headerParam"
			validationError := wrapValidatorError(validatorErr, "WithDefaultConfigSecurity", fieldName)
			w.Header().Set("x-RunValidatorExtension", "WithDefaultConfigSecurity")
			w.WriteHeader(http.StatusUnprocessableEntity)
			json.NewEncoder(w).Encode(validationError)
			return
		}
		// Middlewares beforeOperationMiddlewares section
		for _, middleware := range beforeOperationMiddlewares {
			if continueOperation := middleware(w, ctx); !continueOperation {
				return
			}
		}
		// End middlewares beforeOperationMiddlewares section
		w.Header().Set("x-BeforeOperationRoutesExtension", "WithDefaultConfigSecurity")
		value, opError := controller.WithDefaultConfigSecurity(*headerParamRawPtr)
		for key, value := range controller.GetHeaders() {
			w.Header().Set(key, value)
		}
		w.Header().Set("x-inject", "true")
		w.Header().Set("x-ResponseHeadersExtension", "WithDefaultConfigSecurity")
		statusCode := getStatusCode(&controller, true, opError)
		if opError != nil {
			// Middlewares onErrorMiddlewares section
			for _, middleware := range onErrorMiddlewares {
				if continueOperation := middleware(w, ctx, opError); !continueOperation {
					return
				}
			}
			// End middlewares onErrorMiddlewares section
			stdError := runtime.Rfc7807Error{
				Type:       http.StatusText(statusCode),
				Detail:     "Encountered an error during operation 'WithDefaultConfigSecurity'",
				Status:     statusCode,
				Instance:   "/gleece/controller/error/WithDefaultConfigSecurity",
				Extensions: map[string]string{"error": opError.Error()},
			}
			w.Header().Set("x-JsonErrorResponseExtension", "WithDefaultConfigSecurity")
			w.WriteHeader(statusCode)
			json.NewEncoder(w).Encode(stdError)
			return
		}
		w.Header().Set("x-JsonResponseExtension", "WithDefaultConfigSecurity")
		// Middlewares afterOperationSuccessMiddlewares section
		for _, middleware := range afterOperationSuccessMiddlewares {
			if continueOperation := middleware(w, ctx); !continueOperation {
				return
			}
		}
		// End middlewares afterOperationSuccessMiddlewares section
		w.Header().Set("x-AfterOperationRoutesExtension", "WithDefaultConfigSecurity")
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(statusCode)
		json.NewEncoder(w).Encode(value)
		w.Header().Set("x-RouteEndRoutesExtension", "WithDefaultConfigSecurity")
	})
	engine.Get(toChiUrl("/e2e/with-one-security"), func(w http.ResponseWriter, ctx *http.Request) {
		w.Header().Set("x-RouteStartRoutesExtension", "WithOneSecurity")
		authErr := authorize(
			ctx,
			[]SecurityCheckList{
				{
					Relation: SecurityListRelationAnd,
					Checks: []runtime.SecurityCheck{
						{
							SchemaName: "securitySchemaName",
							Scopes: []string{
								"other",
							},
						},
					},
				},
			},
		)
		if authErr != nil {
			handleAuthorizationError(w, authErr, "WithOneSecurity")
			return
		}
		controller := E2EControllerImport.E2EController{}
		controller.InitController(ctx)
		var headerParamRawPtr *string = nil
		headerParamRaw := ctx.Header.Get("x-test-scopes")
		_, isheaderParamExists := ctx.Header["x-test-scopes"]
		if !isheaderParamExists {
			// In echo, the ctx..Header["key"] is not 100% reliable, so we need other check, but only if is was not found in the first method
			headerValues := ctx.Header.Values("x-test-scopes")
			isheaderParamExists = len(headerValues) > 0
		}
		if isheaderParamExists {
			headerParam := headerParamRaw
			headerParamRawPtr = &headerParam
		}
		if validatorErr := validatorInstance.Var(headerParamRawPtr, "required"); validatorErr != nil {
			// Middlewares onInputValidationMiddlewares section
			for _, middleware := range onInputValidationMiddlewares {
				if continueOperation := middleware(w, ctx, validatorErr); !continueOperation {
					return
				}
			}
			// End middlewares onInputValidationMiddlewares section
			fieldName := "headerParam"
			validationError := wrapValidatorError(validatorErr, "WithOneSecurity", fieldName)
			w.Header().Set("x-RunValidatorExtension", "WithOneSecurity")
			w.WriteHeader(http.StatusUnprocessableEntity)
			json.NewEncoder(w).Encode(validationError)
			return
		}
		// Middlewares beforeOperationMiddlewares section
		for _, middleware := range beforeOperationMiddlewares {
			if continueOperation := middleware(w, ctx); !continueOperation {
				return
			}
		}
		// End middlewares beforeOperationMiddlewares section
		w.Header().Set("x-BeforeOperationRoutesExtension", "WithOneSecurity")
		value, opError := controller.WithOneSecurity(*headerParamRawPtr)
		for key, value := range controller.GetHeaders() {
			w.Header().Set(key, value)
		}
		w.Header().Set("x-inject", "true")
		w.Header().Set("x-ResponseHeadersExtension", "WithOneSecurity")
		statusCode := getStatusCode(&controller, true, opError)
		if opError != nil {
			// Middlewares onErrorMiddlewares section
			for _, middleware := range onErrorMiddlewares {
				if continueOperation := middleware(w, ctx, opError); !continueOperation {
					return
				}
			}
			// End middlewares onErrorMiddlewares section
			stdError := runtime.Rfc7807Error{
				Type:       http.StatusText(statusCode),
				Detail:     "Encountered an error during operation 'WithOneSecurity'",
				Status:     statusCode,
				Instance:   "/gleece/controller/error/WithOneSecurity",
				Extensions: map[string]string{"error": opError.Error()},
			}
			w.Header().Set("x-JsonErrorResponseExtension", "WithOneSecurity")
			w.WriteHeader(statusCode)
			json.NewEncoder(w).Encode(stdError)
			return
		}
		w.Header().Set("x-JsonResponseExtension", "WithOneSecurity")
		// Middlewares afterOperationSuccessMiddlewares section
		for _, middleware := range afterOperationSuccessMiddlewares {
			if continueOperation := middleware(w, ctx); !continueOperation {
				return
			}
		}
		// End middlewares afterOperationSuccessMiddlewares section
		w.Header().Set("x-AfterOperationRoutesExtension", "WithOneSecurity")
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(statusCode)
		json.NewEncoder(w).Encode(value)
		w.Header().Set("x-RouteEndRoutesExtension", "WithOneSecurity")
	})
	engine.Get(toChiUrl("/e2e/with-two-security"), func(w http.ResponseWriter, ctx *http.Request) {
		w.Header().Set("x-RouteStartRoutesExtension", "WithTwoSecurity")
		authErr := authorize(
			ctx,
			[]SecurityCheckList{
				{
					Relation: SecurityListRelationAnd,
					Checks: []runtime.SecurityCheck{
						{
							SchemaName: "securitySchemaName",
							Scopes: []string{
								"other",
							},
						},
					},
				},
				{
					Relation: SecurityListRelationAnd,
					Checks: []runtime.SecurityCheck{
						{
							SchemaName: "securitySchemaName2",
							Scopes: []string{
								"write",
								"read",
							},
						},
					},
				},
			},
		)
		if authErr != nil {
			handleAuthorizationError(w, authErr, "WithTwoSecurity")
			return
		}
		controller := E2EControllerImport.E2EController{}
		controller.InitController(ctx)
		var headerParamRawPtr *string = nil
		headerParamRaw := ctx.Header.Get("x-test-scopes")
		_, isheaderParamExists := ctx.Header["x-test-scopes"]
		if !isheaderParamExists {
			// In echo, the ctx..Header["key"] is not 100% reliable, so we need other check, but only if is was not found in the first method
			headerValues := ctx.Header.Values("x-test-scopes")
			isheaderParamExists = len(headerValues) > 0
		}
		if isheaderParamExists {
			headerParam := headerParamRaw
			headerParamRawPtr = &headerParam
		}
		if validatorErr := validatorInstance.Var(headerParamRawPtr, "required"); validatorErr != nil {
			// Middlewares onInputValidationMiddlewares section
			for _, middleware := range onInputValidationMiddlewares {
				if continueOperation := middleware(w, ctx, validatorErr); !continueOperation {
					return
				}
			}
			// End middlewares onInputValidationMiddlewares section
			fieldName := "headerParam"
			validationError := wrapValidatorError(validatorErr, "WithTwoSecurity", fieldName)
			w.Header().Set("x-RunValidatorExtension", "WithTwoSecurity")
			w.WriteHeader(http.StatusUnprocessableEntity)
			json.NewEncoder(w).Encode(validationError)
			return
		}
		// Middlewares beforeOperationMiddlewares section
		for _, middleware := range beforeOperationMiddlewares {
			if continueOperation := middleware(w, ctx); !continueOperation {
				return
			}
		}
		// End middlewares beforeOperationMiddlewares section
		w.Header().Set("x-BeforeOperationRoutesExtension", "WithTwoSecurity")
		value, opError := controller.WithTwoSecurity(*headerParamRawPtr)
		for key, value := range controller.GetHeaders() {
			w.Header().Set(key, value)
		}
		w.Header().Set("x-inject", "true")
		w.Header().Set("x-ResponseHeadersExtension", "WithTwoSecurity")
		statusCode := getStatusCode(&controller, true, opError)
		if opError != nil {
			// Middlewares onErrorMiddlewares section
			for _, middleware := range onErrorMiddlewares {
				if continueOperation := middleware(w, ctx, opError); !continueOperation {
					return
				}
			}
			// End middlewares onErrorMiddlewares section
			stdError := runtime.Rfc7807Error{
				Type:       http.StatusText(statusCode),
				Detail:     "Encountered an error during operation 'WithTwoSecurity'",
				Status:     statusCode,
				Instance:   "/gleece/controller/error/WithTwoSecurity",
				Extensions: map[string]string{"error": opError.Error()},
			}
			w.Header().Set("x-JsonErrorResponseExtension", "WithTwoSecurity")
			w.WriteHeader(statusCode)
			json.NewEncoder(w).Encode(stdError)
			return
		}
		w.Header().Set("x-JsonResponseExtension", "WithTwoSecurity")
		// Middlewares afterOperationSuccessMiddlewares section
		for _, middleware := range afterOperationSuccessMiddlewares {
			if continueOperation := middleware(w, ctx); !continueOperation {
				return
			}
		}
		// End middlewares afterOperationSuccessMiddlewares section
		w.Header().Set("x-AfterOperationRoutesExtension", "WithTwoSecurity")
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(statusCode)
		json.NewEncoder(w).Encode(value)
		w.Header().Set("x-RouteEndRoutesExtension", "WithTwoSecurity")
	})
	engine.Get(toChiUrl("/e2e/with-two-security-same-method"), func(w http.ResponseWriter, ctx *http.Request) {
		w.Header().Set("x-RouteStartRoutesExtension", "WithTwoSecuritySameMethod")
		authErr := authorize(
			ctx,
			[]SecurityCheckList{
				{
					Relation: SecurityListRelationAnd,
					Checks: []runtime.SecurityCheck{
						{
							SchemaName: "securitySchemaName",
							Scopes: []string{
								"other",
							},
						},
					},
				},
				{
					Relation: SecurityListRelationAnd,
					Checks: []runtime.SecurityCheck{
						{
							SchemaName: "securitySchemaName",
							Scopes: []string{
								"write",
								"read",
							},
						},
					},
				},
			},
		)
		if authErr != nil {
			handleAuthorizationError(w, authErr, "WithTwoSecuritySameMethod")
			return
		}
		controller := E2EControllerImport.E2EController{}
		controller.InitController(ctx)
		var headerParamRawPtr *string = nil
		headerParamRaw := ctx.Header.Get("x-test-scopes")
		_, isheaderParamExists := ctx.Header["x-test-scopes"]
		if !isheaderParamExists {
			// In echo, the ctx..Header["key"] is not 100% reliable, so we need other check, but only if is was not found in the first method
			headerValues := ctx.Header.Values("x-test-scopes")
			isheaderParamExists = len(headerValues) > 0
		}
		if isheaderParamExists {
			headerParam := headerParamRaw
			headerParamRawPtr = &headerParam
		}
		if validatorErr := validatorInstance.Var(headerParamRawPtr, "required"); validatorErr != nil {
			// Middlewares onInputValidationMiddlewares section
			for _, middleware := range onInputValidationMiddlewares {
				if continueOperation := middleware(w, ctx, validatorErr); !continueOperation {
					return
				}
			}
			// End middlewares onInputValidationMiddlewares section
			fieldName := "headerParam"
			validationError := wrapValidatorError(validatorErr, "WithTwoSecuritySameMethod", fieldName)
			w.Header().Set("x-RunValidatorExtension", "WithTwoSecuritySameMethod")
			w.WriteHeader(http.StatusUnprocessableEntity)
			json.NewEncoder(w).Encode(validationError)
			return
		}
		// Middlewares beforeOperationMiddlewares section
		for _, middleware := range beforeOperationMiddlewares {
			if continueOperation := middleware(w, ctx); !continueOperation {
				return
			}
		}
		// End middlewares beforeOperationMiddlewares section
		w.Header().Set("x-BeforeOperationRoutesExtension", "WithTwoSecuritySameMethod")
		value, opError := controller.WithTwoSecuritySameMethod(*headerParamRawPtr)
		for key, value := range controller.GetHeaders() {
			w.Header().Set(key, value)
		}
		w.Header().Set("x-inject", "true")
		w.Header().Set("x-ResponseHeadersExtension", "WithTwoSecuritySameMethod")
		statusCode := getStatusCode(&controller, true, opError)
		if opError != nil {
			// Middlewares onErrorMiddlewares section
			for _, middleware := range onErrorMiddlewares {
				if continueOperation := middleware(w, ctx, opError); !continueOperation {
					return
				}
			}
			// End middlewares onErrorMiddlewares section
			stdError := runtime.Rfc7807Error{
				Type:       http.StatusText(statusCode),
				Detail:     "Encountered an error during operation 'WithTwoSecuritySameMethod'",
				Status:     statusCode,
				Instance:   "/gleece/controller/error/WithTwoSecuritySameMethod",
				Extensions: map[string]string{"error": opError.Error()},
			}
			w.Header().Set("x-JsonErrorResponseExtension", "WithTwoSecuritySameMethod")
			w.WriteHeader(statusCode)
			json.NewEncoder(w).Encode(stdError)
			return
		}
		w.Header().Set("x-JsonResponseExtension", "WithTwoSecuritySameMethod")
		// Middlewares afterOperationSuccessMiddlewares section
		for _, middleware := range afterOperationSuccessMiddlewares {
			if continueOperation := middleware(w, ctx); !continueOperation {
				return
			}
		}
		// End middlewares afterOperationSuccessMiddlewares section
		w.Header().Set("x-AfterOperationRoutesExtension", "WithTwoSecuritySameMethod")
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(statusCode)
		json.NewEncoder(w).Encode(value)
		w.Header().Set("x-RouteEndRoutesExtension", "WithTwoSecuritySameMethod")
	})
	engine.Get(toChiUrl("/e2e/default-error"), func(w http.ResponseWriter, ctx *http.Request) {
		w.Header().Set("x-RouteStartRoutesExtension", "DefaultError")
		authErr := authorize(
			ctx,
			[]SecurityCheckList{
				{
					Relation: SecurityListRelationAnd,
					Checks: []runtime.SecurityCheck{
						{
							SchemaName: "securitySchemaName2",
							Scopes: []string{
								"config",
							},
						},
					},
				},
			},
		)
		if authErr != nil {
			handleAuthorizationError(w, authErr, "DefaultError")
			return
		}
		controller := E2EControllerImport.E2EController{}
		controller.InitController(ctx)
		// Middlewares beforeOperationMiddlewares section
		for _, middleware := range beforeOperationMiddlewares {
			if continueOperation := middleware(w, ctx); !continueOperation {
				return
			}
		}
		// End middlewares beforeOperationMiddlewares section
		w.Header().Set("x-BeforeOperationRoutesExtension", "DefaultError")
		opError := controller.DefaultError()
		for key, value := range controller.GetHeaders() {
			w.Header().Set(key, value)
		}
		w.Header().Set("x-inject", "true")
		w.Header().Set("x-ResponseHeadersExtension", "DefaultError")
		statusCode := getStatusCode(&controller, false, opError)
		if opError != nil {
			// Middlewares onErrorMiddlewares section
			for _, middleware := range onErrorMiddlewares {
				if continueOperation := middleware(w, ctx, opError); !continueOperation {
					return
				}
			}
			// End middlewares onErrorMiddlewares section
			stdError := runtime.Rfc7807Error{
				Type:       http.StatusText(statusCode),
				Detail:     "Encountered an error during operation 'DefaultError'",
				Status:     statusCode,
				Instance:   "/gleece/controller/error/DefaultError",
				Extensions: map[string]string{"error": opError.Error()},
			}
			w.Header().Set("x-JsonErrorResponseExtension", "DefaultError")
			w.WriteHeader(statusCode)
			json.NewEncoder(w).Encode(stdError)
			return
		}
		w.Header().Set("x-JsonResponseExtension", "DefaultError")
		// Middlewares afterOperationSuccessMiddlewares section
		for _, middleware := range afterOperationSuccessMiddlewares {
			if continueOperation := middleware(w, ctx); !continueOperation {
				return
			}
		}
		// End middlewares afterOperationSuccessMiddlewares section
		w.Header().Set("x-AfterOperationRoutesExtension", "DefaultError")
		w.WriteHeader(statusCode)
		w.Header().Set("x-RouteEndRoutesExtension", "DefaultError")
	})
	engine.Get(toChiUrl("/e2e/default-error-with-payload"), func(w http.ResponseWriter, ctx *http.Request) {
		w.Header().Set("x-RouteStartRoutesExtension", "DefaultErrorWithPayload")
		authErr := authorize(
			ctx,
			[]SecurityCheckList{
				{
					Relation: SecurityListRelationAnd,
					Checks: []runtime.SecurityCheck{
						{
							SchemaName: "securitySchemaName2",
							Scopes: []string{
								"config",
							},
						},
					},
				},
			},
		)
		if authErr != nil {
			handleAuthorizationError(w, authErr, "DefaultErrorWithPayload")
			return
		}
		controller := E2EControllerImport.E2EController{}
		controller.InitController(ctx)
		// Middlewares beforeOperationMiddlewares section
		for _, middleware := range beforeOperationMiddlewares {
			if continueOperation := middleware(w, ctx); !continueOperation {
				return
			}
		}
		// End middlewares beforeOperationMiddlewares section
		w.Header().Set("x-BeforeOperationRoutesExtension", "DefaultErrorWithPayload")
		value, opError := controller.DefaultErrorWithPayload()
		for key, value := range controller.GetHeaders() {
			w.Header().Set(key, value)
		}
		w.Header().Set("x-inject", "true")
		w.Header().Set("x-ResponseHeadersExtension", "DefaultErrorWithPayload")
		statusCode := getStatusCode(&controller, true, opError)
		if opError != nil {
			// Middlewares onErrorMiddlewares section
			for _, middleware := range onErrorMiddlewares {
				if continueOperation := middleware(w, ctx, opError); !continueOperation {
					return
				}
			}
			// End middlewares onErrorMiddlewares section
			stdError := runtime.Rfc7807Error{
				Type:       http.StatusText(statusCode),
				Detail:     "Encountered an error during operation 'DefaultErrorWithPayload'",
				Status:     statusCode,
				Instance:   "/gleece/controller/error/DefaultErrorWithPayload",
				Extensions: map[string]string{"error": opError.Error()},
			}
			w.Header().Set("x-JsonErrorResponseExtension", "DefaultErrorWithPayload")
			w.WriteHeader(statusCode)
			json.NewEncoder(w).Encode(stdError)
			return
		}
		w.Header().Set("x-JsonResponseExtension", "DefaultErrorWithPayload")
		// Middlewares afterOperationSuccessMiddlewares section
		for _, middleware := range afterOperationSuccessMiddlewares {
			if continueOperation := middleware(w, ctx); !continueOperation {
				return
			}
		}
		// End middlewares afterOperationSuccessMiddlewares section
		w.Header().Set("x-AfterOperationRoutesExtension", "DefaultErrorWithPayload")
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(statusCode)
		json.NewEncoder(w).Encode(value)
		w.Header().Set("x-RouteEndRoutesExtension", "DefaultErrorWithPayload")
	})
	engine.Get(toChiUrl("/e2e/custom-error"), func(w http.ResponseWriter, ctx *http.Request) {
		w.Header().Set("x-RouteStartRoutesExtension", "CustomError")
		authErr := authorize(
			ctx,
			[]SecurityCheckList{
				{
					Relation: SecurityListRelationAnd,
					Checks: []runtime.SecurityCheck{
						{
							SchemaName: "securitySchemaName2",
							Scopes: []string{
								"config",
							},
						},
					},
				},
			},
		)
		if authErr != nil {
			handleAuthorizationError(w, authErr, "CustomError")
			return
		}
		controller := E2EControllerImport.E2EController{}
		controller.InitController(ctx)
		// Middlewares beforeOperationMiddlewares section
		for _, middleware := range beforeOperationMiddlewares {
			if continueOperation := middleware(w, ctx); !continueOperation {
				return
			}
		}
		// End middlewares beforeOperationMiddlewares section
		w.Header().Set("x-BeforeOperationRoutesExtension", "CustomError")
		opError := controller.CustomError()
		for key, value := range controller.GetHeaders() {
			w.Header().Set(key, value)
		}
		w.Header().Set("x-inject", "true")
		w.Header().Set("x-ResponseHeadersExtension", "CustomError")
		statusCode := getStatusCode(&controller, false, opError)
		emptyErr := Response62CustomError.CustomError{}
		if opError != emptyErr {
			// Middlewares onErrorMiddlewares section
			for _, middleware := range onErrorMiddlewares {
				if continueOperation := middleware(w, ctx, opError); !continueOperation {
					return
				}
			}
			// End middlewares onErrorMiddlewares section
			w.WriteHeader(statusCode)
			json.NewEncoder(w).Encode(opError)
			return
		}
		w.Header().Set("x-JsonResponseExtension", "CustomError")
		// Middlewares afterOperationSuccessMiddlewares section
		for _, middleware := range afterOperationSuccessMiddlewares {
			if continueOperation := middleware(w, ctx); !continueOperation {
				return
			}
		}
		// End middlewares afterOperationSuccessMiddlewares section
		w.Header().Set("x-AfterOperationRoutesExtension", "CustomError")
		w.WriteHeader(statusCode)
		w.Header().Set("x-RouteEndRoutesExtension", "CustomError")
	})
	engine.Get(toChiUrl("/e2e/custom-error-ptr"), func(w http.ResponseWriter, ctx *http.Request) {
		w.Header().Set("x-RouteStartRoutesExtension", "CustomPtrError")
		authErr := authorize(
			ctx,
			[]SecurityCheckList{
				{
					Relation: SecurityListRelationAnd,
					Checks: []runtime.SecurityCheck{
						{
							SchemaName: "securitySchemaName2",
							Scopes: []string{
								"config",
							},
						},
					},
				},
			},
		)
		if authErr != nil {
			handleAuthorizationError(w, authErr, "CustomPtrError")
			return
		}
		controller := E2EControllerImport.E2EController{}
		controller.InitController(ctx)
		// Middlewares beforeOperationMiddlewares section
		for _, middleware := range beforeOperationMiddlewares {
			if continueOperation := middleware(w, ctx); !continueOperation {
				return
			}
		}
		// End middlewares beforeOperationMiddlewares section
		w.Header().Set("x-BeforeOperationRoutesExtension", "CustomPtrError")
		opError := controller.CustomPtrError()
		for key, value := range controller.GetHeaders() {
			w.Header().Set(key, value)
		}
		w.Header().Set("x-inject", "true")
		w.Header().Set("x-ResponseHeadersExtension", "CustomPtrError")
		statusCode := getStatusCode(&controller, false, opError)
		if opError != nil {
			// Middlewares onErrorMiddlewares section
			for _, middleware := range onErrorMiddlewares {
				if continueOperation := middleware(w, ctx, opError); !continueOperation {
					return
				}
			}
			// End middlewares onErrorMiddlewares section
			w.WriteHeader(statusCode)
			json.NewEncoder(w).Encode(opError)
			return
		}
		w.Header().Set("x-JsonResponseExtension", "CustomPtrError")
		// Middlewares afterOperationSuccessMiddlewares section
		for _, middleware := range afterOperationSuccessMiddlewares {
			if continueOperation := middleware(w, ctx); !continueOperation {
				return
			}
		}
		// End middlewares afterOperationSuccessMiddlewares section
		w.Header().Set("x-AfterOperationRoutesExtension", "CustomPtrError")
		w.WriteHeader(statusCode)
		w.Header().Set("x-RouteEndRoutesExtension", "CustomPtrError")
	})
	engine.Get(toChiUrl("/e2e/503-error-code"), func(w http.ResponseWriter, ctx *http.Request) {
		w.Header().Set("x-RouteStartRoutesExtension", "Error503")
		authErr := authorize(
			ctx,
			[]SecurityCheckList{
				{
					Relation: SecurityListRelationAnd,
					Checks: []runtime.SecurityCheck{
						{
							SchemaName: "securitySchemaName2",
							Scopes: []string{
								"config",
							},
						},
					},
				},
			},
		)
		if authErr != nil {
			handleAuthorizationError(w, authErr, "Error503")
			return
		}
		controller := E2EControllerImport.E2EController{}
		controller.InitController(ctx)
		// Middlewares beforeOperationMiddlewares section
		for _, middleware := range beforeOperationMiddlewares {
			if continueOperation := middleware(w, ctx); !continueOperation {
				return
			}
		}
		// End middlewares beforeOperationMiddlewares section
		w.Header().Set("x-BeforeOperationRoutesExtension", "Error503")
		opError := controller.Error503()
		for key, value := range controller.GetHeaders() {
			w.Header().Set(key, value)
		}
		w.Header().Set("x-inject", "true")
		w.Header().Set("x-ResponseHeadersExtension", "Error503")
		statusCode := getStatusCode(&controller, false, opError)
		if opError != nil {
			// Middlewares onErrorMiddlewares section
			for _, middleware := range onErrorMiddlewares {
				if continueOperation := middleware(w, ctx, opError); !continueOperation {
					return
				}
			}
			// End middlewares onErrorMiddlewares section
			stdError := runtime.Rfc7807Error{
				Type:       http.StatusText(statusCode),
				Detail:     "Encountered an error during operation 'Error503'",
				Status:     statusCode,
				Instance:   "/gleece/controller/error/Error503",
				Extensions: map[string]string{"error": opError.Error()},
			}
			w.Header().Set("x-JsonErrorResponseExtension", "Error503")
			w.WriteHeader(statusCode)
			json.NewEncoder(w).Encode(stdError)
			return
		}
		w.Header().Set("x-JsonResponseExtension", "Error503")
		// Middlewares afterOperationSuccessMiddlewares section
		for _, middleware := range afterOperationSuccessMiddlewares {
			if continueOperation := middleware(w, ctx); !continueOperation {
				return
			}
		}
		// End middlewares afterOperationSuccessMiddlewares section
		w.Header().Set("x-AfterOperationRoutesExtension", "Error503")
		w.WriteHeader(statusCode)
		w.Header().Set("x-RouteEndRoutesExtension", "Error503")
	})
	engine.Get(toChiUrl("/e2e/custom-error-503"), func(w http.ResponseWriter, ctx *http.Request) {
		w.Header().Set("x-RouteStartRoutesExtension", "CustomError503")
		authErr := authorize(
			ctx,
			[]SecurityCheckList{
				{
					Relation: SecurityListRelationAnd,
					Checks: []runtime.SecurityCheck{
						{
							SchemaName: "securitySchemaName2",
							Scopes: []string{
								"config",
							},
						},
					},
				},
			},
		)
		if authErr != nil {
			handleAuthorizationError(w, authErr, "CustomError503")
			return
		}
		controller := E2EControllerImport.E2EController{}
		controller.InitController(ctx)
		// Middlewares beforeOperationMiddlewares section
		for _, middleware := range beforeOperationMiddlewares {
			if continueOperation := middleware(w, ctx); !continueOperation {
				return
			}
		}
		// End middlewares beforeOperationMiddlewares section
		w.Header().Set("x-BeforeOperationRoutesExtension", "CustomError503")
		opError := controller.CustomError503()
		for key, value := range controller.GetHeaders() {
			w.Header().Set(key, value)
		}
		w.Header().Set("x-inject", "true")
		w.Header().Set("x-ResponseHeadersExtension", "CustomError503")
		statusCode := getStatusCode(&controller, false, opError)
		emptyErr := Response65CustomError.CustomError{}
		if opError != emptyErr {
			// Middlewares onErrorMiddlewares section
			for _, middleware := range onErrorMiddlewares {
				if continueOperation := middleware(w, ctx, opError); !continueOperation {
					return
				}
			}
			// End middlewares onErrorMiddlewares section
			w.WriteHeader(statusCode)
			json.NewEncoder(w).Encode(opError)
			return
		}
		w.Header().Set("x-JsonResponseExtension", "CustomError503")
		// Middlewares afterOperationSuccessMiddlewares section
		for _, middleware := range afterOperationSuccessMiddlewares {
			if continueOperation := middleware(w, ctx); !continueOperation {
				return
			}
		}
		// End middlewares afterOperationSuccessMiddlewares section
		w.Header().Set("x-AfterOperationRoutesExtension", "CustomError503")
		w.WriteHeader(statusCode)
		w.Header().Set("x-RouteEndRoutesExtension", "CustomError503")
	})
	engine.Get(toChiUrl("/e2e/context-access"), func(w http.ResponseWriter, ctx *http.Request) {
		w.Header().Set("x-RouteStartRoutesExtension", "ContextAccess")
		authErr := authorize(
			ctx,
			[]SecurityCheckList{
				{
					Relation: SecurityListRelationAnd,
					Checks: []runtime.SecurityCheck{
						{
							SchemaName: "securitySchemaName2",
							Scopes: []string{
								"config",
							},
						},
					},
				},
			},
		)
		if authErr != nil {
			handleAuthorizationError(w, authErr, "ContextAccess")
			return
		}
		controller := E2EControllerImport.E2EController{}
		controller.InitController(ctx)
		// Middlewares beforeOperationMiddlewares section
		for _, middleware := range beforeOperationMiddlewares {
			if continueOperation := middleware(w, ctx); !continueOperation {
				return
			}
		}
		// End middlewares beforeOperationMiddlewares section
		w.Header().Set("x-BeforeOperationRoutesExtension", "ContextAccess")
		opError := controller.ContextAccess()
		for key, value := range controller.GetHeaders() {
			w.Header().Set(key, value)
		}
		w.Header().Set("x-inject", "true")
		w.Header().Set("x-ResponseHeadersExtension", "ContextAccess")
		statusCode := getStatusCode(&controller, false, opError)
		if opError != nil {
			// Middlewares onErrorMiddlewares section
			for _, middleware := range onErrorMiddlewares {
				if continueOperation := middleware(w, ctx, opError); !continueOperation {
					return
				}
			}
			// End middlewares onErrorMiddlewares section
			stdError := runtime.Rfc7807Error{
				Type:       http.StatusText(statusCode),
				Detail:     "Encountered an error during operation 'ContextAccess'",
				Status:     statusCode,
				Instance:   "/gleece/controller/error/ContextAccess",
				Extensions: map[string]string{"error": opError.Error()},
			}
			w.Header().Set("x-JsonErrorResponseExtension", "ContextAccess")
			w.WriteHeader(statusCode)
			json.NewEncoder(w).Encode(stdError)
			return
		}
		w.Header().Set("x-JsonResponseExtension", "ContextAccess")
		// Middlewares afterOperationSuccessMiddlewares section
		for _, middleware := range afterOperationSuccessMiddlewares {
			if continueOperation := middleware(w, ctx); !continueOperation {
				return
			}
		}
		// End middlewares afterOperationSuccessMiddlewares section
		w.Header().Set("x-AfterOperationRoutesExtension", "ContextAccess")
		w.WriteHeader(statusCode)
		w.Header().Set("x-RouteEndRoutesExtension", "ContextAccess")
	})
	engine.Get(toChiUrl("/e2e/http-method"), func(w http.ResponseWriter, ctx *http.Request) {
		w.Header().Set("x-RouteStartRoutesExtension", "Get")
		authErr := authorize(
			ctx,
			[]SecurityCheckList{
				{
					Relation: SecurityListRelationAnd,
					Checks: []runtime.SecurityCheck{
						{
							SchemaName: "securitySchemaName2",
							Scopes: []string{
								"config",
							},
						},
					},
				},
			},
		)
		if authErr != nil {
			handleAuthorizationError(w, authErr, "Get")
			return
		}
		controller := E2EControllerImport.E2EController{}
		controller.InitController(ctx)
		// Middlewares beforeOperationMiddlewares section
		for _, middleware := range beforeOperationMiddlewares {
			if continueOperation := middleware(w, ctx); !continueOperation {
				return
			}
		}
		// End middlewares beforeOperationMiddlewares section
		w.Header().Set("x-BeforeOperationRoutesExtension", "Get")
		opError := controller.Get()
		for key, value := range controller.GetHeaders() {
			w.Header().Set(key, value)
		}
		w.Header().Set("x-inject", "true")
		w.Header().Set("x-ResponseHeadersExtension", "Get")
		statusCode := getStatusCode(&controller, false, opError)
		if opError != nil {
			// Middlewares onErrorMiddlewares section
			for _, middleware := range onErrorMiddlewares {
				if continueOperation := middleware(w, ctx, opError); !continueOperation {
					return
				}
			}
			// End middlewares onErrorMiddlewares section
			stdError := runtime.Rfc7807Error{
				Type:       http.StatusText(statusCode),
				Detail:     "Encountered an error during operation 'Get'",
				Status:     statusCode,
				Instance:   "/gleece/controller/error/Get",
				Extensions: map[string]string{"error": opError.Error()},
			}
			w.Header().Set("x-JsonErrorResponseExtension", "Get")
			w.WriteHeader(statusCode)
			json.NewEncoder(w).Encode(stdError)
			return
		}
		w.Header().Set("x-JsonResponseExtension", "Get")
		// Middlewares afterOperationSuccessMiddlewares section
		for _, middleware := range afterOperationSuccessMiddlewares {
			if continueOperation := middleware(w, ctx); !continueOperation {
				return
			}
		}
		// End middlewares afterOperationSuccessMiddlewares section
		w.Header().Set("x-AfterOperationRoutesExtension", "Get")
		w.WriteHeader(statusCode)
		w.Header().Set("x-RouteEndRoutesExtension", "Get")
	})
	engine.Post(toChiUrl("/e2e/http-method"), func(w http.ResponseWriter, ctx *http.Request) {
		w.Header().Set("x-RouteStartRoutesExtension", "Post")
		authErr := authorize(
			ctx,
			[]SecurityCheckList{
				{
					Relation: SecurityListRelationAnd,
					Checks: []runtime.SecurityCheck{
						{
							SchemaName: "securitySchemaName2",
							Scopes: []string{
								"config",
							},
						},
					},
				},
			},
		)
		if authErr != nil {
			handleAuthorizationError(w, authErr, "Post")
			return
		}
		controller := E2EControllerImport.E2EController{}
		controller.InitController(ctx)
		// Middlewares beforeOperationMiddlewares section
		for _, middleware := range beforeOperationMiddlewares {
			if continueOperation := middleware(w, ctx); !continueOperation {
				return
			}
		}
		// End middlewares beforeOperationMiddlewares section
		w.Header().Set("x-BeforeOperationRoutesExtension", "Post")
		opError := controller.Post()
		for key, value := range controller.GetHeaders() {
			w.Header().Set(key, value)
		}
		w.Header().Set("x-inject", "true")
		w.Header().Set("x-ResponseHeadersExtension", "Post")
		statusCode := getStatusCode(&controller, false, opError)
		if opError != nil {
			// Middlewares onErrorMiddlewares section
			for _, middleware := range onErrorMiddlewares {
				if continueOperation := middleware(w, ctx, opError); !continueOperation {
					return
				}
			}
			// End middlewares onErrorMiddlewares section
			stdError := runtime.Rfc7807Error{
				Type:       http.StatusText(statusCode),
				Detail:     "Encountered an error during operation 'Post'",
				Status:     statusCode,
				Instance:   "/gleece/controller/error/Post",
				Extensions: map[string]string{"error": opError.Error()},
			}
			w.Header().Set("x-JsonErrorResponseExtension", "Post")
			w.WriteHeader(statusCode)
			json.NewEncoder(w).Encode(stdError)
			return
		}
		w.Header().Set("x-JsonResponseExtension", "Post")
		// Middlewares afterOperationSuccessMiddlewares section
		for _, middleware := range afterOperationSuccessMiddlewares {
			if continueOperation := middleware(w, ctx); !continueOperation {
				return
			}
		}
		// End middlewares afterOperationSuccessMiddlewares section
		w.Header().Set("x-AfterOperationRoutesExtension", "Post")
		w.WriteHeader(statusCode)
		w.Header().Set("x-RouteEndRoutesExtension", "Post")
	})
	engine.Put(toChiUrl("/e2e/http-method"), func(w http.ResponseWriter, ctx *http.Request) {
		w.Header().Set("x-RouteStartRoutesExtension", "Put")
		authErr := authorize(
			ctx,
			[]SecurityCheckList{
				{
					Relation: SecurityListRelationAnd,
					Checks: []runtime.SecurityCheck{
						{
							SchemaName: "securitySchemaName2",
							Scopes: []string{
								"config",
							},
						},
					},
				},
			},
		)
		if authErr != nil {
			handleAuthorizationError(w, authErr, "Put")
			return
		}
		controller := E2EControllerImport.E2EController{}
		controller.InitController(ctx)
		// Middlewares beforeOperationMiddlewares section
		for _, middleware := range beforeOperationMiddlewares {
			if continueOperation := middleware(w, ctx); !continueOperation {
				return
			}
		}
		// End middlewares beforeOperationMiddlewares section
		w.Header().Set("x-BeforeOperationRoutesExtension", "Put")
		opError := controller.Put()
		for key, value := range controller.GetHeaders() {
			w.Header().Set(key, value)
		}
		w.Header().Set("x-inject", "true")
		w.Header().Set("x-ResponseHeadersExtension", "Put")
		statusCode := getStatusCode(&controller, false, opError)
		if opError != nil {
			// Middlewares onErrorMiddlewares section
			for _, middleware := range onErrorMiddlewares {
				if continueOperation := middleware(w, ctx, opError); !continueOperation {
					return
				}
			}
			// End middlewares onErrorMiddlewares section
			stdError := runtime.Rfc7807Error{
				Type:       http.StatusText(statusCode),
				Detail:     "Encountered an error during operation 'Put'",
				Status:     statusCode,
				Instance:   "/gleece/controller/error/Put",
				Extensions: map[string]string{"error": opError.Error()},
			}
			w.Header().Set("x-JsonErrorResponseExtension", "Put")
			w.WriteHeader(statusCode)
			json.NewEncoder(w).Encode(stdError)
			return
		}
		w.Header().Set("x-JsonResponseExtension", "Put")
		// Middlewares afterOperationSuccessMiddlewares section
		for _, middleware := range afterOperationSuccessMiddlewares {
			if continueOperation := middleware(w, ctx); !continueOperation {
				return
			}
		}
		// End middlewares afterOperationSuccessMiddlewares section
		w.Header().Set("x-AfterOperationRoutesExtension", "Put")
		w.WriteHeader(statusCode)
		w.Header().Set("x-RouteEndRoutesExtension", "Put")
	})
	engine.Delete(toChiUrl("/e2e/http-method"), func(w http.ResponseWriter, ctx *http.Request) {
		w.Header().Set("x-RouteStartRoutesExtension", "Delete")
		authErr := authorize(
			ctx,
			[]SecurityCheckList{
				{
					Relation: SecurityListRelationAnd,
					Checks: []runtime.SecurityCheck{
						{
							SchemaName: "securitySchemaName2",
							Scopes: []string{
								"config",
							},
						},
					},
				},
			},
		)
		if authErr != nil {
			handleAuthorizationError(w, authErr, "Delete")
			return
		}
		controller := E2EControllerImport.E2EController{}
		controller.InitController(ctx)
		// Middlewares beforeOperationMiddlewares section
		for _, middleware := range beforeOperationMiddlewares {
			if continueOperation := middleware(w, ctx); !continueOperation {
				return
			}
		}
		// End middlewares beforeOperationMiddlewares section
		w.Header().Set("x-BeforeOperationRoutesExtension", "Delete")
		opError := controller.Delete()
		for key, value := range controller.GetHeaders() {
			w.Header().Set(key, value)
		}
		w.Header().Set("x-inject", "true")
		w.Header().Set("x-ResponseHeadersExtension", "Delete")
		statusCode := getStatusCode(&controller, false, opError)
		if opError != nil {
			// Middlewares onErrorMiddlewares section
			for _, middleware := range onErrorMiddlewares {
				if continueOperation := middleware(w, ctx, opError); !continueOperation {
					return
				}
			}
			// End middlewares onErrorMiddlewares section
			stdError := runtime.Rfc7807Error{
				Type:       http.StatusText(statusCode),
				Detail:     "Encountered an error during operation 'Delete'",
				Status:     statusCode,
				Instance:   "/gleece/controller/error/Delete",
				Extensions: map[string]string{"error": opError.Error()},
			}
			w.Header().Set("x-JsonErrorResponseExtension", "Delete")
			w.WriteHeader(statusCode)
			json.NewEncoder(w).Encode(stdError)
			return
		}
		w.Header().Set("x-JsonResponseExtension", "Delete")
		// Middlewares afterOperationSuccessMiddlewares section
		for _, middleware := range afterOperationSuccessMiddlewares {
			if continueOperation := middleware(w, ctx); !continueOperation {
				return
			}
		}
		// End middlewares afterOperationSuccessMiddlewares section
		w.Header().Set("x-AfterOperationRoutesExtension", "Delete")
		w.WriteHeader(statusCode)
		w.Header().Set("x-RouteEndRoutesExtension", "Delete")
	})
	engine.Patch(toChiUrl("/e2e/http-method"), func(w http.ResponseWriter, ctx *http.Request) {
		w.Header().Set("x-RouteStartRoutesExtension", "Patch")
		authErr := authorize(
			ctx,
			[]SecurityCheckList{
				{
					Relation: SecurityListRelationAnd,
					Checks: []runtime.SecurityCheck{
						{
							SchemaName: "securitySchemaName2",
							Scopes: []string{
								"config",
							},
						},
					},
				},
			},
		)
		if authErr != nil {
			handleAuthorizationError(w, authErr, "Patch")
			return
		}
		controller := E2EControllerImport.E2EController{}
		controller.InitController(ctx)
		// Middlewares beforeOperationMiddlewares section
		for _, middleware := range beforeOperationMiddlewares {
			if continueOperation := middleware(w, ctx); !continueOperation {
				return
			}
		}
		// End middlewares beforeOperationMiddlewares section
		w.Header().Set("x-BeforeOperationRoutesExtension", "Patch")
		opError := controller.Patch()
		for key, value := range controller.GetHeaders() {
			w.Header().Set(key, value)
		}
		w.Header().Set("x-inject", "true")
		w.Header().Set("x-ResponseHeadersExtension", "Patch")
		statusCode := getStatusCode(&controller, false, opError)
		if opError != nil {
			// Middlewares onErrorMiddlewares section
			for _, middleware := range onErrorMiddlewares {
				if continueOperation := middleware(w, ctx, opError); !continueOperation {
					return
				}
			}
			// End middlewares onErrorMiddlewares section
			stdError := runtime.Rfc7807Error{
				Type:       http.StatusText(statusCode),
				Detail:     "Encountered an error during operation 'Patch'",
				Status:     statusCode,
				Instance:   "/gleece/controller/error/Patch",
				Extensions: map[string]string{"error": opError.Error()},
			}
			w.Header().Set("x-JsonErrorResponseExtension", "Patch")
			w.WriteHeader(statusCode)
			json.NewEncoder(w).Encode(stdError)
			return
		}
		w.Header().Set("x-JsonResponseExtension", "Patch")
		// Middlewares afterOperationSuccessMiddlewares section
		for _, middleware := range afterOperationSuccessMiddlewares {
			if continueOperation := middleware(w, ctx); !continueOperation {
				return
			}
		}
		// End middlewares afterOperationSuccessMiddlewares section
		w.Header().Set("x-AfterOperationRoutesExtension", "Patch")
		w.WriteHeader(statusCode)
		w.Header().Set("x-RouteEndRoutesExtension", "Patch")
	})
	engine.Get(toChiUrl("/e2e/template-context-1"), func(w http.ResponseWriter, ctx *http.Request) {
		w.Header().Set("x-RouteStartRoutesExtension", "TemplateContext1")
		authErr := authorize(
			ctx,
			[]SecurityCheckList{
				{
					Relation: SecurityListRelationAnd,
					Checks: []runtime.SecurityCheck{
						{
							SchemaName: "securitySchemaName2",
							Scopes: []string{
								"config",
							},
						},
					},
				},
			},
		)
		if authErr != nil {
			handleAuthorizationError(w, authErr, "TemplateContext1")
			return
		}
		controller := E2EControllerImport.E2EController{}
		controller.InitController(ctx)
		// Middlewares beforeOperationMiddlewares section
		for _, middleware := range beforeOperationMiddlewares {
			if continueOperation := middleware(w, ctx); !continueOperation {
				return
			}
		}
		// End middlewares beforeOperationMiddlewares section
		w.Header().Set("x-BeforeOperationRoutesExtension", "TemplateContext1")
		value, opError := controller.TemplateContext1()
		for key, value := range controller.GetHeaders() {
			w.Header().Set(key, value)
		}
		w.Header().Set("x-inject", "true")
		w.Header().Set("x-ResponseHeadersExtension", "TemplateContext1")
		statusCode := getStatusCode(&controller, true, opError)
		if opError != nil {
			// Middlewares onErrorMiddlewares section
			for _, middleware := range onErrorMiddlewares {
				if continueOperation := middleware(w, ctx, opError); !continueOperation {
					return
				}
			}
			// End middlewares onErrorMiddlewares section
			stdError := runtime.Rfc7807Error{
				Type:       http.StatusText(statusCode),
				Detail:     "Encountered an error during operation 'TemplateContext1'",
				Status:     statusCode,
				Instance:   "/gleece/controller/error/TemplateContext1",
				Extensions: map[string]string{"error": opError.Error()},
			}
			w.Header().Set("x-JsonErrorResponseExtension", "TemplateContext1")
			w.WriteHeader(statusCode)
			json.NewEncoder(w).Encode(stdError)
			return
		}
		w.Header().Set("x-JsonResponseExtension", "TemplateContext1")
		// Middlewares afterOperationSuccessMiddlewares section
		for _, middleware := range afterOperationSuccessMiddlewares {
			if continueOperation := middleware(w, ctx); !continueOperation {
				return
			}
		}
		// End middlewares afterOperationSuccessMiddlewares section
		w.Header().Set("x-AfterOperationRoutesExtension", "TemplateContext1")
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(statusCode)
		json.NewEncoder(w).Encode(value)
		w.Header().Set("x-RouteEndRoutesExtension", "TemplateContext1")
		w.Header().Set("x-level", "high")
	})
	engine.Get(toChiUrl("/e2e/template-context-2"), func(w http.ResponseWriter, ctx *http.Request) {
		w.Header().Set("x-RouteStartRoutesExtension", "TemplateContext2")
		authErr := authorize(
			ctx,
			[]SecurityCheckList{
				{
					Relation: SecurityListRelationAnd,
					Checks: []runtime.SecurityCheck{
						{
							SchemaName: "securitySchemaName2",
							Scopes: []string{
								"config",
							},
						},
					},
				},
			},
		)
		if authErr != nil {
			handleAuthorizationError(w, authErr, "TemplateContext2")
			return
		}
		controller := E2EControllerImport.E2EController{}
		controller.InitController(ctx)
		// Middlewares beforeOperationMiddlewares section
		for _, middleware := range beforeOperationMiddlewares {
			if continueOperation := middleware(w, ctx); !continueOperation {
				return
			}
		}
		// End middlewares beforeOperationMiddlewares section
		w.Header().Set("x-BeforeOperationRoutesExtension", "TemplateContext2")
		value, opError := controller.TemplateContext2()
		for key, value := range controller.GetHeaders() {
			w.Header().Set(key, value)
		}
		w.Header().Set("x-inject", "true")
		w.Header().Set("x-ResponseHeadersExtension", "TemplateContext2")
		statusCode := getStatusCode(&controller, true, opError)
		if opError != nil {
			// Middlewares onErrorMiddlewares section
			for _, middleware := range onErrorMiddlewares {
				if continueOperation := middleware(w, ctx, opError); !continueOperation {
					return
				}
			}
			// End middlewares onErrorMiddlewares section
			stdError := runtime.Rfc7807Error{
				Type:       http.StatusText(statusCode),
				Detail:     "Encountered an error during operation 'TemplateContext2'",
				Status:     statusCode,
				Instance:   "/gleece/controller/error/TemplateContext2",
				Extensions: map[string]string{"error": opError.Error()},
			}
			w.Header().Set("x-JsonErrorResponseExtension", "TemplateContext2")
			w.WriteHeader(statusCode)
			json.NewEncoder(w).Encode(stdError)
			return
		}
		w.Header().Set("x-JsonResponseExtension", "TemplateContext2")
		// Middlewares afterOperationSuccessMiddlewares section
		for _, middleware := range afterOperationSuccessMiddlewares {
			if continueOperation := middleware(w, ctx); !continueOperation {
				return
			}
		}
		// End middlewares afterOperationSuccessMiddlewares section
		w.Header().Set("x-AfterOperationRoutesExtension", "TemplateContext2")
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(statusCode)
		json.NewEncoder(w).Encode(value)
		w.Header().Set("x-RouteEndRoutesExtension", "TemplateContext2")
		w.Header().Set("x-mode", "100")
		w.Header().Set("x-level", "low")
	})
	engine.Post(toChiUrl("/e2e/form"), func(w http.ResponseWriter, ctx *http.Request) {
		w.Header().Set("x-RouteStartRoutesExtension", "TestForm")
		authErr := authorize(
			ctx,
			[]SecurityCheckList{
				{
					Relation: SecurityListRelationAnd,
					Checks: []runtime.SecurityCheck{
						{
							SchemaName: "securitySchemaName2",
							Scopes: []string{
								"config",
							},
						},
					},
				},
			},
		)
		if authErr != nil {
			handleAuthorizationError(w, authErr, "TestForm")
			return
		}
		controller := E2EControllerImport.E2EController{}
		controller.InitController(ctx)
		ctx.ParseForm()
		var item1RawPtr *string = nil
		item1RawArr, isitem1Exists := ctx.PostForm["item1"]
		item1Raw := ""
		if isitem1Exists {
			item1Raw = item1RawArr[0] // Get first value since form values are slices
		}
		if isitem1Exists {
			item1 := item1Raw
			item1RawPtr = &item1
		}
		if validatorErr := validatorInstance.Var(item1RawPtr, "required"); validatorErr != nil {
			// Middlewares onInputValidationMiddlewares section
			for _, middleware := range onInputValidationMiddlewares {
				if continueOperation := middleware(w, ctx, validatorErr); !continueOperation {
					return
				}
			}
			// End middlewares onInputValidationMiddlewares section
			fieldName := "item1"
			validationError := wrapValidatorError(validatorErr, "TestForm", fieldName)
			w.Header().Set("x-RunValidatorExtension", "TestForm")
			w.WriteHeader(http.StatusUnprocessableEntity)
			json.NewEncoder(w).Encode(validationError)
			return
		}
		ctx.ParseForm()
		var item2RawPtr *string = nil
		item2RawArr, isitem2Exists := ctx.PostForm["item2"]
		item2Raw := ""
		if isitem2Exists {
			item2Raw = item2RawArr[0] // Get first value since form values are slices
		}
		if isitem2Exists {
			item2 := item2Raw
			item2RawPtr = &item2
		}
		if validatorErr := validatorInstance.Var(item2RawPtr, "required"); validatorErr != nil {
			// Middlewares onInputValidationMiddlewares section
			for _, middleware := range onInputValidationMiddlewares {
				if continueOperation := middleware(w, ctx, validatorErr); !continueOperation {
					return
				}
			}
			// End middlewares onInputValidationMiddlewares section
			fieldName := "item2"
			validationError := wrapValidatorError(validatorErr, "TestForm", fieldName)
			w.Header().Set("x-RunValidatorExtension", "TestForm")
			w.WriteHeader(http.StatusUnprocessableEntity)
			json.NewEncoder(w).Encode(validationError)
			return
		}
		// Middlewares beforeOperationMiddlewares section
		for _, middleware := range beforeOperationMiddlewares {
			if continueOperation := middleware(w, ctx); !continueOperation {
				return
			}
		}
		// End middlewares beforeOperationMiddlewares section
		w.Header().Set("x-BeforeOperationRoutesExtension", "TestForm")
		value, opError := controller.TestForm(*item1RawPtr, *item2RawPtr)
		for key, value := range controller.GetHeaders() {
			w.Header().Set(key, value)
		}
		w.Header().Set("x-inject", "true")
		w.Header().Set("x-ResponseHeadersExtension", "TestForm")
		statusCode := getStatusCode(&controller, true, opError)
		if opError != nil {
			// Middlewares onErrorMiddlewares section
			for _, middleware := range onErrorMiddlewares {
				if continueOperation := middleware(w, ctx, opError); !continueOperation {
					return
				}
			}
			// End middlewares onErrorMiddlewares section
			stdError := runtime.Rfc7807Error{
				Type:       http.StatusText(statusCode),
				Detail:     "Encountered an error during operation 'TestForm'",
				Status:     statusCode,
				Instance:   "/gleece/controller/error/TestForm",
				Extensions: map[string]string{"error": opError.Error()},
			}
			w.Header().Set("x-JsonErrorResponseExtension", "TestForm")
			w.WriteHeader(statusCode)
			json.NewEncoder(w).Encode(stdError)
			return
		}
		w.Header().Set("x-JsonResponseExtension", "TestForm")
		// Middlewares afterOperationSuccessMiddlewares section
		for _, middleware := range afterOperationSuccessMiddlewares {
			if continueOperation := middleware(w, ctx); !continueOperation {
				return
			}
		}
		// End middlewares afterOperationSuccessMiddlewares section
		w.Header().Set("x-AfterOperationRoutesExtension", "TestForm")
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(statusCode)
		json.NewEncoder(w).Encode(value)
		w.Header().Set("x-RouteEndRoutesExtension", "TestForm")
	})
	engine.Post(toChiUrl("/e2e/test-response-validation"), func(w http.ResponseWriter, ctx *http.Request) {
		w.Header().Set("x-RouteStartRoutesExtension", "TestResponseValidation")
		authErr := authorize(
			ctx,
			[]SecurityCheckList{
				{
					Relation: SecurityListRelationAnd,
					Checks: []runtime.SecurityCheck{
						{
							SchemaName: "securitySchemaName2",
							Scopes: []string{
								"config",
							},
						},
					},
				},
			},
		)
		if authErr != nil {
			handleAuthorizationError(w, authErr, "TestResponseValidation")
			return
		}
		controller := E2EControllerImport.E2EController{}
		controller.InitController(ctx)
		// Middlewares beforeOperationMiddlewares section
		for _, middleware := range beforeOperationMiddlewares {
			if continueOperation := middleware(w, ctx); !continueOperation {
				return
			}
		}
		// End middlewares beforeOperationMiddlewares section
		w.Header().Set("x-BeforeOperationRoutesExtension", "TestResponseValidation")
		value, opError := controller.TestResponseValidation()
		for key, value := range controller.GetHeaders() {
			w.Header().Set(key, value)
		}
		w.Header().Set("x-inject", "true")
		w.Header().Set("x-ResponseHeadersExtension", "TestResponseValidation")
		statusCode := getStatusCode(&controller, true, opError)
		if opError != nil {
			// Middlewares onErrorMiddlewares section
			for _, middleware := range onErrorMiddlewares {
				if continueOperation := middleware(w, ctx, opError); !continueOperation {
					return
				}
			}
			// End middlewares onErrorMiddlewares section
			stdError := runtime.Rfc7807Error{
				Type:       http.StatusText(statusCode),
				Detail:     "Encountered an error during operation 'TestResponseValidation'",
				Status:     statusCode,
				Instance:   "/gleece/controller/error/TestResponseValidation",
				Extensions: map[string]string{"error": opError.Error()},
			}
			w.Header().Set("x-JsonErrorResponseExtension", "TestResponseValidation")
			w.WriteHeader(statusCode)
			json.NewEncoder(w).Encode(stdError)
			return
		}
		w.Header().Set("x-JsonResponseExtension", "TestResponseValidation")
		var outputValidationErr error
		outputValidationErr = validatorInstance.Struct(value)
		if outputValidationErr != nil {
			// Middlewares onOutputValidationMiddlewares section
			for _, middleware := range onOutputValidationMiddlewares {
				if continueOperation := middleware(w, ctx, outputValidationErr); !continueOperation {
					return
				}
			}
			// End middlewares onOutputValidationMiddlewares section
			outputValidationStatusCode := http.StatusInternalServerError
			outputValidationRfc7807Error := runtime.Rfc7807Error{
				Type:       http.StatusText(outputValidationStatusCode),
				Detail:     "Encountered an error during operation 'TestResponseValidation'",
				Status:     outputValidationStatusCode,
				Instance:   "/gleece/controller/error/TestResponseValidation",
				Extensions: map[string]string{},
			}
			w.Header().Set("Content-Type", "application/json")
			w.WriteHeader(outputValidationStatusCode)
			json.NewEncoder(w).Encode(outputValidationRfc7807Error)
			return
		}
		// Middlewares afterOperationSuccessMiddlewares section
		for _, middleware := range afterOperationSuccessMiddlewares {
			if continueOperation := middleware(w, ctx); !continueOperation {
				return
			}
		}
		// End middlewares afterOperationSuccessMiddlewares section
		w.Header().Set("x-AfterOperationRoutesExtension", "TestResponseValidation")
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(statusCode)
		json.NewEncoder(w).Encode(value)
		w.Header().Set("x-RouteEndRoutesExtension", "TestResponseValidation")
	})
	engine.Post(toChiUrl("/e2e/test-response-validation-ptr"), func(w http.ResponseWriter, ctx *http.Request) {
		w.Header().Set("x-RouteStartRoutesExtension", "TestResponseValidationPtr")
		authErr := authorize(
			ctx,
			[]SecurityCheckList{
				{
					Relation: SecurityListRelationAnd,
					Checks: []runtime.SecurityCheck{
						{
							SchemaName: "securitySchemaName2",
							Scopes: []string{
								"config",
							},
						},
					},
				},
			},
		)
		if authErr != nil {
			handleAuthorizationError(w, authErr, "TestResponseValidationPtr")
			return
		}
		controller := E2EControllerImport.E2EController{}
		controller.InitController(ctx)
		// Middlewares beforeOperationMiddlewares section
		for _, middleware := range beforeOperationMiddlewares {
			if continueOperation := middleware(w, ctx); !continueOperation {
				return
			}
		}
		// End middlewares beforeOperationMiddlewares section
		w.Header().Set("x-BeforeOperationRoutesExtension", "TestResponseValidationPtr")
		value, opError := controller.TestResponseValidationPtr()
		for key, value := range controller.GetHeaders() {
			w.Header().Set(key, value)
		}
		w.Header().Set("x-inject", "true")
		w.Header().Set("x-ResponseHeadersExtension", "TestResponseValidationPtr")
		statusCode := getStatusCode(&controller, true, opError)
		if opError != nil {
			// Middlewares onErrorMiddlewares section
			for _, middleware := range onErrorMiddlewares {
				if continueOperation := middleware(w, ctx, opError); !continueOperation {
					return
				}
			}
			// End middlewares onErrorMiddlewares section
			stdError := runtime.Rfc7807Error{
				Type:       http.StatusText(statusCode),
				Detail:     "Encountered an error during operation 'TestResponseValidationPtr'",
				Status:     statusCode,
				Instance:   "/gleece/controller/error/TestResponseValidationPtr",
				Extensions: map[string]string{"error": opError.Error()},
			}
			w.Header().Set("x-JsonErrorResponseExtension", "TestResponseValidationPtr")
			w.WriteHeader(statusCode)
			json.NewEncoder(w).Encode(stdError)
			return
		}
		w.Header().Set("x-JsonResponseExtension", "TestResponseValidationPtr")
		var outputValidationErr error
		if value == nil {
			outputValidationErr = fmt.Errorf("Response payload is nil")
		} else {
			outputValidationErr = validatorInstance.Struct(value)
		}
		if outputValidationErr != nil {
			// Middlewares onOutputValidationMiddlewares section
			for _, middleware := range onOutputValidationMiddlewares {
				if continueOperation := middleware(w, ctx, outputValidationErr); !continueOperation {
					return
				}
			}
			// End middlewares onOutputValidationMiddlewares section
			outputValidationStatusCode := http.StatusInternalServerError
			outputValidationRfc7807Error := runtime.Rfc7807Error{
				Type:       http.StatusText(outputValidationStatusCode),
				Detail:     "Encountered an error during operation 'TestResponseValidationPtr'",
				Status:     outputValidationStatusCode,
				Instance:   "/gleece/controller/error/TestResponseValidationPtr",
				Extensions: map[string]string{},
			}
			w.Header().Set("Content-Type", "application/json")
			w.WriteHeader(outputValidationStatusCode)
			json.NewEncoder(w).Encode(outputValidationRfc7807Error)
			return
		}
		// Middlewares afterOperationSuccessMiddlewares section
		for _, middleware := range afterOperationSuccessMiddlewares {
			if continueOperation := middleware(w, ctx); !continueOperation {
				return
			}
		}
		// End middlewares afterOperationSuccessMiddlewares section
		w.Header().Set("x-AfterOperationRoutesExtension", "TestResponseValidationPtr")
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(statusCode)
		json.NewEncoder(w).Encode(value)
		w.Header().Set("x-RouteEndRoutesExtension", "TestResponseValidationPtr")
	})
	engine.Post(toChiUrl("/e2e/test-response-validation-null"), func(w http.ResponseWriter, ctx *http.Request) {
		w.Header().Set("x-RouteStartRoutesExtension", "TestResponseValidationNull")
		authErr := authorize(
			ctx,
			[]SecurityCheckList{
				{
					Relation: SecurityListRelationAnd,
					Checks: []runtime.SecurityCheck{
						{
							SchemaName: "securitySchemaName2",
							Scopes: []string{
								"config",
							},
						},
					},
				},
			},
		)
		if authErr != nil {
			handleAuthorizationError(w, authErr, "TestResponseValidationNull")
			return
		}
		controller := E2EControllerImport.E2EController{}
		controller.InitController(ctx)
		// Middlewares beforeOperationMiddlewares section
		for _, middleware := range beforeOperationMiddlewares {
			if continueOperation := middleware(w, ctx); !continueOperation {
				return
			}
		}
		// End middlewares beforeOperationMiddlewares section
		w.Header().Set("x-BeforeOperationRoutesExtension", "TestResponseValidationNull")
		value, opError := controller.TestResponseValidationNull()
		for key, value := range controller.GetHeaders() {
			w.Header().Set(key, value)
		}
		w.Header().Set("x-inject", "true")
		w.Header().Set("x-ResponseHeadersExtension", "TestResponseValidationNull")
		statusCode := getStatusCode(&controller, true, opError)
		if opError != nil {
			// Middlewares onErrorMiddlewares section
			for _, middleware := range onErrorMiddlewares {
				if continueOperation := middleware(w, ctx, opError); !continueOperation {
					return
				}
			}
			// End middlewares onErrorMiddlewares section
			stdError := runtime.Rfc7807Error{
				Type:       http.StatusText(statusCode),
				Detail:     "Encountered an error during operation 'TestResponseValidationNull'",
				Status:     statusCode,
				Instance:   "/gleece/controller/error/TestResponseValidationNull",
				Extensions: map[string]string{"error": opError.Error()},
			}
			w.Header().Set("x-JsonErrorResponseExtension", "TestResponseValidationNull")
			w.WriteHeader(statusCode)
			json.NewEncoder(w).Encode(stdError)
			return
		}
		w.Header().Set("x-JsonResponseExtension", "TestResponseValidationNull")
		var outputValidationErr error
		if value == nil {
			outputValidationErr = fmt.Errorf("Response payload is nil")
		} else {
			outputValidationErr = validatorInstance.Struct(value)
		}
		if outputValidationErr != nil {
			// Middlewares onOutputValidationMiddlewares section
			for _, middleware := range onOutputValidationMiddlewares {
				if continueOperation := middleware(w, ctx, outputValidationErr); !continueOperation {
					return
				}
			}
			// End middlewares onOutputValidationMiddlewares section
			outputValidationStatusCode := http.StatusInternalServerError
			outputValidationRfc7807Error := runtime.Rfc7807Error{
				Type:       http.StatusText(outputValidationStatusCode),
				Detail:     "Encountered an error during operation 'TestResponseValidationNull'",
				Status:     outputValidationStatusCode,
				Instance:   "/gleece/controller/error/TestResponseValidationNull",
				Extensions: map[string]string{},
			}
			w.Header().Set("Content-Type", "application/json")
			w.WriteHeader(outputValidationStatusCode)
			json.NewEncoder(w).Encode(outputValidationRfc7807Error)
			return
		}
		// Middlewares afterOperationSuccessMiddlewares section
		for _, middleware := range afterOperationSuccessMiddlewares {
			if continueOperation := middleware(w, ctx); !continueOperation {
				return
			}
		}
		// End middlewares afterOperationSuccessMiddlewares section
		w.Header().Set("x-AfterOperationRoutesExtension", "TestResponseValidationNull")
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(statusCode)
		json.NewEncoder(w).Encode(value)
		w.Header().Set("x-RouteEndRoutesExtension", "TestResponseValidationNull")
	})
	engine.Post(toChiUrl("/e2e/test-primitive-conversions"), func(w http.ResponseWriter, ctx *http.Request) {
		w.Header().Set("x-RouteStartRoutesExtension", "TestPrimitiveConversions")
		authErr := authorize(
			ctx,
			[]SecurityCheckList{
				{
					Relation: SecurityListRelationAnd,
					Checks: []runtime.SecurityCheck{
						{
							SchemaName: "securitySchemaName2",
							Scopes: []string{
								"config",
							},
						},
					},
				},
			},
		)
		if authErr != nil {
			handleAuthorizationError(w, authErr, "TestPrimitiveConversions")
			return
		}
		controller := E2EControllerImport.E2EController{}
		controller.InitController(ctx)
		var value1RawPtr *int64 = nil
		value1Raw := ctx.URL.Query().Get("value1")
		isvalue1Exists := ctx.URL.Query().Has("value1")
		if isvalue1Exists {
			value1Uint64, conversionErr := strconv.ParseInt(value1Raw, 10, 64)
			if conversionErr != nil {
				// Middlewares onInputValidationMiddlewares section
				for _, middleware := range onInputValidationMiddlewares {
					if continueOperation := middleware(w, ctx, conversionErr); !continueOperation {
						return
					}
				}
				// End middlewares onInputValidationMiddlewares section
				validationError := runtime.Rfc7807Error{
					Type: http.StatusText(http.StatusUnprocessableEntity),
					Detail: fmt.Sprintf(
						"A request was made to operation 'TestPrimitiveConversions' but parameter '%s' was not properly sent - Expected %s but got %s",
						"value1",
						"int64",
						reflect.TypeOf(value1Raw).String(),
					),
					Status:     http.StatusUnprocessableEntity,
					Instance:   "/gleece/validation/error/TestPrimitiveConversions",
					Extensions: map[string]string{"error": conversionErr.Error()},
				}
				w.Header().Set("x-ParamsValidationErrorResponseExtension", "TestPrimitiveConversions")
				w.WriteHeader(http.StatusUnprocessableEntity)
				json.NewEncoder(w).Encode(validationError)
				return
			}
			value1 := int64(value1Uint64)
			value1RawPtr = &value1
		}
		if validatorErr := validatorInstance.Var(value1RawPtr, "required"); validatorErr != nil {
			// Middlewares onInputValidationMiddlewares section
			for _, middleware := range onInputValidationMiddlewares {
				if continueOperation := middleware(w, ctx, validatorErr); !continueOperation {
					return
				}
			}
			// End middlewares onInputValidationMiddlewares section
			fieldName := "value1"
			validationError := wrapValidatorError(validatorErr, "TestPrimitiveConversions", fieldName)
			w.Header().Set("x-RunValidatorExtension", "TestPrimitiveConversions")
			w.WriteHeader(http.StatusUnprocessableEntity)
			json.NewEncoder(w).Encode(validationError)
			return
		}
		var value2RawPtr *bool = nil
		value2Raw := ctx.URL.Query().Get("value2")
		isvalue2Exists := ctx.URL.Query().Has("value2")
		if isvalue2Exists {
			value2, conversionErr := strconv.ParseBool(value2Raw)
			if conversionErr != nil {
				// Middlewares onInputValidationMiddlewares section
				for _, middleware := range onInputValidationMiddlewares {
					if continueOperation := middleware(w, ctx, conversionErr); !continueOperation {
						return
					}
				}
				// End middlewares onInputValidationMiddlewares section
				validationError := runtime.Rfc7807Error{
					Type: http.StatusText(http.StatusUnprocessableEntity),
					Detail: fmt.Sprintf(
						"A request was made to operation 'TestPrimitiveConversions' but parameter '%s' was not properly sent - Expected %s but got %s",
						"value2",
						"bool",
						reflect.TypeOf(value2Raw).String(),
					),
					Status:     http.StatusUnprocessableEntity,
					Instance:   "/gleece/validation/error/TestPrimitiveConversions",
					Extensions: map[string]string{"error": conversionErr.Error()},
				}
				w.Header().Set("x-ParamsValidationErrorResponseExtension", "TestPrimitiveConversions")
				w.WriteHeader(http.StatusUnprocessableEntity)
				json.NewEncoder(w).Encode(validationError)
				return
			}
			value2RawPtr = &value2
		}
		if validatorErr := validatorInstance.Var(value2RawPtr, "required"); validatorErr != nil {
			// Middlewares onInputValidationMiddlewares section
			for _, middleware := range onInputValidationMiddlewares {
				if continueOperation := middleware(w, ctx, validatorErr); !continueOperation {
					return
				}
			}
			// End middlewares onInputValidationMiddlewares section
			fieldName := "value2"
			validationError := wrapValidatorError(validatorErr, "TestPrimitiveConversions", fieldName)
			w.Header().Set("x-RunValidatorExtension", "TestPrimitiveConversions")
			w.WriteHeader(http.StatusUnprocessableEntity)
			json.NewEncoder(w).Encode(validationError)
			return
		}
		var value3RawPtr *int = nil
		value3Raw := ctx.URL.Query().Get("value3")
		isvalue3Exists := ctx.URL.Query().Has("value3")
		if isvalue3Exists {
			value3Uint64, conversionErr := strconv.Atoi(value3Raw)
			if conversionErr != nil {
				// Middlewares onInputValidationMiddlewares section
				for _, middleware := range onInputValidationMiddlewares {
					if continueOperation := middleware(w, ctx, conversionErr); !continueOperation {
						return
					}
				}
				// End middlewares onInputValidationMiddlewares section
				validationError := runtime.Rfc7807Error{
					Type: http.StatusText(http.StatusUnprocessableEntity),
					Detail: fmt.Sprintf(
						"A request was made to operation 'TestPrimitiveConversions' but parameter '%s' was not properly sent - Expected %s but got %s",
						"value3",
						"int",
						reflect.TypeOf(value3Raw).String(),
					),
					Status:     http.StatusUnprocessableEntity,
					Instance:   "/gleece/validation/error/TestPrimitiveConversions",
					Extensions: map[string]string{"error": conversionErr.Error()},
				}
				w.Header().Set("x-ParamsValidationErrorResponseExtension", "TestPrimitiveConversions")
				w.WriteHeader(http.StatusUnprocessableEntity)
				json.NewEncoder(w).Encode(validationError)
				return
			}
			value3 := int(value3Uint64)
			value3RawPtr = &value3
		}
		if validatorErr := validatorInstance.Var(value3RawPtr, "required"); validatorErr != nil {
			// Middlewares onInputValidationMiddlewares section
			for _, middleware := range onInputValidationMiddlewares {
				if continueOperation := middleware(w, ctx, validatorErr); !continueOperation {
					return
				}
			}
			// End middlewares onInputValidationMiddlewares section
			fieldName := "value3"
			validationError := wrapValidatorError(validatorErr, "TestPrimitiveConversions", fieldName)
			w.Header().Set("x-RunValidatorExtension", "TestPrimitiveConversions")
			w.WriteHeader(http.StatusUnprocessableEntity)
			json.NewEncoder(w).Encode(validationError)
			return
		}
		var value4RawPtr *float64 = nil
		value4Raw := ctx.URL.Query().Get("value4")
		isvalue4Exists := ctx.URL.Query().Has("value4")
		if isvalue4Exists {
			value4, conversionErr := strconv.ParseFloat(value4Raw, 64)
			if conversionErr != nil {
				// Middlewares onInputValidationMiddlewares section
				for _, middleware := range onInputValidationMiddlewares {
					if continueOperation := middleware(w, ctx, conversionErr); !continueOperation {
						return
					}
				}
				// End middlewares onInputValidationMiddlewares section
				validationError := runtime.Rfc7807Error{
					Type: http.StatusText(http.StatusUnprocessableEntity),
					Detail: fmt.Sprintf(
						"A request was made to operation 'TestPrimitiveConversions' but parameter '%s' was not properly sent - Expected %s but got %s",
						"value4",
						"float64",
						reflect.TypeOf(value4Raw).String(),
					),
					Status:     http.StatusUnprocessableEntity,
					Instance:   "/gleece/validation/error/TestPrimitiveConversions",
					Extensions: map[string]string{"error": conversionErr.Error()},
				}
				w.Header().Set("x-ParamsValidationErrorResponseExtension", "TestPrimitiveConversions")
				w.WriteHeader(http.StatusUnprocessableEntity)
				json.NewEncoder(w).Encode(validationError)
				return
			}
			value4RawPtr = &value4
		}
		if validatorErr := validatorInstance.Var(value4RawPtr, "required"); validatorErr != nil {
			// Middlewares onInputValidationMiddlewares section
			for _, middleware := range onInputValidationMiddlewares {
				if continueOperation := middleware(w, ctx, validatorErr); !continueOperation {
					return
				}
			}
			// End middlewares onInputValidationMiddlewares section
			fieldName := "value4"
			validationError := wrapValidatorError(validatorErr, "TestPrimitiveConversions", fieldName)
			w.Header().Set("x-RunValidatorExtension", "TestPrimitiveConversions")
			w.WriteHeader(http.StatusUnprocessableEntity)
			json.NewEncoder(w).Encode(validationError)
			return
		}
		// Middlewares beforeOperationMiddlewares section
		for _, middleware := range beforeOperationMiddlewares {
			if continueOperation := middleware(w, ctx); !continueOperation {
				return
			}
		}
		// End middlewares beforeOperationMiddlewares section
		w.Header().Set("x-BeforeOperationRoutesExtension", "TestPrimitiveConversions")
		value, opError := controller.TestPrimitiveConversions(*value1RawPtr, *value2RawPtr, *value3RawPtr, *value4RawPtr)
		for key, value := range controller.GetHeaders() {
			w.Header().Set(key, value)
		}
		w.Header().Set("x-inject", "true")
		w.Header().Set("x-ResponseHeadersExtension", "TestPrimitiveConversions")
		statusCode := getStatusCode(&controller, true, opError)
		if opError != nil {
			// Middlewares onErrorMiddlewares section
			for _, middleware := range onErrorMiddlewares {
				if continueOperation := middleware(w, ctx, opError); !continueOperation {
					return
				}
			}
			// End middlewares onErrorMiddlewares section
			stdError := runtime.Rfc7807Error{
				Type:       http.StatusText(statusCode),
				Detail:     "Encountered an error during operation 'TestPrimitiveConversions'",
				Status:     statusCode,
				Instance:   "/gleece/controller/error/TestPrimitiveConversions",
				Extensions: map[string]string{"error": opError.Error()},
			}
			w.Header().Set("x-JsonErrorResponseExtension", "TestPrimitiveConversions")
			w.WriteHeader(statusCode)
			json.NewEncoder(w).Encode(stdError)
			return
		}
		w.Header().Set("x-JsonResponseExtension", "TestPrimitiveConversions")
		// Middlewares afterOperationSuccessMiddlewares section
		for _, middleware := range afterOperationSuccessMiddlewares {
			if continueOperation := middleware(w, ctx); !continueOperation {
				return
			}
		}
		// End middlewares afterOperationSuccessMiddlewares section
		w.Header().Set("x-AfterOperationRoutesExtension", "TestPrimitiveConversions")
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(statusCode)
		json.NewEncoder(w).Encode(value)
		w.Header().Set("x-RouteEndRoutesExtension", "TestPrimitiveConversions")
	})
	// E2EClassSecController
	engine.Get(toChiUrl("/e2e/with-default-class-security"), func(w http.ResponseWriter, ctx *http.Request) {
		w.Header().Set("x-RouteStartRoutesExtension", "WithDefaultClassSecurity")
		authErr := authorize(
			ctx,
			[]SecurityCheckList{
				{
					Relation: SecurityListRelationAnd,
					Checks: []runtime.SecurityCheck{
						{
							SchemaName: "securitySchemaName",
							Scopes: []string{
								"class",
							},
						},
					},
				},
			},
		)
		if authErr != nil {
			handleAuthorizationError(w, authErr, "WithDefaultClassSecurity")
			return
		}
		controller := E2EClassSecControllerImport.E2EClassSecController{}
		controller.InitController(ctx)
		var headerParamRawPtr *string = nil
		headerParamRaw := ctx.Header.Get("x-test-scopes")
		_, isheaderParamExists := ctx.Header["x-test-scopes"]
		if !isheaderParamExists {
			// In echo, the ctx..Header["key"] is not 100% reliable, so we need other check, but only if is was not found in the first method
			headerValues := ctx.Header.Values("x-test-scopes")
			isheaderParamExists = len(headerValues) > 0
		}
		if isheaderParamExists {
			headerParam := headerParamRaw
			headerParamRawPtr = &headerParam
		}
		if validatorErr := validatorInstance.Var(headerParamRawPtr, "required"); validatorErr != nil {
			// Middlewares onInputValidationMiddlewares section
			for _, middleware := range onInputValidationMiddlewares {
				if continueOperation := middleware(w, ctx, validatorErr); !continueOperation {
					return
				}
			}
			// End middlewares onInputValidationMiddlewares section
			fieldName := "headerParam"
			validationError := wrapValidatorError(validatorErr, "WithDefaultClassSecurity", fieldName)
			w.Header().Set("x-RunValidatorExtension", "WithDefaultClassSecurity")
			w.WriteHeader(http.StatusUnprocessableEntity)
			json.NewEncoder(w).Encode(validationError)
			return
		}
		// Middlewares beforeOperationMiddlewares section
		for _, middleware := range beforeOperationMiddlewares {
			if continueOperation := middleware(w, ctx); !continueOperation {
				return
			}
		}
		// End middlewares beforeOperationMiddlewares section
		w.Header().Set("x-BeforeOperationRoutesExtension", "WithDefaultClassSecurity")
		value, opError := controller.WithDefaultClassSecurity(*headerParamRawPtr)
		for key, value := range controller.GetHeaders() {
			w.Header().Set(key, value)
		}
		w.Header().Set("x-inject", "true")
		w.Header().Set("x-ResponseHeadersExtension", "WithDefaultClassSecurity")
		statusCode := getStatusCode(&controller, true, opError)
		if opError != nil {
			// Middlewares onErrorMiddlewares section
			for _, middleware := range onErrorMiddlewares {
				if continueOperation := middleware(w, ctx, opError); !continueOperation {
					return
				}
			}
			// End middlewares onErrorMiddlewares section
			stdError := runtime.Rfc7807Error{
				Type:       http.StatusText(statusCode),
				Detail:     "Encountered an error during operation 'WithDefaultClassSecurity'",
				Status:     statusCode,
				Instance:   "/gleece/controller/error/WithDefaultClassSecurity",
				Extensions: map[string]string{"error": opError.Error()},
			}
			w.Header().Set("x-JsonErrorResponseExtension", "WithDefaultClassSecurity")
			w.WriteHeader(statusCode)
			json.NewEncoder(w).Encode(stdError)
			return
		}
		w.Header().Set("x-JsonResponseExtension", "WithDefaultClassSecurity")
		// Middlewares afterOperationSuccessMiddlewares section
		for _, middleware := range afterOperationSuccessMiddlewares {
			if continueOperation := middleware(w, ctx); !continueOperation {
				return
			}
		}
		// End middlewares afterOperationSuccessMiddlewares section
		w.Header().Set("x-AfterOperationRoutesExtension", "WithDefaultClassSecurity")
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(statusCode)
		json.NewEncoder(w).Encode(value)
		w.Header().Set("x-RouteEndRoutesExtension", "WithDefaultClassSecurity")
	})
	engine.Get(toChiUrl("/e2e/with-default-override-class-security"), func(w http.ResponseWriter, ctx *http.Request) {
		w.Header().Set("x-RouteStartRoutesExtension", "WithOverrideClassSecurity")
		authErr := authorize(
			ctx,
			[]SecurityCheckList{
				{
					Relation: SecurityListRelationAnd,
					Checks: []runtime.SecurityCheck{
						{
							SchemaName: "securitySchemaName",
							Scopes: []string{
								"method",
							},
						},
					},
				},
			},
		)
		if authErr != nil {
			handleAuthorizationError(w, authErr, "WithOverrideClassSecurity")
			return
		}
		controller := E2EClassSecControllerImport.E2EClassSecController{}
		controller.InitController(ctx)
		var headerParamRawPtr *string = nil
		headerParamRaw := ctx.Header.Get("x-test-scopes")
		_, isheaderParamExists := ctx.Header["x-test-scopes"]
		if !isheaderParamExists {
			// In echo, the ctx..Header["key"] is not 100% reliable, so we need other check, but only if is was not found in the first method
			headerValues := ctx.Header.Values("x-test-scopes")
			isheaderParamExists = len(headerValues) > 0
		}
		if isheaderParamExists {
			headerParam := headerParamRaw
			headerParamRawPtr = &headerParam
		}
		if validatorErr := validatorInstance.Var(headerParamRawPtr, "required"); validatorErr != nil {
			// Middlewares onInputValidationMiddlewares section
			for _, middleware := range onInputValidationMiddlewares {
				if continueOperation := middleware(w, ctx, validatorErr); !continueOperation {
					return
				}
			}
			// End middlewares onInputValidationMiddlewares section
			fieldName := "headerParam"
			validationError := wrapValidatorError(validatorErr, "WithOverrideClassSecurity", fieldName)
			w.Header().Set("x-RunValidatorExtension", "WithOverrideClassSecurity")
			w.WriteHeader(http.StatusUnprocessableEntity)
			json.NewEncoder(w).Encode(validationError)
			return
		}
		// Middlewares beforeOperationMiddlewares section
		for _, middleware := range beforeOperationMiddlewares {
			if continueOperation := middleware(w, ctx); !continueOperation {
				return
			}
		}
		// End middlewares beforeOperationMiddlewares section
		w.Header().Set("x-BeforeOperationRoutesExtension", "WithOverrideClassSecurity")
		value, opError := controller.WithOverrideClassSecurity(*headerParamRawPtr)
		for key, value := range controller.GetHeaders() {
			w.Header().Set(key, value)
		}
		w.Header().Set("x-inject", "true")
		w.Header().Set("x-ResponseHeadersExtension", "WithOverrideClassSecurity")
		statusCode := getStatusCode(&controller, true, opError)
		if opError != nil {
			// Middlewares onErrorMiddlewares section
			for _, middleware := range onErrorMiddlewares {
				if continueOperation := middleware(w, ctx, opError); !continueOperation {
					return
				}
			}
			// End middlewares onErrorMiddlewares section
			stdError := runtime.Rfc7807Error{
				Type:       http.StatusText(statusCode),
				Detail:     "Encountered an error during operation 'WithOverrideClassSecurity'",
				Status:     statusCode,
				Instance:   "/gleece/controller/error/WithOverrideClassSecurity",
				Extensions: map[string]string{"error": opError.Error()},
			}
			w.Header().Set("x-JsonErrorResponseExtension", "WithOverrideClassSecurity")
			w.WriteHeader(statusCode)
			json.NewEncoder(w).Encode(stdError)
			return
		}
		w.Header().Set("x-JsonResponseExtension", "WithOverrideClassSecurity")
		// Middlewares afterOperationSuccessMiddlewares section
		for _, middleware := range afterOperationSuccessMiddlewares {
			if continueOperation := middleware(w, ctx); !continueOperation {
				return
			}
		}
		// End middlewares afterOperationSuccessMiddlewares section
		w.Header().Set("x-AfterOperationRoutesExtension", "WithOverrideClassSecurity")
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(statusCode)
		json.NewEncoder(w).Encode(value)
		w.Header().Set("x-RouteEndRoutesExtension", "WithOverrideClassSecurity")
	})
}
