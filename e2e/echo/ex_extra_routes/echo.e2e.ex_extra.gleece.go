/*
--
This file is automatically generated. Any manual changes to this file may be overwritten.
It includes routes and handlers by the Gleece API Routes Generator.
--
Authors: Haim Kastner & Yuval Pomerchik
Generated by: Gleece Routes Generator
Generated Date: 2025-05-27
Target Engine: Echo v4 (https://github.com/labstack/echo)
--
Usage:
Refer to the Gleece documentation for details on how to use the generated routes and handlers.
--
Repository: https://github.com/gopher-fleece/gleece
--
*/
package ex_extra_routes

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"reflect"
	"regexp"
	"strconv"
	"strings"

	"github.com/go-playground/validator/v10"
	E2EClassSecControllerImport "github.com/gopher-fleece/gleece/e2e/assets"
	E2EControllerImport "github.com/gopher-fleece/gleece/e2e/assets"
	Param100value1 "github.com/gopher-fleece/gleece/e2e/assets"
	Param101value2 "github.com/gopher-fleece/gleece/e2e/assets"
	Param102value3 "github.com/gopher-fleece/gleece/e2e/assets"
	Param105value1 "github.com/gopher-fleece/gleece/e2e/assets"
	Param106value2 "github.com/gopher-fleece/gleece/e2e/assets"
	Param107value3 "github.com/gopher-fleece/gleece/e2e/assets"
	Param110value1 "github.com/gopher-fleece/gleece/e2e/assets"
	Param117data "github.com/gopher-fleece/gleece/e2e/assets"
	Param121data "github.com/gopher-fleece/gleece/e2e/assets"
	Param127data "github.com/gopher-fleece/gleece/e2e/assets"
	Param130data "github.com/gopher-fleece/gleece/e2e/assets"
	Param133data "github.com/gopher-fleece/gleece/e2e/assets"
	Param137data "github.com/gopher-fleece/gleece/e2e/assets"
	Param41theBody "github.com/gopher-fleece/gleece/e2e/assets"
	Param46theBody "github.com/gopher-fleece/gleece/e2e/assets"
	Param49theBody "github.com/gopher-fleece/gleece/e2e/assets"
	Response70CustomError "github.com/gopher-fleece/gleece/e2e/assets"
	Response73CustomError "github.com/gopher-fleece/gleece/e2e/assets"
	RequestAuth "github.com/gopher-fleece/gleece/e2e/echo/auth"
	"github.com/gopher-fleece/runtime"
	Param113unit "github.com/haimkastner/unitsnet-go/units"
	Param114data "github.com/haimkastner/unitsnet-go/units"
	Param120unit "github.com/haimkastner/unitsnet-go/units"
	Param124data "github.com/haimkastner/unitsnet-go/units"
	"github.com/labstack/echo/v4"
	// import extension placeholder
)

var validatorInstance = validator.New()
var urlParamRegex *regexp.Regexp

type SecurityListRelation string

const (
	SecurityListRelationAnd SecurityListRelation = "AND"
)

type SecurityCheckList struct {
	Checks   []runtime.SecurityCheck
	Relation SecurityListRelation
}

// type declarations extension placeholder
func getRequestContext(echoCtx echo.Context) context.Context {
	return echoCtx.Request().Context()
}
func setRequestContext(echoCtx echo.Context, ctx context.Context) {
	if ctx != nil {
		newCtx := echoCtx.Request().WithContext(ctx)
		echoCtx.SetRequest(newCtx)
	}
}
func registerEnumValidation(validate *validator.Validate, validationName string, allowedValues []string) {
	// Convert the array to a map for O(1) lookup
	lookup := make(map[string]struct{})
	for _, val := range allowedValues {
		lookup[val] = struct{}{}
	}
	// Register the custom validation
	validate.RegisterValidation(validationName, func(fl validator.FieldLevel) bool {
		field := fl.Field().String()
		_, exists := lookup[field]
		return exists
	})
}
func extractValidationErrorMessage(err error, fieldName *string) string {
	if err == nil {
		return ""
	}
	validationErrors, ok := err.(validator.ValidationErrors)
	if !ok {
		return err.Error()
	}
	var errStr string
	for _, validationErr := range validationErrors {
		fName := validationErr.Field()
		if fieldName != nil {
			fName = *fieldName
		}
		errStr += fmt.Sprintf("Field '%s' failed validation with tag '%s'. ", fName, validationErr.Tag())
	}
	return errStr
}
func getStatusCode(controller runtime.Controller, hasReturnValue bool, err error) int {
	if controller.GetStatus() != nil {
		return int(*controller.GetStatus())
	}
	if err != nil {
		return http.StatusInternalServerError
	}
	if hasReturnValue {
		return http.StatusOK
	}
	return http.StatusNoContent
}
func bindAndValidateBody[TOutput any](echoCtx echo.Context, contentType string, validation string, output **TOutput) error {
	var err error
	bodyBytes, err := io.ReadAll(echoCtx.Request().Body)
	if err != nil || len(bodyBytes) == 0 {
		if strings.Contains(validation, "required") {
			return fmt.Errorf("body is required but was not provided")
		}
		return nil
	}
	var deserializedOutput TOutput
	switch contentType {
	case "application/json":
		err = json.Unmarshal(bodyBytes, &deserializedOutput)
	default:
		return fmt.Errorf("content-type %s is not currently supported by the validation subsystem", contentType)
	}
	if err != nil {
		return err
	}
	// Validate the unmarshaled data recursively
	if err = validateDataRecursive(deserializedOutput, ""); err != nil {
		return err
	}
	*output = &deserializedOutput
	return nil
}
func validateDataRecursive(data interface{}, path string) error {
	val := reflect.ValueOf(data)
	// Handle pointers by dereferencing
	if val.Kind() == reflect.Ptr {
		if val.IsNil() {
			return nil
		}
		return validateDataRecursive(val.Elem().Interface(), path)
	}
	// Handle different types
	switch val.Kind() {
	case reflect.Slice, reflect.Array:
		// For slices/arrays, validate each element recursively
		for i := 0; i < val.Len(); i++ {
			elemPath := path
			if path != "" {
				elemPath = fmt.Sprintf("%s[%d]", path, i)
			} else {
				elemPath = fmt.Sprintf("[%d]", i)
			}
			// Get the element - handle case where element might be nil
			elem := val.Index(i)
			if elem.Kind() == reflect.Ptr && elem.IsNil() {
				continue
			}
			// Validate the element recursively
			if err := validateDataRecursive(elem.Interface(), elemPath); err != nil {
				return err
			}
		}
		return nil
	case reflect.Map:
		// For maps, validate each value recursively
		for _, key := range val.MapKeys() {
			elemPath := path
			if path != "" {
				elemPath = fmt.Sprintf("%s.%v", path, key.Interface())
			} else {
				elemPath = fmt.Sprintf("%v", key.Interface())
			}
			elemVal := val.MapIndex(key)
			if elemVal.Kind() == reflect.Ptr && elemVal.IsNil() {
				continue
			}
			if err := validateDataRecursive(elemVal.Interface(), elemPath); err != nil {
				return err
			}
		}
		return nil
	case reflect.Struct:
		// Validate structs with the validator
		if err := validatorInstance.Struct(data); err != nil {
			if path != "" {
				return fmt.Errorf("validation error at %s: %w", path, err)
			}
			return err
		}
		return nil
	default:
		// Primitive types don't need validation
		return nil
	}
}
func toEchoUrl(url string) string {
	processedUrl := urlParamRegex.ReplaceAllString(url, ":$1")
	processedUrl = strings.ReplaceAll(processedUrl, "//", "/")
	if processedUrl == "" {
		return "/"
	}
	if !strings.HasPrefix(processedUrl, "/") {
		processedUrl = "/" + processedUrl
	}
	return processedUrl
}
func authorize(echoCtx echo.Context, checksLists []SecurityCheckList) *runtime.SecurityError {
	var lastError *runtime.SecurityError
	for _, list := range checksLists {
		if list.Relation != SecurityListRelationAnd {
			panic(
				"Encountered a security list relation of type '%s' - this is unexpected and indicates a bug in Gleece itself." +
					"Please open an issue at https://github.com/gopher-fleece/gleece/issues",
			)
		}
		// Iterate over each security list
		encounteredErrorInList := false
		for _, check := range list.Checks {
			secCtx, secErr := RequestAuth.GleeceRequestAuthorization(getRequestContext(echoCtx), echoCtx, check)
			setRequestContext(echoCtx, secCtx)
			if secErr != nil {
				lastError = secErr
				encounteredErrorInList = true
				break
			}
		}
		// If no error was encountered, validation is considered successful
		// otherwise, we continue over to the next iteration whilst keeping track of the last error
		if !encounteredErrorInList {
			return nil
		}
	}
	// If we got here it means authentication has failed
	return lastError
}
func handleAuthorizationError(echoCtx echo.Context, authErr *runtime.SecurityError, operationId string) error {
	statusCode := int(authErr.StatusCode)
	if authErr.CustomError != nil {
		// For now, we support JSON only
		return echoCtx.JSON(statusCode, authErr.CustomError.Payload)
	}
	stdError := runtime.Rfc7807Error{
		Type:     http.StatusText(statusCode),
		Detail:   authErr.Message,
		Status:   statusCode,
		Instance: "/authorization/error/" + operationId,
	}
	return echoCtx.JSON(statusCode, stdError)
}
func wrapValidatorError(validatorErr error, operationId string, fieldName string) runtime.Rfc7807Error {
	return runtime.Rfc7807Error{
		Type: http.StatusText(http.StatusUnprocessableEntity),
		Detail: fmt.Sprintf(
			"A request was made to operation '%s' but parameter '%s' did not pass validation - %s",
			operationId,
			fieldName,
			extractValidationErrorMessage(validatorErr, &fieldName),
		),
		Status:   http.StatusUnprocessableEntity,
		Instance: fmt.Sprintf("/validation/error/%s", operationId),
	}
}

// function declarations extension placeholder
type MiddlewareFunc func(ctx context.Context, echoCtx echo.Context) (context.Context, bool)
type ErrorMiddlewareFunc func(ctx context.Context, echoCtx echo.Context, err error) (context.Context, bool)

var beforeOperationMiddlewares []MiddlewareFunc
var afterOperationSuccessMiddlewares []MiddlewareFunc
var onErrorMiddlewares []ErrorMiddlewareFunc
var onInputValidationMiddlewares []ErrorMiddlewareFunc
var onOutputValidationMiddlewares []ErrorMiddlewareFunc

func RegisterMiddleware(executionType runtime.MiddlewareExecutionType, middlewareFunc MiddlewareFunc) {
	switch executionType {
	case runtime.BeforeOperation:
		beforeOperationMiddlewares = append(beforeOperationMiddlewares, middlewareFunc)
	case runtime.AfterOperationSuccess:
		afterOperationSuccessMiddlewares = append(afterOperationSuccessMiddlewares, middlewareFunc)
	}
}
func RegisterErrorMiddleware(executionType runtime.ErrorMiddlewareExecutionType, errorMiddlewareFunc ErrorMiddlewareFunc) {
	switch executionType {
	case runtime.OnInputValidationError:
		onInputValidationMiddlewares = append(onInputValidationMiddlewares, errorMiddlewareFunc)
	case runtime.OnOutputValidationError:
		onOutputValidationMiddlewares = append(onOutputValidationMiddlewares, errorMiddlewareFunc)
	case runtime.OnOperationError:
		onErrorMiddlewares = append(onErrorMiddlewares, errorMiddlewareFunc)
	}
}
func RegisterCustomValidator(validateTagName string, validateFunc runtime.ValidationFunc) {
	validatorInstance.RegisterValidation(validateTagName, func(fl validator.FieldLevel) bool {
		return validateFunc(fl)
	})
}
func RegisterRoutes(engine *echo.Echo) {
	urlParamRegex = regexp.MustCompile(`\{([\w\d-_]+)\}`)
	// register routes extension placeholder
	// E2EController
	engine.GET(toEchoUrl("/e2e/simple-get"), func(echoCtx echo.Context) error {
		// route start routes extension placeholder
		authErr := authorize(
			echoCtx,
			[]SecurityCheckList{
				{
					Relation: SecurityListRelationAnd,
					Checks: []runtime.SecurityCheck{
						{
							SchemaName: "securitySchemaName2",
							Scopes: []string{
								"config",
							},
						},
					},
				},
			},
		)
		if authErr != nil {
			return handleAuthorizationError(echoCtx, authErr, "SimpleGet")
		}
		controller := E2EControllerImport.E2EController{}
		controller.InitController(echoCtx)
		// Middlewares beforeOperationMiddlewares section
		for _, middleware := range beforeOperationMiddlewares {
			middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx)
			setRequestContext(echoCtx, middlewareCtx)
			if !continueOperation {
				return nil
			}
		}
		// End middlewares beforeOperationMiddlewares section
		// before operation routes extension placeholder
		value, opError := controller.SimpleGet()
		for key, value := range controller.GetHeaders() {
			echoCtx.Response().Header().Set(key, value)
		}
		// response headers extension placeholder
		statusCode := getStatusCode(&controller, true, opError)
		if opError != nil {
			// Middlewares onErrorMiddlewares section
			for _, middleware := range onErrorMiddlewares {
				middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx, opError)
				setRequestContext(echoCtx, middlewareCtx)
				if !continueOperation {
					return nil
				}
			}
			// End middlewares onErrorMiddlewares section
			stdError := runtime.Rfc7807Error{
				Type:       http.StatusText(statusCode),
				Detail:     "Encountered an error during operation 'SimpleGet'",
				Status:     statusCode,
				Instance:   "/controller/error/SimpleGet",
				Extensions: map[string]string{"error": opError.Error()},
			}
			// json error response extension placeholder
			return echoCtx.JSON(statusCode, stdError)
		}
		// json response extension placeholder
		// Middlewares afterOperationSuccessMiddlewares section
		for _, middleware := range afterOperationSuccessMiddlewares {
			middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx)
			setRequestContext(echoCtx, middlewareCtx)
			if !continueOperation {
				return nil
			}
		}
		// End middlewares afterOperationSuccessMiddlewares section
		// after operation routes extension placeholder
		echoCtx.JSON(statusCode, value)
		// route end routes extension placeholder
		return nil
	})
	engine.GET(toEchoUrl("/e2e/simple-get-empty-string"), func(echoCtx echo.Context) error {
		// route start routes extension placeholder
		authErr := authorize(
			echoCtx,
			[]SecurityCheckList{
				{
					Relation: SecurityListRelationAnd,
					Checks: []runtime.SecurityCheck{
						{
							SchemaName: "securitySchemaName2",
							Scopes: []string{
								"config",
							},
						},
					},
				},
			},
		)
		if authErr != nil {
			return handleAuthorizationError(echoCtx, authErr, "SimpleGetEmptyString")
		}
		controller := E2EControllerImport.E2EController{}
		controller.InitController(echoCtx)
		// Middlewares beforeOperationMiddlewares section
		for _, middleware := range beforeOperationMiddlewares {
			middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx)
			setRequestContext(echoCtx, middlewareCtx)
			if !continueOperation {
				return nil
			}
		}
		// End middlewares beforeOperationMiddlewares section
		// before operation routes extension placeholder
		value, opError := controller.SimpleGetEmptyString()
		for key, value := range controller.GetHeaders() {
			echoCtx.Response().Header().Set(key, value)
		}
		// response headers extension placeholder
		statusCode := getStatusCode(&controller, true, opError)
		if opError != nil {
			// Middlewares onErrorMiddlewares section
			for _, middleware := range onErrorMiddlewares {
				middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx, opError)
				setRequestContext(echoCtx, middlewareCtx)
				if !continueOperation {
					return nil
				}
			}
			// End middlewares onErrorMiddlewares section
			stdError := runtime.Rfc7807Error{
				Type:       http.StatusText(statusCode),
				Detail:     "Encountered an error during operation 'SimpleGetEmptyString'",
				Status:     statusCode,
				Instance:   "/controller/error/SimpleGetEmptyString",
				Extensions: map[string]string{"error": opError.Error()},
			}
			// json error response extension placeholder
			return echoCtx.JSON(statusCode, stdError)
		}
		// json response extension placeholder
		// Middlewares afterOperationSuccessMiddlewares section
		for _, middleware := range afterOperationSuccessMiddlewares {
			middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx)
			setRequestContext(echoCtx, middlewareCtx)
			if !continueOperation {
				return nil
			}
		}
		// End middlewares afterOperationSuccessMiddlewares section
		// after operation routes extension placeholder
		echoCtx.JSON(statusCode, value)
		// route end routes extension placeholder
		return nil
	})
	engine.GET(toEchoUrl("/e2e/simple-get-ptr-string"), func(echoCtx echo.Context) error {
		// route start routes extension placeholder
		authErr := authorize(
			echoCtx,
			[]SecurityCheckList{
				{
					Relation: SecurityListRelationAnd,
					Checks: []runtime.SecurityCheck{
						{
							SchemaName: "securitySchemaName2",
							Scopes: []string{
								"config",
							},
						},
					},
				},
			},
		)
		if authErr != nil {
			return handleAuthorizationError(echoCtx, authErr, "SimpleGetPtrString")
		}
		controller := E2EControllerImport.E2EController{}
		controller.InitController(echoCtx)
		// Middlewares beforeOperationMiddlewares section
		for _, middleware := range beforeOperationMiddlewares {
			middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx)
			setRequestContext(echoCtx, middlewareCtx)
			if !continueOperation {
				return nil
			}
		}
		// End middlewares beforeOperationMiddlewares section
		// before operation routes extension placeholder
		value, opError := controller.SimpleGetPtrString()
		for key, value := range controller.GetHeaders() {
			echoCtx.Response().Header().Set(key, value)
		}
		// response headers extension placeholder
		statusCode := getStatusCode(&controller, true, opError)
		if opError != nil {
			// Middlewares onErrorMiddlewares section
			for _, middleware := range onErrorMiddlewares {
				middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx, opError)
				setRequestContext(echoCtx, middlewareCtx)
				if !continueOperation {
					return nil
				}
			}
			// End middlewares onErrorMiddlewares section
			stdError := runtime.Rfc7807Error{
				Type:       http.StatusText(statusCode),
				Detail:     "Encountered an error during operation 'SimpleGetPtrString'",
				Status:     statusCode,
				Instance:   "/controller/error/SimpleGetPtrString",
				Extensions: map[string]string{"error": opError.Error()},
			}
			// json error response extension placeholder
			return echoCtx.JSON(statusCode, stdError)
		}
		// json response extension placeholder
		// Middlewares afterOperationSuccessMiddlewares section
		for _, middleware := range afterOperationSuccessMiddlewares {
			middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx)
			setRequestContext(echoCtx, middlewareCtx)
			if !continueOperation {
				return nil
			}
		}
		// End middlewares afterOperationSuccessMiddlewares section
		// after operation routes extension placeholder
		echoCtx.JSON(statusCode, value)
		// route end routes extension placeholder
		return nil
	})
	engine.GET(toEchoUrl("/e2e/simple-get-null-string"), func(echoCtx echo.Context) error {
		// route start routes extension placeholder
		authErr := authorize(
			echoCtx,
			[]SecurityCheckList{
				{
					Relation: SecurityListRelationAnd,
					Checks: []runtime.SecurityCheck{
						{
							SchemaName: "securitySchemaName2",
							Scopes: []string{
								"config",
							},
						},
					},
				},
			},
		)
		if authErr != nil {
			return handleAuthorizationError(echoCtx, authErr, "SimpleGetNullString")
		}
		controller := E2EControllerImport.E2EController{}
		controller.InitController(echoCtx)
		// Middlewares beforeOperationMiddlewares section
		for _, middleware := range beforeOperationMiddlewares {
			middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx)
			setRequestContext(echoCtx, middlewareCtx)
			if !continueOperation {
				return nil
			}
		}
		// End middlewares beforeOperationMiddlewares section
		// before operation routes extension placeholder
		value, opError := controller.SimpleGetNullString()
		for key, value := range controller.GetHeaders() {
			echoCtx.Response().Header().Set(key, value)
		}
		// response headers extension placeholder
		statusCode := getStatusCode(&controller, true, opError)
		if opError != nil {
			// Middlewares onErrorMiddlewares section
			for _, middleware := range onErrorMiddlewares {
				middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx, opError)
				setRequestContext(echoCtx, middlewareCtx)
				if !continueOperation {
					return nil
				}
			}
			// End middlewares onErrorMiddlewares section
			stdError := runtime.Rfc7807Error{
				Type:       http.StatusText(statusCode),
				Detail:     "Encountered an error during operation 'SimpleGetNullString'",
				Status:     statusCode,
				Instance:   "/controller/error/SimpleGetNullString",
				Extensions: map[string]string{"error": opError.Error()},
			}
			// json error response extension placeholder
			return echoCtx.JSON(statusCode, stdError)
		}
		// json response extension placeholder
		// Middlewares afterOperationSuccessMiddlewares section
		for _, middleware := range afterOperationSuccessMiddlewares {
			middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx)
			setRequestContext(echoCtx, middlewareCtx)
			if !continueOperation {
				return nil
			}
		}
		// End middlewares afterOperationSuccessMiddlewares section
		// after operation routes extension placeholder
		echoCtx.JSON(statusCode, value)
		// route end routes extension placeholder
		return nil
	})
	engine.GET(toEchoUrl("/e2e/simple-get-object"), func(echoCtx echo.Context) error {
		// route start routes extension placeholder
		authErr := authorize(
			echoCtx,
			[]SecurityCheckList{
				{
					Relation: SecurityListRelationAnd,
					Checks: []runtime.SecurityCheck{
						{
							SchemaName: "securitySchemaName2",
							Scopes: []string{
								"config",
							},
						},
					},
				},
			},
		)
		if authErr != nil {
			return handleAuthorizationError(echoCtx, authErr, "SimpleGetObject")
		}
		controller := E2EControllerImport.E2EController{}
		controller.InitController(echoCtx)
		// Middlewares beforeOperationMiddlewares section
		for _, middleware := range beforeOperationMiddlewares {
			middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx)
			setRequestContext(echoCtx, middlewareCtx)
			if !continueOperation {
				return nil
			}
		}
		// End middlewares beforeOperationMiddlewares section
		// before operation routes extension placeholder
		value, opError := controller.SimpleGetObject()
		for key, value := range controller.GetHeaders() {
			echoCtx.Response().Header().Set(key, value)
		}
		// response headers extension placeholder
		statusCode := getStatusCode(&controller, true, opError)
		if opError != nil {
			// Middlewares onErrorMiddlewares section
			for _, middleware := range onErrorMiddlewares {
				middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx, opError)
				setRequestContext(echoCtx, middlewareCtx)
				if !continueOperation {
					return nil
				}
			}
			// End middlewares onErrorMiddlewares section
			stdError := runtime.Rfc7807Error{
				Type:       http.StatusText(statusCode),
				Detail:     "Encountered an error during operation 'SimpleGetObject'",
				Status:     statusCode,
				Instance:   "/controller/error/SimpleGetObject",
				Extensions: map[string]string{"error": opError.Error()},
			}
			// json error response extension placeholder
			return echoCtx.JSON(statusCode, stdError)
		}
		// json response extension placeholder
		// Middlewares afterOperationSuccessMiddlewares section
		for _, middleware := range afterOperationSuccessMiddlewares {
			middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx)
			setRequestContext(echoCtx, middlewareCtx)
			if !continueOperation {
				return nil
			}
		}
		// End middlewares afterOperationSuccessMiddlewares section
		// after operation routes extension placeholder
		echoCtx.JSON(statusCode, value)
		// route end routes extension placeholder
		return nil
	})
	engine.GET(toEchoUrl("/e2e/simple-get-object-ptr"), func(echoCtx echo.Context) error {
		// route start routes extension placeholder
		authErr := authorize(
			echoCtx,
			[]SecurityCheckList{
				{
					Relation: SecurityListRelationAnd,
					Checks: []runtime.SecurityCheck{
						{
							SchemaName: "securitySchemaName2",
							Scopes: []string{
								"config",
							},
						},
					},
				},
			},
		)
		if authErr != nil {
			return handleAuthorizationError(echoCtx, authErr, "SimpleGetObjectPtr")
		}
		controller := E2EControllerImport.E2EController{}
		controller.InitController(echoCtx)
		// Middlewares beforeOperationMiddlewares section
		for _, middleware := range beforeOperationMiddlewares {
			middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx)
			setRequestContext(echoCtx, middlewareCtx)
			if !continueOperation {
				return nil
			}
		}
		// End middlewares beforeOperationMiddlewares section
		// before operation routes extension placeholder
		value, opError := controller.SimpleGetObjectPtr()
		for key, value := range controller.GetHeaders() {
			echoCtx.Response().Header().Set(key, value)
		}
		// response headers extension placeholder
		statusCode := getStatusCode(&controller, true, opError)
		if opError != nil {
			// Middlewares onErrorMiddlewares section
			for _, middleware := range onErrorMiddlewares {
				middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx, opError)
				setRequestContext(echoCtx, middlewareCtx)
				if !continueOperation {
					return nil
				}
			}
			// End middlewares onErrorMiddlewares section
			stdError := runtime.Rfc7807Error{
				Type:       http.StatusText(statusCode),
				Detail:     "Encountered an error during operation 'SimpleGetObjectPtr'",
				Status:     statusCode,
				Instance:   "/controller/error/SimpleGetObjectPtr",
				Extensions: map[string]string{"error": opError.Error()},
			}
			// json error response extension placeholder
			return echoCtx.JSON(statusCode, stdError)
		}
		// json response extension placeholder
		// Middlewares afterOperationSuccessMiddlewares section
		for _, middleware := range afterOperationSuccessMiddlewares {
			middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx)
			setRequestContext(echoCtx, middlewareCtx)
			if !continueOperation {
				return nil
			}
		}
		// End middlewares afterOperationSuccessMiddlewares section
		// after operation routes extension placeholder
		echoCtx.JSON(statusCode, value)
		// route end routes extension placeholder
		return nil
	})
	engine.GET(toEchoUrl("/e2e/simple-get-object-null"), func(echoCtx echo.Context) error {
		// route start routes extension placeholder
		authErr := authorize(
			echoCtx,
			[]SecurityCheckList{
				{
					Relation: SecurityListRelationAnd,
					Checks: []runtime.SecurityCheck{
						{
							SchemaName: "securitySchemaName2",
							Scopes: []string{
								"config",
							},
						},
					},
				},
			},
		)
		if authErr != nil {
			return handleAuthorizationError(echoCtx, authErr, "SimpleGetObjectNull")
		}
		controller := E2EControllerImport.E2EController{}
		controller.InitController(echoCtx)
		// Middlewares beforeOperationMiddlewares section
		for _, middleware := range beforeOperationMiddlewares {
			middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx)
			setRequestContext(echoCtx, middlewareCtx)
			if !continueOperation {
				return nil
			}
		}
		// End middlewares beforeOperationMiddlewares section
		// before operation routes extension placeholder
		value, opError := controller.SimpleGetObjectNull()
		for key, value := range controller.GetHeaders() {
			echoCtx.Response().Header().Set(key, value)
		}
		// response headers extension placeholder
		statusCode := getStatusCode(&controller, true, opError)
		if opError != nil {
			// Middlewares onErrorMiddlewares section
			for _, middleware := range onErrorMiddlewares {
				middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx, opError)
				setRequestContext(echoCtx, middlewareCtx)
				if !continueOperation {
					return nil
				}
			}
			// End middlewares onErrorMiddlewares section
			stdError := runtime.Rfc7807Error{
				Type:       http.StatusText(statusCode),
				Detail:     "Encountered an error during operation 'SimpleGetObjectNull'",
				Status:     statusCode,
				Instance:   "/controller/error/SimpleGetObjectNull",
				Extensions: map[string]string{"error": opError.Error()},
			}
			// json error response extension placeholder
			return echoCtx.JSON(statusCode, stdError)
		}
		// json response extension placeholder
		// Middlewares afterOperationSuccessMiddlewares section
		for _, middleware := range afterOperationSuccessMiddlewares {
			middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx)
			setRequestContext(echoCtx, middlewareCtx)
			if !continueOperation {
				return nil
			}
		}
		// End middlewares afterOperationSuccessMiddlewares section
		// after operation routes extension placeholder
		echoCtx.JSON(statusCode, value)
		// route end routes extension placeholder
		return nil
	})
	engine.GET(toEchoUrl("/e2e/primitive-return-type"), func(echoCtx echo.Context) error {
		// route start routes extension placeholder
		authErr := authorize(
			echoCtx,
			[]SecurityCheckList{
				{
					Relation: SecurityListRelationAnd,
					Checks: []runtime.SecurityCheck{
						{
							SchemaName: "securitySchemaName2",
							Scopes: []string{
								"config",
							},
						},
					},
				},
			},
		)
		if authErr != nil {
			return handleAuthorizationError(echoCtx, authErr, "PrimitiveReturnType")
		}
		controller := E2EControllerImport.E2EController{}
		controller.InitController(echoCtx)
		// Middlewares beforeOperationMiddlewares section
		for _, middleware := range beforeOperationMiddlewares {
			middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx)
			setRequestContext(echoCtx, middlewareCtx)
			if !continueOperation {
				return nil
			}
		}
		// End middlewares beforeOperationMiddlewares section
		// before operation routes extension placeholder
		value, opError := controller.PrimitiveReturnType()
		for key, value := range controller.GetHeaders() {
			echoCtx.Response().Header().Set(key, value)
		}
		// response headers extension placeholder
		statusCode := getStatusCode(&controller, true, opError)
		if opError != nil {
			// Middlewares onErrorMiddlewares section
			for _, middleware := range onErrorMiddlewares {
				middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx, opError)
				setRequestContext(echoCtx, middlewareCtx)
				if !continueOperation {
					return nil
				}
			}
			// End middlewares onErrorMiddlewares section
			stdError := runtime.Rfc7807Error{
				Type:       http.StatusText(statusCode),
				Detail:     "Encountered an error during operation 'PrimitiveReturnType'",
				Status:     statusCode,
				Instance:   "/controller/error/PrimitiveReturnType",
				Extensions: map[string]string{"error": opError.Error()},
			}
			// json error response extension placeholder
			return echoCtx.JSON(statusCode, stdError)
		}
		// json response extension placeholder
		// Middlewares afterOperationSuccessMiddlewares section
		for _, middleware := range afterOperationSuccessMiddlewares {
			middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx)
			setRequestContext(echoCtx, middlewareCtx)
			if !continueOperation {
				return nil
			}
		}
		// End middlewares afterOperationSuccessMiddlewares section
		// after operation routes extension placeholder
		echoCtx.JSON(statusCode, value)
		// route end routes extension placeholder
		return nil
	})
	engine.GET(toEchoUrl("/e2e/primitive-array-return-type"), func(echoCtx echo.Context) error {
		// route start routes extension placeholder
		authErr := authorize(
			echoCtx,
			[]SecurityCheckList{
				{
					Relation: SecurityListRelationAnd,
					Checks: []runtime.SecurityCheck{
						{
							SchemaName: "securitySchemaName2",
							Scopes: []string{
								"config",
							},
						},
					},
				},
			},
		)
		if authErr != nil {
			return handleAuthorizationError(echoCtx, authErr, "PrimitiveArrayReturnType")
		}
		controller := E2EControllerImport.E2EController{}
		controller.InitController(echoCtx)
		// Middlewares beforeOperationMiddlewares section
		for _, middleware := range beforeOperationMiddlewares {
			middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx)
			setRequestContext(echoCtx, middlewareCtx)
			if !continueOperation {
				return nil
			}
		}
		// End middlewares beforeOperationMiddlewares section
		// before operation routes extension placeholder
		value, opError := controller.PrimitiveArrayReturnType()
		for key, value := range controller.GetHeaders() {
			echoCtx.Response().Header().Set(key, value)
		}
		// response headers extension placeholder
		statusCode := getStatusCode(&controller, true, opError)
		if opError != nil {
			// Middlewares onErrorMiddlewares section
			for _, middleware := range onErrorMiddlewares {
				middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx, opError)
				setRequestContext(echoCtx, middlewareCtx)
				if !continueOperation {
					return nil
				}
			}
			// End middlewares onErrorMiddlewares section
			stdError := runtime.Rfc7807Error{
				Type:       http.StatusText(statusCode),
				Detail:     "Encountered an error during operation 'PrimitiveArrayReturnType'",
				Status:     statusCode,
				Instance:   "/controller/error/PrimitiveArrayReturnType",
				Extensions: map[string]string{"error": opError.Error()},
			}
			// json error response extension placeholder
			return echoCtx.JSON(statusCode, stdError)
		}
		// json response extension placeholder
		// Middlewares afterOperationSuccessMiddlewares section
		for _, middleware := range afterOperationSuccessMiddlewares {
			middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx)
			setRequestContext(echoCtx, middlewareCtx)
			if !continueOperation {
				return nil
			}
		}
		// End middlewares afterOperationSuccessMiddlewares section
		// after operation routes extension placeholder
		echoCtx.JSON(statusCode, value)
		// route end routes extension placeholder
		return nil
	})
	engine.GET(toEchoUrl("/e2e/primitive-alias-return-type"), func(echoCtx echo.Context) error {
		// route start routes extension placeholder
		authErr := authorize(
			echoCtx,
			[]SecurityCheckList{
				{
					Relation: SecurityListRelationAnd,
					Checks: []runtime.SecurityCheck{
						{
							SchemaName: "securitySchemaName2",
							Scopes: []string{
								"config",
							},
						},
					},
				},
			},
		)
		if authErr != nil {
			return handleAuthorizationError(echoCtx, authErr, "PrimitiveAliasReturnType")
		}
		controller := E2EControllerImport.E2EController{}
		controller.InitController(echoCtx)
		// Middlewares beforeOperationMiddlewares section
		for _, middleware := range beforeOperationMiddlewares {
			middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx)
			setRequestContext(echoCtx, middlewareCtx)
			if !continueOperation {
				return nil
			}
		}
		// End middlewares beforeOperationMiddlewares section
		// before operation routes extension placeholder
		value, opError := controller.PrimitiveAliasReturnType()
		for key, value := range controller.GetHeaders() {
			echoCtx.Response().Header().Set(key, value)
		}
		// response headers extension placeholder
		statusCode := getStatusCode(&controller, true, opError)
		if opError != nil {
			// Middlewares onErrorMiddlewares section
			for _, middleware := range onErrorMiddlewares {
				middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx, opError)
				setRequestContext(echoCtx, middlewareCtx)
				if !continueOperation {
					return nil
				}
			}
			// End middlewares onErrorMiddlewares section
			stdError := runtime.Rfc7807Error{
				Type:       http.StatusText(statusCode),
				Detail:     "Encountered an error during operation 'PrimitiveAliasReturnType'",
				Status:     statusCode,
				Instance:   "/controller/error/PrimitiveAliasReturnType",
				Extensions: map[string]string{"error": opError.Error()},
			}
			// json error response extension placeholder
			return echoCtx.JSON(statusCode, stdError)
		}
		// json response extension placeholder
		// Middlewares afterOperationSuccessMiddlewares section
		for _, middleware := range afterOperationSuccessMiddlewares {
			middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx)
			setRequestContext(echoCtx, middlewareCtx)
			if !continueOperation {
				return nil
			}
		}
		// End middlewares afterOperationSuccessMiddlewares section
		// after operation routes extension placeholder
		echoCtx.JSON(statusCode, value)
		// route end routes extension placeholder
		return nil
	})
	engine.GET(toEchoUrl("/e2e/primitive-alias-array-return-type"), func(echoCtx echo.Context) error {
		// route start routes extension placeholder
		authErr := authorize(
			echoCtx,
			[]SecurityCheckList{
				{
					Relation: SecurityListRelationAnd,
					Checks: []runtime.SecurityCheck{
						{
							SchemaName: "securitySchemaName2",
							Scopes: []string{
								"config",
							},
						},
					},
				},
			},
		)
		if authErr != nil {
			return handleAuthorizationError(echoCtx, authErr, "PrimitiveAliasArrayReturnType")
		}
		controller := E2EControllerImport.E2EController{}
		controller.InitController(echoCtx)
		// Middlewares beforeOperationMiddlewares section
		for _, middleware := range beforeOperationMiddlewares {
			middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx)
			setRequestContext(echoCtx, middlewareCtx)
			if !continueOperation {
				return nil
			}
		}
		// End middlewares beforeOperationMiddlewares section
		// before operation routes extension placeholder
		value, opError := controller.PrimitiveAliasArrayReturnType()
		for key, value := range controller.GetHeaders() {
			echoCtx.Response().Header().Set(key, value)
		}
		// response headers extension placeholder
		statusCode := getStatusCode(&controller, true, opError)
		if opError != nil {
			// Middlewares onErrorMiddlewares section
			for _, middleware := range onErrorMiddlewares {
				middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx, opError)
				setRequestContext(echoCtx, middlewareCtx)
				if !continueOperation {
					return nil
				}
			}
			// End middlewares onErrorMiddlewares section
			stdError := runtime.Rfc7807Error{
				Type:       http.StatusText(statusCode),
				Detail:     "Encountered an error during operation 'PrimitiveAliasArrayReturnType'",
				Status:     statusCode,
				Instance:   "/controller/error/PrimitiveAliasArrayReturnType",
				Extensions: map[string]string{"error": opError.Error()},
			}
			// json error response extension placeholder
			return echoCtx.JSON(statusCode, stdError)
		}
		// json response extension placeholder
		// Middlewares afterOperationSuccessMiddlewares section
		for _, middleware := range afterOperationSuccessMiddlewares {
			middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx)
			setRequestContext(echoCtx, middlewareCtx)
			if !continueOperation {
				return nil
			}
		}
		// End middlewares afterOperationSuccessMiddlewares section
		// after operation routes extension placeholder
		echoCtx.JSON(statusCode, value)
		// route end routes extension placeholder
		return nil
	})
	engine.GET(toEchoUrl("/e2e/simple-get-empty"), func(echoCtx echo.Context) error {
		// route start routes extension placeholder
		authErr := authorize(
			echoCtx,
			[]SecurityCheckList{
				{
					Relation: SecurityListRelationAnd,
					Checks: []runtime.SecurityCheck{
						{
							SchemaName: "securitySchemaName2",
							Scopes: []string{
								"config",
							},
						},
					},
				},
			},
		)
		if authErr != nil {
			return handleAuthorizationError(echoCtx, authErr, "SimpleGetEmpty")
		}
		controller := E2EControllerImport.E2EController{}
		controller.InitController(echoCtx)
		var queryParamRawPtr *string = nil
		queryParamRaw := echoCtx.QueryParam("queryParam")
		isqueryParamExists := echoCtx.Request().URL.Query().Has("queryParam")
		if isqueryParamExists {
			queryParam := queryParamRaw
			queryParamRawPtr = &queryParam
		}
		if validatorErr := validatorInstance.Var(queryParamRawPtr, "required"); validatorErr != nil {
			// Middlewares onInputValidationMiddlewares section
			for _, middleware := range onInputValidationMiddlewares {
				middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx, validatorErr)
				setRequestContext(echoCtx, middlewareCtx)
				if !continueOperation {
					return nil
				}
			}
			// End middlewares onInputValidationMiddlewares section
			fieldName := "queryParam"
			validationError := wrapValidatorError(validatorErr, "SimpleGetEmpty", fieldName)
			// validation error response extension placeholder
			return echoCtx.JSON(http.StatusUnprocessableEntity, validationError)
		}
		// Middlewares beforeOperationMiddlewares section
		for _, middleware := range beforeOperationMiddlewares {
			middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx)
			setRequestContext(echoCtx, middlewareCtx)
			if !continueOperation {
				return nil
			}
		}
		// End middlewares beforeOperationMiddlewares section
		// before operation routes extension placeholder
		opError := controller.SimpleGetEmpty(*queryParamRawPtr)
		for key, value := range controller.GetHeaders() {
			echoCtx.Response().Header().Set(key, value)
		}
		// response headers extension placeholder
		statusCode := getStatusCode(&controller, false, opError)
		if opError != nil {
			// Middlewares onErrorMiddlewares section
			for _, middleware := range onErrorMiddlewares {
				middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx, opError)
				setRequestContext(echoCtx, middlewareCtx)
				if !continueOperation {
					return nil
				}
			}
			// End middlewares onErrorMiddlewares section
			stdError := runtime.Rfc7807Error{
				Type:       http.StatusText(statusCode),
				Detail:     "Encountered an error during operation 'SimpleGetEmpty'",
				Status:     statusCode,
				Instance:   "/controller/error/SimpleGetEmpty",
				Extensions: map[string]string{"error": opError.Error()},
			}
			// json error response extension placeholder
			return echoCtx.JSON(statusCode, stdError)
		}
		// json response extension placeholder
		// Middlewares afterOperationSuccessMiddlewares section
		for _, middleware := range afterOperationSuccessMiddlewares {
			middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx)
			setRequestContext(echoCtx, middlewareCtx)
			if !continueOperation {
				return nil
			}
		}
		// End middlewares afterOperationSuccessMiddlewares section
		// after operation routes extension placeholder
		echoCtx.Response().WriteHeader(statusCode)
		// route end routes extension placeholder
		return nil
	})
	engine.GET(toEchoUrl("/e2e/get-with-all-params/{pathParam}"), func(echoCtx echo.Context) error {
		// route start routes extension placeholder
		authErr := authorize(
			echoCtx,
			[]SecurityCheckList{
				{
					Relation: SecurityListRelationAnd,
					Checks: []runtime.SecurityCheck{
						{
							SchemaName: "securitySchemaName2",
							Scopes: []string{
								"config",
							},
						},
					},
				},
			},
		)
		if authErr != nil {
			return handleAuthorizationError(echoCtx, authErr, "GetWithAllParams")
		}
		controller := E2EControllerImport.E2EController{}
		controller.InitController(echoCtx)
		var queryParamRawPtr *string = nil
		queryParamRaw := echoCtx.QueryParam("queryParam")
		isqueryParamExists := echoCtx.Request().URL.Query().Has("queryParam")
		if isqueryParamExists {
			queryParam := queryParamRaw
			queryParamRawPtr = &queryParam
		}
		if validatorErr := validatorInstance.Var(queryParamRawPtr, "required"); validatorErr != nil {
			// Middlewares onInputValidationMiddlewares section
			for _, middleware := range onInputValidationMiddlewares {
				middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx, validatorErr)
				setRequestContext(echoCtx, middlewareCtx)
				if !continueOperation {
					return nil
				}
			}
			// End middlewares onInputValidationMiddlewares section
			fieldName := "queryParam"
			validationError := wrapValidatorError(validatorErr, "GetWithAllParams", fieldName)
			// validation error response extension placeholder
			return echoCtx.JSON(http.StatusUnprocessableEntity, validationError)
		}
		var pathParamRawPtr *string = nil
		pathParamRaw := echoCtx.Param("pathParam")
		ispathParamExists := true // if parameter is in route but not provided, it won't reach this handler
		if ispathParamExists {
			pathParam := pathParamRaw
			pathParamRawPtr = &pathParam
		}
		if validatorErr := validatorInstance.Var(pathParamRawPtr, "required"); validatorErr != nil {
			// Middlewares onInputValidationMiddlewares section
			for _, middleware := range onInputValidationMiddlewares {
				middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx, validatorErr)
				setRequestContext(echoCtx, middlewareCtx)
				if !continueOperation {
					return nil
				}
			}
			// End middlewares onInputValidationMiddlewares section
			fieldName := "pathParam"
			validationError := wrapValidatorError(validatorErr, "GetWithAllParams", fieldName)
			// validation error response extension placeholder
			return echoCtx.JSON(http.StatusUnprocessableEntity, validationError)
		}
		var headerParamRawPtr *string = nil
		headerParamRaw := echoCtx.Request().Header.Get("headerParam")
		_, isheaderParamExists := echoCtx.Request().Header["headerParam"]
		if !isheaderParamExists {
			// In echo, the echoCtx.Request().Header["key"] is not 100% reliable, so we need other check, but only if is was not found in the first method
			headerValues := echoCtx.Request().Header.Values("headerParam")
			isheaderParamExists = len(headerValues) > 0
		}
		if isheaderParamExists {
			headerParam := headerParamRaw
			headerParamRawPtr = &headerParam
		}
		if validatorErr := validatorInstance.Var(headerParamRawPtr, "required"); validatorErr != nil {
			// Middlewares onInputValidationMiddlewares section
			for _, middleware := range onInputValidationMiddlewares {
				middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx, validatorErr)
				setRequestContext(echoCtx, middlewareCtx)
				if !continueOperation {
					return nil
				}
			}
			// End middlewares onInputValidationMiddlewares section
			fieldName := "headerParam"
			validationError := wrapValidatorError(validatorErr, "GetWithAllParams", fieldName)
			// validation error response extension placeholder
			return echoCtx.JSON(http.StatusUnprocessableEntity, validationError)
		}
		// Middlewares beforeOperationMiddlewares section
		for _, middleware := range beforeOperationMiddlewares {
			middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx)
			setRequestContext(echoCtx, middlewareCtx)
			if !continueOperation {
				return nil
			}
		}
		// End middlewares beforeOperationMiddlewares section
		// before operation routes extension placeholder
		value, opError := controller.GetWithAllParams(*queryParamRawPtr, *pathParamRawPtr, *headerParamRawPtr)
		for key, value := range controller.GetHeaders() {
			echoCtx.Response().Header().Set(key, value)
		}
		// response headers extension placeholder
		statusCode := getStatusCode(&controller, true, opError)
		if opError != nil {
			// Middlewares onErrorMiddlewares section
			for _, middleware := range onErrorMiddlewares {
				middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx, opError)
				setRequestContext(echoCtx, middlewareCtx)
				if !continueOperation {
					return nil
				}
			}
			// End middlewares onErrorMiddlewares section
			stdError := runtime.Rfc7807Error{
				Type:       http.StatusText(statusCode),
				Detail:     "Encountered an error during operation 'GetWithAllParams'",
				Status:     statusCode,
				Instance:   "/controller/error/GetWithAllParams",
				Extensions: map[string]string{"error": opError.Error()},
			}
			// json error response extension placeholder
			return echoCtx.JSON(statusCode, stdError)
		}
		// json response extension placeholder
		// Middlewares afterOperationSuccessMiddlewares section
		for _, middleware := range afterOperationSuccessMiddlewares {
			middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx)
			setRequestContext(echoCtx, middlewareCtx)
			if !continueOperation {
				return nil
			}
		}
		// End middlewares afterOperationSuccessMiddlewares section
		// after operation routes extension placeholder
		echoCtx.JSON(statusCode, value)
		// route end routes extension placeholder
		return nil
	})
	engine.GET(toEchoUrl("/e2e/get-with-all-params-ptr/{pathParam}"), func(echoCtx echo.Context) error {
		// route start routes extension placeholder
		authErr := authorize(
			echoCtx,
			[]SecurityCheckList{
				{
					Relation: SecurityListRelationAnd,
					Checks: []runtime.SecurityCheck{
						{
							SchemaName: "securitySchemaName2",
							Scopes: []string{
								"config",
							},
						},
					},
				},
			},
		)
		if authErr != nil {
			return handleAuthorizationError(echoCtx, authErr, "GetWithAllParamsPtr")
		}
		controller := E2EControllerImport.E2EController{}
		controller.InitController(echoCtx)
		var queryParamRawPtr *string = nil
		queryParamRaw := echoCtx.QueryParam("queryParam")
		isqueryParamExists := echoCtx.Request().URL.Query().Has("queryParam")
		if isqueryParamExists {
			queryParam := queryParamRaw
			queryParamRawPtr = &queryParam
		}
		var pathParamRawPtr *string = nil
		pathParamRaw := echoCtx.Param("pathParam")
		ispathParamExists := true // if parameter is in route but not provided, it won't reach this handler
		if ispathParamExists {
			pathParam := pathParamRaw
			pathParamRawPtr = &pathParam
		}
		if validatorErr := validatorInstance.Var(pathParamRawPtr, "required"); validatorErr != nil {
			// Middlewares onInputValidationMiddlewares section
			for _, middleware := range onInputValidationMiddlewares {
				middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx, validatorErr)
				setRequestContext(echoCtx, middlewareCtx)
				if !continueOperation {
					return nil
				}
			}
			// End middlewares onInputValidationMiddlewares section
			fieldName := "pathParam"
			validationError := wrapValidatorError(validatorErr, "GetWithAllParamsPtr", fieldName)
			// validation error response extension placeholder
			return echoCtx.JSON(http.StatusUnprocessableEntity, validationError)
		}
		var headerParamRawPtr *string = nil
		headerParamRaw := echoCtx.Request().Header.Get("headerParam")
		_, isheaderParamExists := echoCtx.Request().Header["headerParam"]
		if !isheaderParamExists {
			// In echo, the echoCtx.Request().Header["key"] is not 100% reliable, so we need other check, but only if is was not found in the first method
			headerValues := echoCtx.Request().Header.Values("headerParam")
			isheaderParamExists = len(headerValues) > 0
		}
		if isheaderParamExists {
			headerParam := headerParamRaw
			headerParamRawPtr = &headerParam
		}
		// Middlewares beforeOperationMiddlewares section
		for _, middleware := range beforeOperationMiddlewares {
			middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx)
			setRequestContext(echoCtx, middlewareCtx)
			if !continueOperation {
				return nil
			}
		}
		// End middlewares beforeOperationMiddlewares section
		// before operation routes extension placeholder
		value, opError := controller.GetWithAllParamsPtr(queryParamRawPtr, pathParamRawPtr, headerParamRawPtr)
		for key, value := range controller.GetHeaders() {
			echoCtx.Response().Header().Set(key, value)
		}
		// response headers extension placeholder
		statusCode := getStatusCode(&controller, true, opError)
		if opError != nil {
			// Middlewares onErrorMiddlewares section
			for _, middleware := range onErrorMiddlewares {
				middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx, opError)
				setRequestContext(echoCtx, middlewareCtx)
				if !continueOperation {
					return nil
				}
			}
			// End middlewares onErrorMiddlewares section
			stdError := runtime.Rfc7807Error{
				Type:       http.StatusText(statusCode),
				Detail:     "Encountered an error during operation 'GetWithAllParamsPtr'",
				Status:     statusCode,
				Instance:   "/controller/error/GetWithAllParamsPtr",
				Extensions: map[string]string{"error": opError.Error()},
			}
			// json error response extension placeholder
			return echoCtx.JSON(statusCode, stdError)
		}
		// json response extension placeholder
		// Middlewares afterOperationSuccessMiddlewares section
		for _, middleware := range afterOperationSuccessMiddlewares {
			middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx)
			setRequestContext(echoCtx, middlewareCtx)
			if !continueOperation {
				return nil
			}
		}
		// End middlewares afterOperationSuccessMiddlewares section
		// after operation routes extension placeholder
		echoCtx.JSON(statusCode, value)
		// route end routes extension placeholder
		return nil
	})
	engine.GET(toEchoUrl("/e2e/get-with-all-params-required-ptr/{pathParam}"), func(echoCtx echo.Context) error {
		// route start routes extension placeholder
		authErr := authorize(
			echoCtx,
			[]SecurityCheckList{
				{
					Relation: SecurityListRelationAnd,
					Checks: []runtime.SecurityCheck{
						{
							SchemaName: "securitySchemaName2",
							Scopes: []string{
								"config",
							},
						},
					},
				},
			},
		)
		if authErr != nil {
			return handleAuthorizationError(echoCtx, authErr, "GetWithAllParamsRequiredPtr")
		}
		controller := E2EControllerImport.E2EController{}
		controller.InitController(echoCtx)
		var queryParamRawPtr *string = nil
		queryParamRaw := echoCtx.QueryParam("queryParam")
		isqueryParamExists := echoCtx.Request().URL.Query().Has("queryParam")
		if isqueryParamExists {
			queryParam := queryParamRaw
			queryParamRawPtr = &queryParam
		}
		if validatorErr := validatorInstance.Var(queryParamRawPtr, "required"); validatorErr != nil {
			// Middlewares onInputValidationMiddlewares section
			for _, middleware := range onInputValidationMiddlewares {
				middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx, validatorErr)
				setRequestContext(echoCtx, middlewareCtx)
				if !continueOperation {
					return nil
				}
			}
			// End middlewares onInputValidationMiddlewares section
			fieldName := "queryParam"
			validationError := wrapValidatorError(validatorErr, "GetWithAllParamsRequiredPtr", fieldName)
			// validation error response extension placeholder
			return echoCtx.JSON(http.StatusUnprocessableEntity, validationError)
		}
		var pathParamRawPtr *string = nil
		pathParamRaw := echoCtx.Param("pathParam")
		ispathParamExists := true // if parameter is in route but not provided, it won't reach this handler
		if ispathParamExists {
			pathParam := pathParamRaw
			pathParamRawPtr = &pathParam
		}
		if validatorErr := validatorInstance.Var(pathParamRawPtr, "required"); validatorErr != nil {
			// Middlewares onInputValidationMiddlewares section
			for _, middleware := range onInputValidationMiddlewares {
				middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx, validatorErr)
				setRequestContext(echoCtx, middlewareCtx)
				if !continueOperation {
					return nil
				}
			}
			// End middlewares onInputValidationMiddlewares section
			fieldName := "pathParam"
			validationError := wrapValidatorError(validatorErr, "GetWithAllParamsRequiredPtr", fieldName)
			// validation error response extension placeholder
			return echoCtx.JSON(http.StatusUnprocessableEntity, validationError)
		}
		var headerParamRawPtr *string = nil
		headerParamRaw := echoCtx.Request().Header.Get("headerParam")
		_, isheaderParamExists := echoCtx.Request().Header["headerParam"]
		if !isheaderParamExists {
			// In echo, the echoCtx.Request().Header["key"] is not 100% reliable, so we need other check, but only if is was not found in the first method
			headerValues := echoCtx.Request().Header.Values("headerParam")
			isheaderParamExists = len(headerValues) > 0
		}
		if isheaderParamExists {
			headerParam := headerParamRaw
			headerParamRawPtr = &headerParam
		}
		if validatorErr := validatorInstance.Var(headerParamRawPtr, "required"); validatorErr != nil {
			// Middlewares onInputValidationMiddlewares section
			for _, middleware := range onInputValidationMiddlewares {
				middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx, validatorErr)
				setRequestContext(echoCtx, middlewareCtx)
				if !continueOperation {
					return nil
				}
			}
			// End middlewares onInputValidationMiddlewares section
			fieldName := "headerParam"
			validationError := wrapValidatorError(validatorErr, "GetWithAllParamsRequiredPtr", fieldName)
			// validation error response extension placeholder
			return echoCtx.JSON(http.StatusUnprocessableEntity, validationError)
		}
		// Middlewares beforeOperationMiddlewares section
		for _, middleware := range beforeOperationMiddlewares {
			middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx)
			setRequestContext(echoCtx, middlewareCtx)
			if !continueOperation {
				return nil
			}
		}
		// End middlewares beforeOperationMiddlewares section
		// before operation routes extension placeholder
		value, opError := controller.GetWithAllParamsRequiredPtr(queryParamRawPtr, pathParamRawPtr, headerParamRawPtr)
		for key, value := range controller.GetHeaders() {
			echoCtx.Response().Header().Set(key, value)
		}
		// response headers extension placeholder
		statusCode := getStatusCode(&controller, true, opError)
		if opError != nil {
			// Middlewares onErrorMiddlewares section
			for _, middleware := range onErrorMiddlewares {
				middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx, opError)
				setRequestContext(echoCtx, middlewareCtx)
				if !continueOperation {
					return nil
				}
			}
			// End middlewares onErrorMiddlewares section
			stdError := runtime.Rfc7807Error{
				Type:       http.StatusText(statusCode),
				Detail:     "Encountered an error during operation 'GetWithAllParamsRequiredPtr'",
				Status:     statusCode,
				Instance:   "/controller/error/GetWithAllParamsRequiredPtr",
				Extensions: map[string]string{"error": opError.Error()},
			}
			// json error response extension placeholder
			return echoCtx.JSON(statusCode, stdError)
		}
		// json response extension placeholder
		// Middlewares afterOperationSuccessMiddlewares section
		for _, middleware := range afterOperationSuccessMiddlewares {
			middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx)
			setRequestContext(echoCtx, middlewareCtx)
			if !continueOperation {
				return nil
			}
		}
		// End middlewares afterOperationSuccessMiddlewares section
		// after operation routes extension placeholder
		echoCtx.JSON(statusCode, value)
		// route end routes extension placeholder
		return nil
	})
	engine.POST(toEchoUrl("/e2e/post-with-all-params-body"), func(echoCtx echo.Context) error {
		// route start routes extension placeholder
		authErr := authorize(
			echoCtx,
			[]SecurityCheckList{
				{
					Relation: SecurityListRelationAnd,
					Checks: []runtime.SecurityCheck{
						{
							SchemaName: "securitySchemaName2",
							Scopes: []string{
								"config",
							},
						},
					},
				},
			},
		)
		if authErr != nil {
			return handleAuthorizationError(echoCtx, authErr, "PostWithAllParamsWithBody")
		}
		controller := E2EControllerImport.E2EController{}
		controller.InitController(echoCtx)
		var conversionErr error
		var queryParamRawPtr *string = nil
		queryParamRaw := echoCtx.QueryParam("queryParam")
		isqueryParamExists := echoCtx.Request().URL.Query().Has("queryParam")
		if isqueryParamExists {
			queryParam := queryParamRaw
			queryParamRawPtr = &queryParam
		}
		if validatorErr := validatorInstance.Var(queryParamRawPtr, "required"); validatorErr != nil {
			// Middlewares onInputValidationMiddlewares section
			for _, middleware := range onInputValidationMiddlewares {
				middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx, validatorErr)
				setRequestContext(echoCtx, middlewareCtx)
				if !continueOperation {
					return nil
				}
			}
			// End middlewares onInputValidationMiddlewares section
			fieldName := "queryParam"
			validationError := wrapValidatorError(validatorErr, "PostWithAllParamsWithBody", fieldName)
			// validation error response extension placeholder
			return echoCtx.JSON(http.StatusUnprocessableEntity, validationError)
		}
		var headerParamRawPtr *string = nil
		headerParamRaw := echoCtx.Request().Header.Get("headerParam")
		_, isheaderParamExists := echoCtx.Request().Header["headerParam"]
		if !isheaderParamExists {
			// In echo, the echoCtx.Request().Header["key"] is not 100% reliable, so we need other check, but only if is was not found in the first method
			headerValues := echoCtx.Request().Header.Values("headerParam")
			isheaderParamExists = len(headerValues) > 0
		}
		if isheaderParamExists {
			headerParam := headerParamRaw
			headerParamRawPtr = &headerParam
		}
		if validatorErr := validatorInstance.Var(headerParamRawPtr, "required"); validatorErr != nil {
			// Middlewares onInputValidationMiddlewares section
			for _, middleware := range onInputValidationMiddlewares {
				middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx, validatorErr)
				setRequestContext(echoCtx, middlewareCtx)
				if !continueOperation {
					return nil
				}
			}
			// End middlewares onInputValidationMiddlewares section
			fieldName := "headerParam"
			validationError := wrapValidatorError(validatorErr, "PostWithAllParamsWithBody", fieldName)
			// validation error response extension placeholder
			return echoCtx.JSON(http.StatusUnprocessableEntity, validationError)
		}
		var theBodyRawPtr *Param41theBody.BodyInfo = nil
		conversionErr = bindAndValidateBody(echoCtx, "application/json", "required", &theBodyRawPtr)
		if conversionErr != nil {
			// Middlewares onInputValidationMiddlewares section
			for _, middleware := range onInputValidationMiddlewares {
				middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx, conversionErr)
				setRequestContext(echoCtx, middlewareCtx)
				if !continueOperation {
					return nil
				}
			}
			// End middlewares onInputValidationMiddlewares section
			validationError := runtime.Rfc7807Error{
				Type: http.StatusText(http.StatusUnprocessableEntity),
				Detail: fmt.Sprintf(
					"A request was made to operation 'PostWithAllParamsWithBody' but body parameter '%s' did not pass validation of '%s' - %s",
					"theBody",
					"BodyInfo",
					extractValidationErrorMessage(conversionErr, nil),
				),
				Status:   http.StatusUnprocessableEntity,
				Instance: "/validation/error/PostWithAllParamsWithBody",
			}
			// json body validation error response extension placeholder
			return echoCtx.JSON(http.StatusUnprocessableEntity, validationError)
		}
		// Middlewares beforeOperationMiddlewares section
		for _, middleware := range beforeOperationMiddlewares {
			middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx)
			setRequestContext(echoCtx, middlewareCtx)
			if !continueOperation {
				return nil
			}
		}
		// End middlewares beforeOperationMiddlewares section
		// before operation routes extension placeholder
		value, opError := controller.PostWithAllParamsWithBody(*queryParamRawPtr, *headerParamRawPtr, *theBodyRawPtr)
		for key, value := range controller.GetHeaders() {
			echoCtx.Response().Header().Set(key, value)
		}
		// response headers extension placeholder
		statusCode := getStatusCode(&controller, true, opError)
		if opError != nil {
			// Middlewares onErrorMiddlewares section
			for _, middleware := range onErrorMiddlewares {
				middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx, opError)
				setRequestContext(echoCtx, middlewareCtx)
				if !continueOperation {
					return nil
				}
			}
			// End middlewares onErrorMiddlewares section
			stdError := runtime.Rfc7807Error{
				Type:       http.StatusText(statusCode),
				Detail:     "Encountered an error during operation 'PostWithAllParamsWithBody'",
				Status:     statusCode,
				Instance:   "/controller/error/PostWithAllParamsWithBody",
				Extensions: map[string]string{"error": opError.Error()},
			}
			// json error response extension placeholder
			return echoCtx.JSON(statusCode, stdError)
		}
		// json response extension placeholder
		// Middlewares afterOperationSuccessMiddlewares section
		for _, middleware := range afterOperationSuccessMiddlewares {
			middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx)
			setRequestContext(echoCtx, middlewareCtx)
			if !continueOperation {
				return nil
			}
		}
		// End middlewares afterOperationSuccessMiddlewares section
		// after operation routes extension placeholder
		echoCtx.JSON(statusCode, value)
		// route end routes extension placeholder
		return nil
	})
	engine.POST(toEchoUrl("/e2e/post-with-all-params-body-ptr"), func(echoCtx echo.Context) error {
		// route start routes extension placeholder
		authErr := authorize(
			echoCtx,
			[]SecurityCheckList{
				{
					Relation: SecurityListRelationAnd,
					Checks: []runtime.SecurityCheck{
						{
							SchemaName: "securitySchemaName2",
							Scopes: []string{
								"config",
							},
						},
					},
				},
			},
		)
		if authErr != nil {
			return handleAuthorizationError(echoCtx, authErr, "PostWithAllParamsWithBodyPtr")
		}
		controller := E2EControllerImport.E2EController{}
		controller.InitController(echoCtx)
		var conversionErr error
		var queryParamRawPtr *string = nil
		queryParamRaw := echoCtx.QueryParam("queryParam")
		isqueryParamExists := echoCtx.Request().URL.Query().Has("queryParam")
		if isqueryParamExists {
			queryParam := queryParamRaw
			queryParamRawPtr = &queryParam
		}
		var headerParamRawPtr *string = nil
		headerParamRaw := echoCtx.Request().Header.Get("headerParam")
		_, isheaderParamExists := echoCtx.Request().Header["headerParam"]
		if !isheaderParamExists {
			// In echo, the echoCtx.Request().Header["key"] is not 100% reliable, so we need other check, but only if is was not found in the first method
			headerValues := echoCtx.Request().Header.Values("headerParam")
			isheaderParamExists = len(headerValues) > 0
		}
		if isheaderParamExists {
			headerParam := headerParamRaw
			headerParamRawPtr = &headerParam
		}
		var theBodyRawPtr *Param46theBody.BodyInfo = nil
		conversionErr = bindAndValidateBody(echoCtx, "application/json", "", &theBodyRawPtr)
		if conversionErr != nil {
			// Middlewares onInputValidationMiddlewares section
			for _, middleware := range onInputValidationMiddlewares {
				middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx, conversionErr)
				setRequestContext(echoCtx, middlewareCtx)
				if !continueOperation {
					return nil
				}
			}
			// End middlewares onInputValidationMiddlewares section
			validationError := runtime.Rfc7807Error{
				Type: http.StatusText(http.StatusUnprocessableEntity),
				Detail: fmt.Sprintf(
					"A request was made to operation 'PostWithAllParamsWithBodyPtr' but body parameter '%s' did not pass validation of '%s' - %s",
					"theBody",
					"BodyInfo",
					extractValidationErrorMessage(conversionErr, nil),
				),
				Status:   http.StatusUnprocessableEntity,
				Instance: "/validation/error/PostWithAllParamsWithBodyPtr",
			}
			// json body validation error response extension placeholder
			return echoCtx.JSON(http.StatusUnprocessableEntity, validationError)
		}
		// Middlewares beforeOperationMiddlewares section
		for _, middleware := range beforeOperationMiddlewares {
			middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx)
			setRequestContext(echoCtx, middlewareCtx)
			if !continueOperation {
				return nil
			}
		}
		// End middlewares beforeOperationMiddlewares section
		// before operation routes extension placeholder
		value, opError := controller.PostWithAllParamsWithBodyPtr(queryParamRawPtr, headerParamRawPtr, theBodyRawPtr)
		for key, value := range controller.GetHeaders() {
			echoCtx.Response().Header().Set(key, value)
		}
		// response headers extension placeholder
		statusCode := getStatusCode(&controller, true, opError)
		if opError != nil {
			// Middlewares onErrorMiddlewares section
			for _, middleware := range onErrorMiddlewares {
				middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx, opError)
				setRequestContext(echoCtx, middlewareCtx)
				if !continueOperation {
					return nil
				}
			}
			// End middlewares onErrorMiddlewares section
			stdError := runtime.Rfc7807Error{
				Type:       http.StatusText(statusCode),
				Detail:     "Encountered an error during operation 'PostWithAllParamsWithBodyPtr'",
				Status:     statusCode,
				Instance:   "/controller/error/PostWithAllParamsWithBodyPtr",
				Extensions: map[string]string{"error": opError.Error()},
			}
			// json error response extension placeholder
			return echoCtx.JSON(statusCode, stdError)
		}
		// json response extension placeholder
		// Middlewares afterOperationSuccessMiddlewares section
		for _, middleware := range afterOperationSuccessMiddlewares {
			middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx)
			setRequestContext(echoCtx, middlewareCtx)
			if !continueOperation {
				return nil
			}
		}
		// End middlewares afterOperationSuccessMiddlewares section
		// after operation routes extension placeholder
		echoCtx.JSON(statusCode, value)
		// route end routes extension placeholder
		return nil
	})
	engine.POST(toEchoUrl("/e2e/post-with-all-params-body-required-ptr"), func(echoCtx echo.Context) error {
		// route start routes extension placeholder
		authErr := authorize(
			echoCtx,
			[]SecurityCheckList{
				{
					Relation: SecurityListRelationAnd,
					Checks: []runtime.SecurityCheck{
						{
							SchemaName: "securitySchemaName2",
							Scopes: []string{
								"config",
							},
						},
					},
				},
			},
		)
		if authErr != nil {
			return handleAuthorizationError(echoCtx, authErr, "PostWithAllParamsWithBodyRequiredPtr")
		}
		controller := E2EControllerImport.E2EController{}
		controller.InitController(echoCtx)
		var conversionErr error
		var theBodyRawPtr *Param49theBody.BodyInfo = nil
		conversionErr = bindAndValidateBody(echoCtx, "application/json", "required", &theBodyRawPtr)
		if conversionErr != nil {
			// Middlewares onInputValidationMiddlewares section
			for _, middleware := range onInputValidationMiddlewares {
				middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx, conversionErr)
				setRequestContext(echoCtx, middlewareCtx)
				if !continueOperation {
					return nil
				}
			}
			// End middlewares onInputValidationMiddlewares section
			validationError := runtime.Rfc7807Error{
				Type: http.StatusText(http.StatusUnprocessableEntity),
				Detail: fmt.Sprintf(
					"A request was made to operation 'PostWithAllParamsWithBodyRequiredPtr' but body parameter '%s' did not pass validation of '%s' - %s",
					"theBody",
					"BodyInfo",
					extractValidationErrorMessage(conversionErr, nil),
				),
				Status:   http.StatusUnprocessableEntity,
				Instance: "/validation/error/PostWithAllParamsWithBodyRequiredPtr",
			}
			// json body validation error response extension placeholder
			return echoCtx.JSON(http.StatusUnprocessableEntity, validationError)
		}
		// Middlewares beforeOperationMiddlewares section
		for _, middleware := range beforeOperationMiddlewares {
			middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx)
			setRequestContext(echoCtx, middlewareCtx)
			if !continueOperation {
				return nil
			}
		}
		// End middlewares beforeOperationMiddlewares section
		// before operation routes extension placeholder
		value, opError := controller.PostWithAllParamsWithBodyRequiredPtr(theBodyRawPtr)
		for key, value := range controller.GetHeaders() {
			echoCtx.Response().Header().Set(key, value)
		}
		// response headers extension placeholder
		statusCode := getStatusCode(&controller, true, opError)
		if opError != nil {
			// Middlewares onErrorMiddlewares section
			for _, middleware := range onErrorMiddlewares {
				middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx, opError)
				setRequestContext(echoCtx, middlewareCtx)
				if !continueOperation {
					return nil
				}
			}
			// End middlewares onErrorMiddlewares section
			stdError := runtime.Rfc7807Error{
				Type:       http.StatusText(statusCode),
				Detail:     "Encountered an error during operation 'PostWithAllParamsWithBodyRequiredPtr'",
				Status:     statusCode,
				Instance:   "/controller/error/PostWithAllParamsWithBodyRequiredPtr",
				Extensions: map[string]string{"error": opError.Error()},
			}
			// json error response extension placeholder
			return echoCtx.JSON(statusCode, stdError)
		}
		// json response extension placeholder
		// Middlewares afterOperationSuccessMiddlewares section
		for _, middleware := range afterOperationSuccessMiddlewares {
			middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx)
			setRequestContext(echoCtx, middlewareCtx)
			if !continueOperation {
				return nil
			}
		}
		// End middlewares afterOperationSuccessMiddlewares section
		// after operation routes extension placeholder
		echoCtx.JSON(statusCode, value)
		// route end routes extension placeholder
		return nil
	})
	engine.GET(toEchoUrl("/e2e/get-header-start-with-letter"), func(echoCtx echo.Context) error {
		// route start routes extension placeholder
		authErr := authorize(
			echoCtx,
			[]SecurityCheckList{
				{
					Relation: SecurityListRelationAnd,
					Checks: []runtime.SecurityCheck{
						{
							SchemaName: "securitySchemaName2",
							Scopes: []string{
								"config",
							},
						},
					},
				},
			},
		)
		if authErr != nil {
			return handleAuthorizationError(echoCtx, authErr, "GetHeaderStartWithLetter")
		}
		controller := E2EControllerImport.E2EController{}
		controller.InitController(echoCtx)
		var headerParamRawPtr *string = nil
		headerParamRaw := echoCtx.Request().Header.Get("headerParam")
		_, isheaderParamExists := echoCtx.Request().Header["headerParam"]
		if !isheaderParamExists {
			// In echo, the echoCtx.Request().Header["key"] is not 100% reliable, so we need other check, but only if is was not found in the first method
			headerValues := echoCtx.Request().Header.Values("headerParam")
			isheaderParamExists = len(headerValues) > 0
		}
		if isheaderParamExists {
			headerParam := headerParamRaw
			headerParamRawPtr = &headerParam
		}
		if validatorErr := validatorInstance.Var(headerParamRawPtr, "required,validate_starts_with_letter"); validatorErr != nil {
			// Middlewares onInputValidationMiddlewares section
			for _, middleware := range onInputValidationMiddlewares {
				middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx, validatorErr)
				setRequestContext(echoCtx, middlewareCtx)
				if !continueOperation {
					return nil
				}
			}
			// End middlewares onInputValidationMiddlewares section
			fieldName := "headerParam"
			validationError := wrapValidatorError(validatorErr, "GetHeaderStartWithLetter", fieldName)
			// validation error response extension placeholder
			return echoCtx.JSON(http.StatusUnprocessableEntity, validationError)
		}
		// Middlewares beforeOperationMiddlewares section
		for _, middleware := range beforeOperationMiddlewares {
			middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx)
			setRequestContext(echoCtx, middlewareCtx)
			if !continueOperation {
				return nil
			}
		}
		// End middlewares beforeOperationMiddlewares section
		// before operation routes extension placeholder
		value, opError := controller.GetHeaderStartWithLetter(*headerParamRawPtr)
		for key, value := range controller.GetHeaders() {
			echoCtx.Response().Header().Set(key, value)
		}
		// response headers extension placeholder
		statusCode := getStatusCode(&controller, true, opError)
		if opError != nil {
			// Middlewares onErrorMiddlewares section
			for _, middleware := range onErrorMiddlewares {
				middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx, opError)
				setRequestContext(echoCtx, middlewareCtx)
				if !continueOperation {
					return nil
				}
			}
			// End middlewares onErrorMiddlewares section
			stdError := runtime.Rfc7807Error{
				Type:       http.StatusText(statusCode),
				Detail:     "Encountered an error during operation 'GetHeaderStartWithLetter'",
				Status:     statusCode,
				Instance:   "/controller/error/GetHeaderStartWithLetter",
				Extensions: map[string]string{"error": opError.Error()},
			}
			// json error response extension placeholder
			return echoCtx.JSON(statusCode, stdError)
		}
		// json response extension placeholder
		// Middlewares afterOperationSuccessMiddlewares section
		for _, middleware := range afterOperationSuccessMiddlewares {
			middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx)
			setRequestContext(echoCtx, middlewareCtx)
			if !continueOperation {
				return nil
			}
		}
		// End middlewares afterOperationSuccessMiddlewares section
		// after operation routes extension placeholder
		echoCtx.JSON(statusCode, value)
		// route end routes extension placeholder
		return nil
	})
	engine.GET(toEchoUrl("/e2e/with-default-config-security"), func(echoCtx echo.Context) error {
		// route start routes extension placeholder
		authErr := authorize(
			echoCtx,
			[]SecurityCheckList{
				{
					Relation: SecurityListRelationAnd,
					Checks: []runtime.SecurityCheck{
						{
							SchemaName: "securitySchemaName2",
							Scopes: []string{
								"config",
							},
						},
					},
				},
			},
		)
		if authErr != nil {
			return handleAuthorizationError(echoCtx, authErr, "WithDefaultConfigSecurity")
		}
		controller := E2EControllerImport.E2EController{}
		controller.InitController(echoCtx)
		var headerParamRawPtr *string = nil
		headerParamRaw := echoCtx.Request().Header.Get("x-test-scopes")
		_, isheaderParamExists := echoCtx.Request().Header["x-test-scopes"]
		if !isheaderParamExists {
			// In echo, the echoCtx.Request().Header["key"] is not 100% reliable, so we need other check, but only if is was not found in the first method
			headerValues := echoCtx.Request().Header.Values("x-test-scopes")
			isheaderParamExists = len(headerValues) > 0
		}
		if isheaderParamExists {
			headerParam := headerParamRaw
			headerParamRawPtr = &headerParam
		}
		if validatorErr := validatorInstance.Var(headerParamRawPtr, "required"); validatorErr != nil {
			// Middlewares onInputValidationMiddlewares section
			for _, middleware := range onInputValidationMiddlewares {
				middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx, validatorErr)
				setRequestContext(echoCtx, middlewareCtx)
				if !continueOperation {
					return nil
				}
			}
			// End middlewares onInputValidationMiddlewares section
			fieldName := "headerParam"
			validationError := wrapValidatorError(validatorErr, "WithDefaultConfigSecurity", fieldName)
			// validation error response extension placeholder
			return echoCtx.JSON(http.StatusUnprocessableEntity, validationError)
		}
		// Middlewares beforeOperationMiddlewares section
		for _, middleware := range beforeOperationMiddlewares {
			middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx)
			setRequestContext(echoCtx, middlewareCtx)
			if !continueOperation {
				return nil
			}
		}
		// End middlewares beforeOperationMiddlewares section
		// before operation routes extension placeholder
		value, opError := controller.WithDefaultConfigSecurity(*headerParamRawPtr)
		for key, value := range controller.GetHeaders() {
			echoCtx.Response().Header().Set(key, value)
		}
		// response headers extension placeholder
		statusCode := getStatusCode(&controller, true, opError)
		if opError != nil {
			// Middlewares onErrorMiddlewares section
			for _, middleware := range onErrorMiddlewares {
				middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx, opError)
				setRequestContext(echoCtx, middlewareCtx)
				if !continueOperation {
					return nil
				}
			}
			// End middlewares onErrorMiddlewares section
			stdError := runtime.Rfc7807Error{
				Type:       http.StatusText(statusCode),
				Detail:     "Encountered an error during operation 'WithDefaultConfigSecurity'",
				Status:     statusCode,
				Instance:   "/controller/error/WithDefaultConfigSecurity",
				Extensions: map[string]string{"error": opError.Error()},
			}
			// json error response extension placeholder
			return echoCtx.JSON(statusCode, stdError)
		}
		// json response extension placeholder
		// Middlewares afterOperationSuccessMiddlewares section
		for _, middleware := range afterOperationSuccessMiddlewares {
			middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx)
			setRequestContext(echoCtx, middlewareCtx)
			if !continueOperation {
				return nil
			}
		}
		// End middlewares afterOperationSuccessMiddlewares section
		// after operation routes extension placeholder
		echoCtx.JSON(statusCode, value)
		// route end routes extension placeholder
		return nil
	})
	engine.GET(toEchoUrl("/e2e/with-one-security"), func(echoCtx echo.Context) error {
		// route start routes extension placeholder
		authErr := authorize(
			echoCtx,
			[]SecurityCheckList{
				{
					Relation: SecurityListRelationAnd,
					Checks: []runtime.SecurityCheck{
						{
							SchemaName: "securitySchemaName",
							Scopes: []string{
								"other",
							},
						},
					},
				},
			},
		)
		if authErr != nil {
			return handleAuthorizationError(echoCtx, authErr, "WithOneSecurity")
		}
		controller := E2EControllerImport.E2EController{}
		controller.InitController(echoCtx)
		var headerParamRawPtr *string = nil
		headerParamRaw := echoCtx.Request().Header.Get("x-test-scopes")
		_, isheaderParamExists := echoCtx.Request().Header["x-test-scopes"]
		if !isheaderParamExists {
			// In echo, the echoCtx.Request().Header["key"] is not 100% reliable, so we need other check, but only if is was not found in the first method
			headerValues := echoCtx.Request().Header.Values("x-test-scopes")
			isheaderParamExists = len(headerValues) > 0
		}
		if isheaderParamExists {
			headerParam := headerParamRaw
			headerParamRawPtr = &headerParam
		}
		if validatorErr := validatorInstance.Var(headerParamRawPtr, "required"); validatorErr != nil {
			// Middlewares onInputValidationMiddlewares section
			for _, middleware := range onInputValidationMiddlewares {
				middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx, validatorErr)
				setRequestContext(echoCtx, middlewareCtx)
				if !continueOperation {
					return nil
				}
			}
			// End middlewares onInputValidationMiddlewares section
			fieldName := "headerParam"
			validationError := wrapValidatorError(validatorErr, "WithOneSecurity", fieldName)
			// validation error response extension placeholder
			return echoCtx.JSON(http.StatusUnprocessableEntity, validationError)
		}
		// Middlewares beforeOperationMiddlewares section
		for _, middleware := range beforeOperationMiddlewares {
			middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx)
			setRequestContext(echoCtx, middlewareCtx)
			if !continueOperation {
				return nil
			}
		}
		// End middlewares beforeOperationMiddlewares section
		// before operation routes extension placeholder
		value, opError := controller.WithOneSecurity(*headerParamRawPtr)
		for key, value := range controller.GetHeaders() {
			echoCtx.Response().Header().Set(key, value)
		}
		// response headers extension placeholder
		statusCode := getStatusCode(&controller, true, opError)
		if opError != nil {
			// Middlewares onErrorMiddlewares section
			for _, middleware := range onErrorMiddlewares {
				middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx, opError)
				setRequestContext(echoCtx, middlewareCtx)
				if !continueOperation {
					return nil
				}
			}
			// End middlewares onErrorMiddlewares section
			stdError := runtime.Rfc7807Error{
				Type:       http.StatusText(statusCode),
				Detail:     "Encountered an error during operation 'WithOneSecurity'",
				Status:     statusCode,
				Instance:   "/controller/error/WithOneSecurity",
				Extensions: map[string]string{"error": opError.Error()},
			}
			// json error response extension placeholder
			return echoCtx.JSON(statusCode, stdError)
		}
		// json response extension placeholder
		// Middlewares afterOperationSuccessMiddlewares section
		for _, middleware := range afterOperationSuccessMiddlewares {
			middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx)
			setRequestContext(echoCtx, middlewareCtx)
			if !continueOperation {
				return nil
			}
		}
		// End middlewares afterOperationSuccessMiddlewares section
		// after operation routes extension placeholder
		echoCtx.JSON(statusCode, value)
		// route end routes extension placeholder
		return nil
	})
	engine.GET(toEchoUrl("/e2e/with-two-security"), func(echoCtx echo.Context) error {
		// route start routes extension placeholder
		authErr := authorize(
			echoCtx,
			[]SecurityCheckList{
				{
					Relation: SecurityListRelationAnd,
					Checks: []runtime.SecurityCheck{
						{
							SchemaName: "securitySchemaName",
							Scopes: []string{
								"other",
							},
						},
					},
				},
				{
					Relation: SecurityListRelationAnd,
					Checks: []runtime.SecurityCheck{
						{
							SchemaName: "securitySchemaName2",
							Scopes: []string{
								"write",
								"read",
							},
						},
					},
				},
			},
		)
		if authErr != nil {
			return handleAuthorizationError(echoCtx, authErr, "WithTwoSecurity")
		}
		controller := E2EControllerImport.E2EController{}
		controller.InitController(echoCtx)
		var headerParamRawPtr *string = nil
		headerParamRaw := echoCtx.Request().Header.Get("x-test-scopes")
		_, isheaderParamExists := echoCtx.Request().Header["x-test-scopes"]
		if !isheaderParamExists {
			// In echo, the echoCtx.Request().Header["key"] is not 100% reliable, so we need other check, but only if is was not found in the first method
			headerValues := echoCtx.Request().Header.Values("x-test-scopes")
			isheaderParamExists = len(headerValues) > 0
		}
		if isheaderParamExists {
			headerParam := headerParamRaw
			headerParamRawPtr = &headerParam
		}
		if validatorErr := validatorInstance.Var(headerParamRawPtr, "required"); validatorErr != nil {
			// Middlewares onInputValidationMiddlewares section
			for _, middleware := range onInputValidationMiddlewares {
				middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx, validatorErr)
				setRequestContext(echoCtx, middlewareCtx)
				if !continueOperation {
					return nil
				}
			}
			// End middlewares onInputValidationMiddlewares section
			fieldName := "headerParam"
			validationError := wrapValidatorError(validatorErr, "WithTwoSecurity", fieldName)
			// validation error response extension placeholder
			return echoCtx.JSON(http.StatusUnprocessableEntity, validationError)
		}
		// Middlewares beforeOperationMiddlewares section
		for _, middleware := range beforeOperationMiddlewares {
			middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx)
			setRequestContext(echoCtx, middlewareCtx)
			if !continueOperation {
				return nil
			}
		}
		// End middlewares beforeOperationMiddlewares section
		// before operation routes extension placeholder
		value, opError := controller.WithTwoSecurity(*headerParamRawPtr)
		for key, value := range controller.GetHeaders() {
			echoCtx.Response().Header().Set(key, value)
		}
		// response headers extension placeholder
		statusCode := getStatusCode(&controller, true, opError)
		if opError != nil {
			// Middlewares onErrorMiddlewares section
			for _, middleware := range onErrorMiddlewares {
				middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx, opError)
				setRequestContext(echoCtx, middlewareCtx)
				if !continueOperation {
					return nil
				}
			}
			// End middlewares onErrorMiddlewares section
			stdError := runtime.Rfc7807Error{
				Type:       http.StatusText(statusCode),
				Detail:     "Encountered an error during operation 'WithTwoSecurity'",
				Status:     statusCode,
				Instance:   "/controller/error/WithTwoSecurity",
				Extensions: map[string]string{"error": opError.Error()},
			}
			// json error response extension placeholder
			return echoCtx.JSON(statusCode, stdError)
		}
		// json response extension placeholder
		// Middlewares afterOperationSuccessMiddlewares section
		for _, middleware := range afterOperationSuccessMiddlewares {
			middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx)
			setRequestContext(echoCtx, middlewareCtx)
			if !continueOperation {
				return nil
			}
		}
		// End middlewares afterOperationSuccessMiddlewares section
		// after operation routes extension placeholder
		echoCtx.JSON(statusCode, value)
		// route end routes extension placeholder
		return nil
	})
	engine.GET(toEchoUrl("/e2e/with-two-security-same-method"), func(echoCtx echo.Context) error {
		// route start routes extension placeholder
		authErr := authorize(
			echoCtx,
			[]SecurityCheckList{
				{
					Relation: SecurityListRelationAnd,
					Checks: []runtime.SecurityCheck{
						{
							SchemaName: "securitySchemaName",
							Scopes: []string{
								"other",
							},
						},
					},
				},
				{
					Relation: SecurityListRelationAnd,
					Checks: []runtime.SecurityCheck{
						{
							SchemaName: "securitySchemaName",
							Scopes: []string{
								"write",
								"read",
							},
						},
					},
				},
			},
		)
		if authErr != nil {
			return handleAuthorizationError(echoCtx, authErr, "WithTwoSecuritySameMethod")
		}
		controller := E2EControllerImport.E2EController{}
		controller.InitController(echoCtx)
		var headerParamRawPtr *string = nil
		headerParamRaw := echoCtx.Request().Header.Get("x-test-scopes")
		_, isheaderParamExists := echoCtx.Request().Header["x-test-scopes"]
		if !isheaderParamExists {
			// In echo, the echoCtx.Request().Header["key"] is not 100% reliable, so we need other check, but only if is was not found in the first method
			headerValues := echoCtx.Request().Header.Values("x-test-scopes")
			isheaderParamExists = len(headerValues) > 0
		}
		if isheaderParamExists {
			headerParam := headerParamRaw
			headerParamRawPtr = &headerParam
		}
		if validatorErr := validatorInstance.Var(headerParamRawPtr, "required"); validatorErr != nil {
			// Middlewares onInputValidationMiddlewares section
			for _, middleware := range onInputValidationMiddlewares {
				middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx, validatorErr)
				setRequestContext(echoCtx, middlewareCtx)
				if !continueOperation {
					return nil
				}
			}
			// End middlewares onInputValidationMiddlewares section
			fieldName := "headerParam"
			validationError := wrapValidatorError(validatorErr, "WithTwoSecuritySameMethod", fieldName)
			// validation error response extension placeholder
			return echoCtx.JSON(http.StatusUnprocessableEntity, validationError)
		}
		// Middlewares beforeOperationMiddlewares section
		for _, middleware := range beforeOperationMiddlewares {
			middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx)
			setRequestContext(echoCtx, middlewareCtx)
			if !continueOperation {
				return nil
			}
		}
		// End middlewares beforeOperationMiddlewares section
		// before operation routes extension placeholder
		value, opError := controller.WithTwoSecuritySameMethod(*headerParamRawPtr)
		for key, value := range controller.GetHeaders() {
			echoCtx.Response().Header().Set(key, value)
		}
		// response headers extension placeholder
		statusCode := getStatusCode(&controller, true, opError)
		if opError != nil {
			// Middlewares onErrorMiddlewares section
			for _, middleware := range onErrorMiddlewares {
				middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx, opError)
				setRequestContext(echoCtx, middlewareCtx)
				if !continueOperation {
					return nil
				}
			}
			// End middlewares onErrorMiddlewares section
			stdError := runtime.Rfc7807Error{
				Type:       http.StatusText(statusCode),
				Detail:     "Encountered an error during operation 'WithTwoSecuritySameMethod'",
				Status:     statusCode,
				Instance:   "/controller/error/WithTwoSecuritySameMethod",
				Extensions: map[string]string{"error": opError.Error()},
			}
			// json error response extension placeholder
			return echoCtx.JSON(statusCode, stdError)
		}
		// json response extension placeholder
		// Middlewares afterOperationSuccessMiddlewares section
		for _, middleware := range afterOperationSuccessMiddlewares {
			middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx)
			setRequestContext(echoCtx, middlewareCtx)
			if !continueOperation {
				return nil
			}
		}
		// End middlewares afterOperationSuccessMiddlewares section
		// after operation routes extension placeholder
		echoCtx.JSON(statusCode, value)
		// route end routes extension placeholder
		return nil
	})
	engine.GET(toEchoUrl("/e2e/default-error"), func(echoCtx echo.Context) error {
		// route start routes extension placeholder
		authErr := authorize(
			echoCtx,
			[]SecurityCheckList{
				{
					Relation: SecurityListRelationAnd,
					Checks: []runtime.SecurityCheck{
						{
							SchemaName: "securitySchemaName2",
							Scopes: []string{
								"config",
							},
						},
					},
				},
			},
		)
		if authErr != nil {
			return handleAuthorizationError(echoCtx, authErr, "DefaultError")
		}
		controller := E2EControllerImport.E2EController{}
		controller.InitController(echoCtx)
		// Middlewares beforeOperationMiddlewares section
		for _, middleware := range beforeOperationMiddlewares {
			middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx)
			setRequestContext(echoCtx, middlewareCtx)
			if !continueOperation {
				return nil
			}
		}
		// End middlewares beforeOperationMiddlewares section
		// before operation routes extension placeholder
		opError := controller.DefaultError()
		for key, value := range controller.GetHeaders() {
			echoCtx.Response().Header().Set(key, value)
		}
		// response headers extension placeholder
		statusCode := getStatusCode(&controller, false, opError)
		if opError != nil {
			// Middlewares onErrorMiddlewares section
			for _, middleware := range onErrorMiddlewares {
				middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx, opError)
				setRequestContext(echoCtx, middlewareCtx)
				if !continueOperation {
					return nil
				}
			}
			// End middlewares onErrorMiddlewares section
			stdError := runtime.Rfc7807Error{
				Type:       http.StatusText(statusCode),
				Detail:     "Encountered an error during operation 'DefaultError'",
				Status:     statusCode,
				Instance:   "/controller/error/DefaultError",
				Extensions: map[string]string{"error": opError.Error()},
			}
			// json error response extension placeholder
			return echoCtx.JSON(statusCode, stdError)
		}
		// json response extension placeholder
		// Middlewares afterOperationSuccessMiddlewares section
		for _, middleware := range afterOperationSuccessMiddlewares {
			middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx)
			setRequestContext(echoCtx, middlewareCtx)
			if !continueOperation {
				return nil
			}
		}
		// End middlewares afterOperationSuccessMiddlewares section
		// after operation routes extension placeholder
		echoCtx.Response().WriteHeader(statusCode)
		// route end routes extension placeholder
		return nil
	})
	engine.GET(toEchoUrl("/e2e/default-error-with-payload"), func(echoCtx echo.Context) error {
		// route start routes extension placeholder
		authErr := authorize(
			echoCtx,
			[]SecurityCheckList{
				{
					Relation: SecurityListRelationAnd,
					Checks: []runtime.SecurityCheck{
						{
							SchemaName: "securitySchemaName2",
							Scopes: []string{
								"config",
							},
						},
					},
				},
			},
		)
		if authErr != nil {
			return handleAuthorizationError(echoCtx, authErr, "DefaultErrorWithPayload")
		}
		controller := E2EControllerImport.E2EController{}
		controller.InitController(echoCtx)
		// Middlewares beforeOperationMiddlewares section
		for _, middleware := range beforeOperationMiddlewares {
			middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx)
			setRequestContext(echoCtx, middlewareCtx)
			if !continueOperation {
				return nil
			}
		}
		// End middlewares beforeOperationMiddlewares section
		// before operation routes extension placeholder
		value, opError := controller.DefaultErrorWithPayload()
		for key, value := range controller.GetHeaders() {
			echoCtx.Response().Header().Set(key, value)
		}
		// response headers extension placeholder
		statusCode := getStatusCode(&controller, true, opError)
		if opError != nil {
			// Middlewares onErrorMiddlewares section
			for _, middleware := range onErrorMiddlewares {
				middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx, opError)
				setRequestContext(echoCtx, middlewareCtx)
				if !continueOperation {
					return nil
				}
			}
			// End middlewares onErrorMiddlewares section
			stdError := runtime.Rfc7807Error{
				Type:       http.StatusText(statusCode),
				Detail:     "Encountered an error during operation 'DefaultErrorWithPayload'",
				Status:     statusCode,
				Instance:   "/controller/error/DefaultErrorWithPayload",
				Extensions: map[string]string{"error": opError.Error()},
			}
			// json error response extension placeholder
			return echoCtx.JSON(statusCode, stdError)
		}
		// json response extension placeholder
		// Middlewares afterOperationSuccessMiddlewares section
		for _, middleware := range afterOperationSuccessMiddlewares {
			middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx)
			setRequestContext(echoCtx, middlewareCtx)
			if !continueOperation {
				return nil
			}
		}
		// End middlewares afterOperationSuccessMiddlewares section
		// after operation routes extension placeholder
		echoCtx.JSON(statusCode, value)
		// route end routes extension placeholder
		return nil
	})
	engine.GET(toEchoUrl("/e2e/custom-error"), func(echoCtx echo.Context) error {
		// route start routes extension placeholder
		authErr := authorize(
			echoCtx,
			[]SecurityCheckList{
				{
					Relation: SecurityListRelationAnd,
					Checks: []runtime.SecurityCheck{
						{
							SchemaName: "securitySchemaName2",
							Scopes: []string{
								"config",
							},
						},
					},
				},
			},
		)
		if authErr != nil {
			return handleAuthorizationError(echoCtx, authErr, "CustomError")
		}
		controller := E2EControllerImport.E2EController{}
		controller.InitController(echoCtx)
		// Middlewares beforeOperationMiddlewares section
		for _, middleware := range beforeOperationMiddlewares {
			middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx)
			setRequestContext(echoCtx, middlewareCtx)
			if !continueOperation {
				return nil
			}
		}
		// End middlewares beforeOperationMiddlewares section
		// before operation routes extension placeholder
		opError := controller.CustomError()
		for key, value := range controller.GetHeaders() {
			echoCtx.Response().Header().Set(key, value)
		}
		// response headers extension placeholder
		statusCode := getStatusCode(&controller, false, opError)
		emptyErr := Response70CustomError.CustomError{}
		if opError != emptyErr {
			// Middlewares onErrorMiddlewares section
			for _, middleware := range onErrorMiddlewares {
				middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx, opError)
				setRequestContext(echoCtx, middlewareCtx)
				if !continueOperation {
					return nil
				}
			}
			// End middlewares onErrorMiddlewares section
			return echoCtx.JSON(statusCode, opError)
		}
		// json response extension placeholder
		// Middlewares afterOperationSuccessMiddlewares section
		for _, middleware := range afterOperationSuccessMiddlewares {
			middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx)
			setRequestContext(echoCtx, middlewareCtx)
			if !continueOperation {
				return nil
			}
		}
		// End middlewares afterOperationSuccessMiddlewares section
		// after operation routes extension placeholder
		echoCtx.Response().WriteHeader(statusCode)
		// route end routes extension placeholder
		return nil
	})
	engine.GET(toEchoUrl("/e2e/custom-error-ptr"), func(echoCtx echo.Context) error {
		// route start routes extension placeholder
		authErr := authorize(
			echoCtx,
			[]SecurityCheckList{
				{
					Relation: SecurityListRelationAnd,
					Checks: []runtime.SecurityCheck{
						{
							SchemaName: "securitySchemaName2",
							Scopes: []string{
								"config",
							},
						},
					},
				},
			},
		)
		if authErr != nil {
			return handleAuthorizationError(echoCtx, authErr, "CustomPtrError")
		}
		controller := E2EControllerImport.E2EController{}
		controller.InitController(echoCtx)
		// Middlewares beforeOperationMiddlewares section
		for _, middleware := range beforeOperationMiddlewares {
			middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx)
			setRequestContext(echoCtx, middlewareCtx)
			if !continueOperation {
				return nil
			}
		}
		// End middlewares beforeOperationMiddlewares section
		// before operation routes extension placeholder
		opError := controller.CustomPtrError()
		for key, value := range controller.GetHeaders() {
			echoCtx.Response().Header().Set(key, value)
		}
		// response headers extension placeholder
		statusCode := getStatusCode(&controller, false, opError)
		if opError != nil {
			// Middlewares onErrorMiddlewares section
			for _, middleware := range onErrorMiddlewares {
				middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx, opError)
				setRequestContext(echoCtx, middlewareCtx)
				if !continueOperation {
					return nil
				}
			}
			// End middlewares onErrorMiddlewares section
			return echoCtx.JSON(statusCode, opError)
		}
		// json response extension placeholder
		// Middlewares afterOperationSuccessMiddlewares section
		for _, middleware := range afterOperationSuccessMiddlewares {
			middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx)
			setRequestContext(echoCtx, middlewareCtx)
			if !continueOperation {
				return nil
			}
		}
		// End middlewares afterOperationSuccessMiddlewares section
		// after operation routes extension placeholder
		echoCtx.Response().WriteHeader(statusCode)
		// route end routes extension placeholder
		return nil
	})
	engine.GET(toEchoUrl("/e2e/503-error-code"), func(echoCtx echo.Context) error {
		// route start routes extension placeholder
		authErr := authorize(
			echoCtx,
			[]SecurityCheckList{
				{
					Relation: SecurityListRelationAnd,
					Checks: []runtime.SecurityCheck{
						{
							SchemaName: "securitySchemaName2",
							Scopes: []string{
								"config",
							},
						},
					},
				},
			},
		)
		if authErr != nil {
			return handleAuthorizationError(echoCtx, authErr, "Error503")
		}
		controller := E2EControllerImport.E2EController{}
		controller.InitController(echoCtx)
		// Middlewares beforeOperationMiddlewares section
		for _, middleware := range beforeOperationMiddlewares {
			middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx)
			setRequestContext(echoCtx, middlewareCtx)
			if !continueOperation {
				return nil
			}
		}
		// End middlewares beforeOperationMiddlewares section
		// before operation routes extension placeholder
		opError := controller.Error503()
		for key, value := range controller.GetHeaders() {
			echoCtx.Response().Header().Set(key, value)
		}
		// response headers extension placeholder
		statusCode := getStatusCode(&controller, false, opError)
		if opError != nil {
			// Middlewares onErrorMiddlewares section
			for _, middleware := range onErrorMiddlewares {
				middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx, opError)
				setRequestContext(echoCtx, middlewareCtx)
				if !continueOperation {
					return nil
				}
			}
			// End middlewares onErrorMiddlewares section
			stdError := runtime.Rfc7807Error{
				Type:       http.StatusText(statusCode),
				Detail:     "Encountered an error during operation 'Error503'",
				Status:     statusCode,
				Instance:   "/controller/error/Error503",
				Extensions: map[string]string{"error": opError.Error()},
			}
			// json error response extension placeholder
			return echoCtx.JSON(statusCode, stdError)
		}
		// json response extension placeholder
		// Middlewares afterOperationSuccessMiddlewares section
		for _, middleware := range afterOperationSuccessMiddlewares {
			middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx)
			setRequestContext(echoCtx, middlewareCtx)
			if !continueOperation {
				return nil
			}
		}
		// End middlewares afterOperationSuccessMiddlewares section
		// after operation routes extension placeholder
		echoCtx.Response().WriteHeader(statusCode)
		// route end routes extension placeholder
		return nil
	})
	engine.GET(toEchoUrl("/e2e/custom-error-503"), func(echoCtx echo.Context) error {
		// route start routes extension placeholder
		authErr := authorize(
			echoCtx,
			[]SecurityCheckList{
				{
					Relation: SecurityListRelationAnd,
					Checks: []runtime.SecurityCheck{
						{
							SchemaName: "securitySchemaName2",
							Scopes: []string{
								"config",
							},
						},
					},
				},
			},
		)
		if authErr != nil {
			return handleAuthorizationError(echoCtx, authErr, "CustomError503")
		}
		controller := E2EControllerImport.E2EController{}
		controller.InitController(echoCtx)
		// Middlewares beforeOperationMiddlewares section
		for _, middleware := range beforeOperationMiddlewares {
			middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx)
			setRequestContext(echoCtx, middlewareCtx)
			if !continueOperation {
				return nil
			}
		}
		// End middlewares beforeOperationMiddlewares section
		// before operation routes extension placeholder
		opError := controller.CustomError503()
		for key, value := range controller.GetHeaders() {
			echoCtx.Response().Header().Set(key, value)
		}
		// response headers extension placeholder
		statusCode := getStatusCode(&controller, false, opError)
		emptyErr := Response73CustomError.CustomError{}
		if opError != emptyErr {
			// Middlewares onErrorMiddlewares section
			for _, middleware := range onErrorMiddlewares {
				middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx, opError)
				setRequestContext(echoCtx, middlewareCtx)
				if !continueOperation {
					return nil
				}
			}
			// End middlewares onErrorMiddlewares section
			return echoCtx.JSON(statusCode, opError)
		}
		// json response extension placeholder
		// Middlewares afterOperationSuccessMiddlewares section
		for _, middleware := range afterOperationSuccessMiddlewares {
			middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx)
			setRequestContext(echoCtx, middlewareCtx)
			if !continueOperation {
				return nil
			}
		}
		// End middlewares afterOperationSuccessMiddlewares section
		// after operation routes extension placeholder
		echoCtx.Response().WriteHeader(statusCode)
		// route end routes extension placeholder
		return nil
	})
	engine.GET(toEchoUrl("/e2e/context-access"), func(echoCtx echo.Context) error {
		// route start routes extension placeholder
		authErr := authorize(
			echoCtx,
			[]SecurityCheckList{
				{
					Relation: SecurityListRelationAnd,
					Checks: []runtime.SecurityCheck{
						{
							SchemaName: "securitySchemaName2",
							Scopes: []string{
								"config",
							},
						},
					},
				},
			},
		)
		if authErr != nil {
			return handleAuthorizationError(echoCtx, authErr, "ContextAccess")
		}
		controller := E2EControllerImport.E2EController{}
		controller.InitController(echoCtx)
		// Middlewares beforeOperationMiddlewares section
		for _, middleware := range beforeOperationMiddlewares {
			middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx)
			setRequestContext(echoCtx, middlewareCtx)
			if !continueOperation {
				return nil
			}
		}
		// End middlewares beforeOperationMiddlewares section
		// before operation routes extension placeholder
		opError := controller.ContextAccess()
		for key, value := range controller.GetHeaders() {
			echoCtx.Response().Header().Set(key, value)
		}
		// response headers extension placeholder
		statusCode := getStatusCode(&controller, false, opError)
		if opError != nil {
			// Middlewares onErrorMiddlewares section
			for _, middleware := range onErrorMiddlewares {
				middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx, opError)
				setRequestContext(echoCtx, middlewareCtx)
				if !continueOperation {
					return nil
				}
			}
			// End middlewares onErrorMiddlewares section
			stdError := runtime.Rfc7807Error{
				Type:       http.StatusText(statusCode),
				Detail:     "Encountered an error during operation 'ContextAccess'",
				Status:     statusCode,
				Instance:   "/controller/error/ContextAccess",
				Extensions: map[string]string{"error": opError.Error()},
			}
			// json error response extension placeholder
			return echoCtx.JSON(statusCode, stdError)
		}
		// json response extension placeholder
		// Middlewares afterOperationSuccessMiddlewares section
		for _, middleware := range afterOperationSuccessMiddlewares {
			middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx)
			setRequestContext(echoCtx, middlewareCtx)
			if !continueOperation {
				return nil
			}
		}
		// End middlewares afterOperationSuccessMiddlewares section
		// after operation routes extension placeholder
		echoCtx.Response().WriteHeader(statusCode)
		// route end routes extension placeholder
		return nil
	})
	engine.GET(toEchoUrl("/e2e/http-method"), func(echoCtx echo.Context) error {
		// route start routes extension placeholder
		authErr := authorize(
			echoCtx,
			[]SecurityCheckList{
				{
					Relation: SecurityListRelationAnd,
					Checks: []runtime.SecurityCheck{
						{
							SchemaName: "securitySchemaName2",
							Scopes: []string{
								"config",
							},
						},
					},
				},
			},
		)
		if authErr != nil {
			return handleAuthorizationError(echoCtx, authErr, "Get")
		}
		controller := E2EControllerImport.E2EController{}
		controller.InitController(echoCtx)
		// Middlewares beforeOperationMiddlewares section
		for _, middleware := range beforeOperationMiddlewares {
			middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx)
			setRequestContext(echoCtx, middlewareCtx)
			if !continueOperation {
				return nil
			}
		}
		// End middlewares beforeOperationMiddlewares section
		// before operation routes extension placeholder
		opError := controller.Get()
		for key, value := range controller.GetHeaders() {
			echoCtx.Response().Header().Set(key, value)
		}
		// response headers extension placeholder
		statusCode := getStatusCode(&controller, false, opError)
		if opError != nil {
			// Middlewares onErrorMiddlewares section
			for _, middleware := range onErrorMiddlewares {
				middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx, opError)
				setRequestContext(echoCtx, middlewareCtx)
				if !continueOperation {
					return nil
				}
			}
			// End middlewares onErrorMiddlewares section
			stdError := runtime.Rfc7807Error{
				Type:       http.StatusText(statusCode),
				Detail:     "Encountered an error during operation 'Get'",
				Status:     statusCode,
				Instance:   "/controller/error/Get",
				Extensions: map[string]string{"error": opError.Error()},
			}
			// json error response extension placeholder
			return echoCtx.JSON(statusCode, stdError)
		}
		// json response extension placeholder
		// Middlewares afterOperationSuccessMiddlewares section
		for _, middleware := range afterOperationSuccessMiddlewares {
			middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx)
			setRequestContext(echoCtx, middlewareCtx)
			if !continueOperation {
				return nil
			}
		}
		// End middlewares afterOperationSuccessMiddlewares section
		// after operation routes extension placeholder
		echoCtx.Response().WriteHeader(statusCode)
		// route end routes extension placeholder
		return nil
	})
	engine.POST(toEchoUrl("/e2e/http-method"), func(echoCtx echo.Context) error {
		// route start routes extension placeholder
		authErr := authorize(
			echoCtx,
			[]SecurityCheckList{
				{
					Relation: SecurityListRelationAnd,
					Checks: []runtime.SecurityCheck{
						{
							SchemaName: "securitySchemaName2",
							Scopes: []string{
								"config",
							},
						},
					},
				},
			},
		)
		if authErr != nil {
			return handleAuthorizationError(echoCtx, authErr, "Post")
		}
		controller := E2EControllerImport.E2EController{}
		controller.InitController(echoCtx)
		// Middlewares beforeOperationMiddlewares section
		for _, middleware := range beforeOperationMiddlewares {
			middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx)
			setRequestContext(echoCtx, middlewareCtx)
			if !continueOperation {
				return nil
			}
		}
		// End middlewares beforeOperationMiddlewares section
		// before operation routes extension placeholder
		opError := controller.Post()
		for key, value := range controller.GetHeaders() {
			echoCtx.Response().Header().Set(key, value)
		}
		// response headers extension placeholder
		statusCode := getStatusCode(&controller, false, opError)
		if opError != nil {
			// Middlewares onErrorMiddlewares section
			for _, middleware := range onErrorMiddlewares {
				middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx, opError)
				setRequestContext(echoCtx, middlewareCtx)
				if !continueOperation {
					return nil
				}
			}
			// End middlewares onErrorMiddlewares section
			stdError := runtime.Rfc7807Error{
				Type:       http.StatusText(statusCode),
				Detail:     "Encountered an error during operation 'Post'",
				Status:     statusCode,
				Instance:   "/controller/error/Post",
				Extensions: map[string]string{"error": opError.Error()},
			}
			// json error response extension placeholder
			return echoCtx.JSON(statusCode, stdError)
		}
		// json response extension placeholder
		// Middlewares afterOperationSuccessMiddlewares section
		for _, middleware := range afterOperationSuccessMiddlewares {
			middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx)
			setRequestContext(echoCtx, middlewareCtx)
			if !continueOperation {
				return nil
			}
		}
		// End middlewares afterOperationSuccessMiddlewares section
		// after operation routes extension placeholder
		echoCtx.Response().WriteHeader(statusCode)
		// route end routes extension placeholder
		return nil
	})
	engine.PUT(toEchoUrl("/e2e/http-method"), func(echoCtx echo.Context) error {
		// route start routes extension placeholder
		authErr := authorize(
			echoCtx,
			[]SecurityCheckList{
				{
					Relation: SecurityListRelationAnd,
					Checks: []runtime.SecurityCheck{
						{
							SchemaName: "securitySchemaName2",
							Scopes: []string{
								"config",
							},
						},
					},
				},
			},
		)
		if authErr != nil {
			return handleAuthorizationError(echoCtx, authErr, "Put")
		}
		controller := E2EControllerImport.E2EController{}
		controller.InitController(echoCtx)
		// Middlewares beforeOperationMiddlewares section
		for _, middleware := range beforeOperationMiddlewares {
			middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx)
			setRequestContext(echoCtx, middlewareCtx)
			if !continueOperation {
				return nil
			}
		}
		// End middlewares beforeOperationMiddlewares section
		// before operation routes extension placeholder
		opError := controller.Put()
		for key, value := range controller.GetHeaders() {
			echoCtx.Response().Header().Set(key, value)
		}
		// response headers extension placeholder
		statusCode := getStatusCode(&controller, false, opError)
		if opError != nil {
			// Middlewares onErrorMiddlewares section
			for _, middleware := range onErrorMiddlewares {
				middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx, opError)
				setRequestContext(echoCtx, middlewareCtx)
				if !continueOperation {
					return nil
				}
			}
			// End middlewares onErrorMiddlewares section
			stdError := runtime.Rfc7807Error{
				Type:       http.StatusText(statusCode),
				Detail:     "Encountered an error during operation 'Put'",
				Status:     statusCode,
				Instance:   "/controller/error/Put",
				Extensions: map[string]string{"error": opError.Error()},
			}
			// json error response extension placeholder
			return echoCtx.JSON(statusCode, stdError)
		}
		// json response extension placeholder
		// Middlewares afterOperationSuccessMiddlewares section
		for _, middleware := range afterOperationSuccessMiddlewares {
			middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx)
			setRequestContext(echoCtx, middlewareCtx)
			if !continueOperation {
				return nil
			}
		}
		// End middlewares afterOperationSuccessMiddlewares section
		// after operation routes extension placeholder
		echoCtx.Response().WriteHeader(statusCode)
		// route end routes extension placeholder
		return nil
	})
	engine.DELETE(toEchoUrl("/e2e/http-method"), func(echoCtx echo.Context) error {
		// route start routes extension placeholder
		authErr := authorize(
			echoCtx,
			[]SecurityCheckList{
				{
					Relation: SecurityListRelationAnd,
					Checks: []runtime.SecurityCheck{
						{
							SchemaName: "securitySchemaName2",
							Scopes: []string{
								"config",
							},
						},
					},
				},
			},
		)
		if authErr != nil {
			return handleAuthorizationError(echoCtx, authErr, "Delete")
		}
		controller := E2EControllerImport.E2EController{}
		controller.InitController(echoCtx)
		// Middlewares beforeOperationMiddlewares section
		for _, middleware := range beforeOperationMiddlewares {
			middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx)
			setRequestContext(echoCtx, middlewareCtx)
			if !continueOperation {
				return nil
			}
		}
		// End middlewares beforeOperationMiddlewares section
		// before operation routes extension placeholder
		opError := controller.Delete()
		for key, value := range controller.GetHeaders() {
			echoCtx.Response().Header().Set(key, value)
		}
		// response headers extension placeholder
		statusCode := getStatusCode(&controller, false, opError)
		if opError != nil {
			// Middlewares onErrorMiddlewares section
			for _, middleware := range onErrorMiddlewares {
				middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx, opError)
				setRequestContext(echoCtx, middlewareCtx)
				if !continueOperation {
					return nil
				}
			}
			// End middlewares onErrorMiddlewares section
			stdError := runtime.Rfc7807Error{
				Type:       http.StatusText(statusCode),
				Detail:     "Encountered an error during operation 'Delete'",
				Status:     statusCode,
				Instance:   "/controller/error/Delete",
				Extensions: map[string]string{"error": opError.Error()},
			}
			// json error response extension placeholder
			return echoCtx.JSON(statusCode, stdError)
		}
		// json response extension placeholder
		// Middlewares afterOperationSuccessMiddlewares section
		for _, middleware := range afterOperationSuccessMiddlewares {
			middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx)
			setRequestContext(echoCtx, middlewareCtx)
			if !continueOperation {
				return nil
			}
		}
		// End middlewares afterOperationSuccessMiddlewares section
		// after operation routes extension placeholder
		echoCtx.Response().WriteHeader(statusCode)
		// route end routes extension placeholder
		return nil
	})
	engine.PATCH(toEchoUrl("/e2e/http-method"), func(echoCtx echo.Context) error {
		// route start routes extension placeholder
		authErr := authorize(
			echoCtx,
			[]SecurityCheckList{
				{
					Relation: SecurityListRelationAnd,
					Checks: []runtime.SecurityCheck{
						{
							SchemaName: "securitySchemaName2",
							Scopes: []string{
								"config",
							},
						},
					},
				},
			},
		)
		if authErr != nil {
			return handleAuthorizationError(echoCtx, authErr, "Patch")
		}
		controller := E2EControllerImport.E2EController{}
		controller.InitController(echoCtx)
		// Middlewares beforeOperationMiddlewares section
		for _, middleware := range beforeOperationMiddlewares {
			middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx)
			setRequestContext(echoCtx, middlewareCtx)
			if !continueOperation {
				return nil
			}
		}
		// End middlewares beforeOperationMiddlewares section
		// before operation routes extension placeholder
		opError := controller.Patch()
		for key, value := range controller.GetHeaders() {
			echoCtx.Response().Header().Set(key, value)
		}
		// response headers extension placeholder
		statusCode := getStatusCode(&controller, false, opError)
		if opError != nil {
			// Middlewares onErrorMiddlewares section
			for _, middleware := range onErrorMiddlewares {
				middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx, opError)
				setRequestContext(echoCtx, middlewareCtx)
				if !continueOperation {
					return nil
				}
			}
			// End middlewares onErrorMiddlewares section
			stdError := runtime.Rfc7807Error{
				Type:       http.StatusText(statusCode),
				Detail:     "Encountered an error during operation 'Patch'",
				Status:     statusCode,
				Instance:   "/controller/error/Patch",
				Extensions: map[string]string{"error": opError.Error()},
			}
			// json error response extension placeholder
			return echoCtx.JSON(statusCode, stdError)
		}
		// json response extension placeholder
		// Middlewares afterOperationSuccessMiddlewares section
		for _, middleware := range afterOperationSuccessMiddlewares {
			middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx)
			setRequestContext(echoCtx, middlewareCtx)
			if !continueOperation {
				return nil
			}
		}
		// End middlewares afterOperationSuccessMiddlewares section
		// after operation routes extension placeholder
		echoCtx.Response().WriteHeader(statusCode)
		// route end routes extension placeholder
		return nil
	})
	engine.GET(toEchoUrl("/e2e/template-context-1"), func(echoCtx echo.Context) error {
		// route start routes extension placeholder
		authErr := authorize(
			echoCtx,
			[]SecurityCheckList{
				{
					Relation: SecurityListRelationAnd,
					Checks: []runtime.SecurityCheck{
						{
							SchemaName: "securitySchemaName2",
							Scopes: []string{
								"config",
							},
						},
					},
				},
			},
		)
		if authErr != nil {
			return handleAuthorizationError(echoCtx, authErr, "TemplateContext1")
		}
		controller := E2EControllerImport.E2EController{}
		controller.InitController(echoCtx)
		// Middlewares beforeOperationMiddlewares section
		for _, middleware := range beforeOperationMiddlewares {
			middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx)
			setRequestContext(echoCtx, middlewareCtx)
			if !continueOperation {
				return nil
			}
		}
		// End middlewares beforeOperationMiddlewares section
		// before operation routes extension placeholder
		value, opError := controller.TemplateContext1()
		for key, value := range controller.GetHeaders() {
			echoCtx.Response().Header().Set(key, value)
		}
		// response headers extension placeholder
		statusCode := getStatusCode(&controller, true, opError)
		if opError != nil {
			// Middlewares onErrorMiddlewares section
			for _, middleware := range onErrorMiddlewares {
				middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx, opError)
				setRequestContext(echoCtx, middlewareCtx)
				if !continueOperation {
					return nil
				}
			}
			// End middlewares onErrorMiddlewares section
			stdError := runtime.Rfc7807Error{
				Type:       http.StatusText(statusCode),
				Detail:     "Encountered an error during operation 'TemplateContext1'",
				Status:     statusCode,
				Instance:   "/controller/error/TemplateContext1",
				Extensions: map[string]string{"error": opError.Error()},
			}
			// json error response extension placeholder
			return echoCtx.JSON(statusCode, stdError)
		}
		// json response extension placeholder
		// Middlewares afterOperationSuccessMiddlewares section
		for _, middleware := range afterOperationSuccessMiddlewares {
			middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx)
			setRequestContext(echoCtx, middlewareCtx)
			if !continueOperation {
				return nil
			}
		}
		// End middlewares afterOperationSuccessMiddlewares section
		// after operation routes extension placeholder
		echoCtx.JSON(statusCode, value)
		// route end routes extension placeholder
		return nil
	})
	engine.GET(toEchoUrl("/e2e/template-context-2"), func(echoCtx echo.Context) error {
		// route start routes extension placeholder
		authErr := authorize(
			echoCtx,
			[]SecurityCheckList{
				{
					Relation: SecurityListRelationAnd,
					Checks: []runtime.SecurityCheck{
						{
							SchemaName: "securitySchemaName2",
							Scopes: []string{
								"config",
							},
						},
					},
				},
			},
		)
		if authErr != nil {
			return handleAuthorizationError(echoCtx, authErr, "TemplateContext2")
		}
		controller := E2EControllerImport.E2EController{}
		controller.InitController(echoCtx)
		// Middlewares beforeOperationMiddlewares section
		for _, middleware := range beforeOperationMiddlewares {
			middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx)
			setRequestContext(echoCtx, middlewareCtx)
			if !continueOperation {
				return nil
			}
		}
		// End middlewares beforeOperationMiddlewares section
		// before operation routes extension placeholder
		value, opError := controller.TemplateContext2()
		for key, value := range controller.GetHeaders() {
			echoCtx.Response().Header().Set(key, value)
		}
		// response headers extension placeholder
		statusCode := getStatusCode(&controller, true, opError)
		if opError != nil {
			// Middlewares onErrorMiddlewares section
			for _, middleware := range onErrorMiddlewares {
				middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx, opError)
				setRequestContext(echoCtx, middlewareCtx)
				if !continueOperation {
					return nil
				}
			}
			// End middlewares onErrorMiddlewares section
			stdError := runtime.Rfc7807Error{
				Type:       http.StatusText(statusCode),
				Detail:     "Encountered an error during operation 'TemplateContext2'",
				Status:     statusCode,
				Instance:   "/controller/error/TemplateContext2",
				Extensions: map[string]string{"error": opError.Error()},
			}
			// json error response extension placeholder
			return echoCtx.JSON(statusCode, stdError)
		}
		// json response extension placeholder
		// Middlewares afterOperationSuccessMiddlewares section
		for _, middleware := range afterOperationSuccessMiddlewares {
			middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx)
			setRequestContext(echoCtx, middlewareCtx)
			if !continueOperation {
				return nil
			}
		}
		// End middlewares afterOperationSuccessMiddlewares section
		// after operation routes extension placeholder
		echoCtx.JSON(statusCode, value)
		// route end routes extension placeholder
		return nil
	})
	engine.POST(toEchoUrl("/e2e/form"), func(echoCtx echo.Context) error {
		// route start routes extension placeholder
		authErr := authorize(
			echoCtx,
			[]SecurityCheckList{
				{
					Relation: SecurityListRelationAnd,
					Checks: []runtime.SecurityCheck{
						{
							SchemaName: "securitySchemaName2",
							Scopes: []string{
								"config",
							},
						},
					},
				},
			},
		)
		if authErr != nil {
			return handleAuthorizationError(echoCtx, authErr, "TestForm")
		}
		controller := E2EControllerImport.E2EController{}
		controller.InitController(echoCtx)
		echoCtx.Request().ParseForm()
		var item1RawPtr *string = nil
		item1RawArr, isitem1Exists := echoCtx.Request().PostForm["item1"]
		item1Raw := ""
		if isitem1Exists {
			item1Raw = item1RawArr[0] // Get first value since form values are slices
		}
		if isitem1Exists {
			item1 := item1Raw
			item1RawPtr = &item1
		}
		if validatorErr := validatorInstance.Var(item1RawPtr, "required"); validatorErr != nil {
			// Middlewares onInputValidationMiddlewares section
			for _, middleware := range onInputValidationMiddlewares {
				middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx, validatorErr)
				setRequestContext(echoCtx, middlewareCtx)
				if !continueOperation {
					return nil
				}
			}
			// End middlewares onInputValidationMiddlewares section
			fieldName := "item1"
			validationError := wrapValidatorError(validatorErr, "TestForm", fieldName)
			// validation error response extension placeholder
			return echoCtx.JSON(http.StatusUnprocessableEntity, validationError)
		}
		echoCtx.Request().ParseForm()
		var item2RawPtr *string = nil
		item2RawArr, isitem2Exists := echoCtx.Request().PostForm["item2"]
		item2Raw := ""
		if isitem2Exists {
			item2Raw = item2RawArr[0] // Get first value since form values are slices
		}
		if isitem2Exists {
			item2 := item2Raw
			item2RawPtr = &item2
		}
		if validatorErr := validatorInstance.Var(item2RawPtr, "required"); validatorErr != nil {
			// Middlewares onInputValidationMiddlewares section
			for _, middleware := range onInputValidationMiddlewares {
				middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx, validatorErr)
				setRequestContext(echoCtx, middlewareCtx)
				if !continueOperation {
					return nil
				}
			}
			// End middlewares onInputValidationMiddlewares section
			fieldName := "item2"
			validationError := wrapValidatorError(validatorErr, "TestForm", fieldName)
			// validation error response extension placeholder
			return echoCtx.JSON(http.StatusUnprocessableEntity, validationError)
		}
		// Middlewares beforeOperationMiddlewares section
		for _, middleware := range beforeOperationMiddlewares {
			middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx)
			setRequestContext(echoCtx, middlewareCtx)
			if !continueOperation {
				return nil
			}
		}
		// End middlewares beforeOperationMiddlewares section
		// before operation routes extension placeholder
		value, opError := controller.TestForm(*item1RawPtr, *item2RawPtr)
		for key, value := range controller.GetHeaders() {
			echoCtx.Response().Header().Set(key, value)
		}
		// response headers extension placeholder
		statusCode := getStatusCode(&controller, true, opError)
		if opError != nil {
			// Middlewares onErrorMiddlewares section
			for _, middleware := range onErrorMiddlewares {
				middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx, opError)
				setRequestContext(echoCtx, middlewareCtx)
				if !continueOperation {
					return nil
				}
			}
			// End middlewares onErrorMiddlewares section
			stdError := runtime.Rfc7807Error{
				Type:       http.StatusText(statusCode),
				Detail:     "Encountered an error during operation 'TestForm'",
				Status:     statusCode,
				Instance:   "/controller/error/TestForm",
				Extensions: map[string]string{"error": opError.Error()},
			}
			// json error response extension placeholder
			return echoCtx.JSON(statusCode, stdError)
		}
		// json response extension placeholder
		// Middlewares afterOperationSuccessMiddlewares section
		for _, middleware := range afterOperationSuccessMiddlewares {
			middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx)
			setRequestContext(echoCtx, middlewareCtx)
			if !continueOperation {
				return nil
			}
		}
		// End middlewares afterOperationSuccessMiddlewares section
		// after operation routes extension placeholder
		echoCtx.JSON(statusCode, value)
		// route end routes extension placeholder
		return nil
	})
	engine.POST(toEchoUrl("/e2e/test-response-validation"), func(echoCtx echo.Context) error {
		// route start routes extension placeholder
		authErr := authorize(
			echoCtx,
			[]SecurityCheckList{
				{
					Relation: SecurityListRelationAnd,
					Checks: []runtime.SecurityCheck{
						{
							SchemaName: "securitySchemaName2",
							Scopes: []string{
								"config",
							},
						},
					},
				},
			},
		)
		if authErr != nil {
			return handleAuthorizationError(echoCtx, authErr, "TestResponseValidation")
		}
		controller := E2EControllerImport.E2EController{}
		controller.InitController(echoCtx)
		// Middlewares beforeOperationMiddlewares section
		for _, middleware := range beforeOperationMiddlewares {
			middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx)
			setRequestContext(echoCtx, middlewareCtx)
			if !continueOperation {
				return nil
			}
		}
		// End middlewares beforeOperationMiddlewares section
		// before operation routes extension placeholder
		value, opError := controller.TestResponseValidation()
		for key, value := range controller.GetHeaders() {
			echoCtx.Response().Header().Set(key, value)
		}
		// response headers extension placeholder
		statusCode := getStatusCode(&controller, true, opError)
		if opError != nil {
			// Middlewares onErrorMiddlewares section
			for _, middleware := range onErrorMiddlewares {
				middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx, opError)
				setRequestContext(echoCtx, middlewareCtx)
				if !continueOperation {
					return nil
				}
			}
			// End middlewares onErrorMiddlewares section
			stdError := runtime.Rfc7807Error{
				Type:       http.StatusText(statusCode),
				Detail:     "Encountered an error during operation 'TestResponseValidation'",
				Status:     statusCode,
				Instance:   "/controller/error/TestResponseValidation",
				Extensions: map[string]string{"error": opError.Error()},
			}
			// json error response extension placeholder
			return echoCtx.JSON(statusCode, stdError)
		}
		// json response extension placeholder
		// Middlewares afterOperationSuccessMiddlewares section
		for _, middleware := range afterOperationSuccessMiddlewares {
			middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx)
			setRequestContext(echoCtx, middlewareCtx)
			if !continueOperation {
				return nil
			}
		}
		// End middlewares afterOperationSuccessMiddlewares section
		// after operation routes extension placeholder
		echoCtx.JSON(statusCode, value)
		// route end routes extension placeholder
		return nil
	})
	engine.POST(toEchoUrl("/e2e/test-response-validation-ptr"), func(echoCtx echo.Context) error {
		// route start routes extension placeholder
		authErr := authorize(
			echoCtx,
			[]SecurityCheckList{
				{
					Relation: SecurityListRelationAnd,
					Checks: []runtime.SecurityCheck{
						{
							SchemaName: "securitySchemaName2",
							Scopes: []string{
								"config",
							},
						},
					},
				},
			},
		)
		if authErr != nil {
			return handleAuthorizationError(echoCtx, authErr, "TestResponseValidationPtr")
		}
		controller := E2EControllerImport.E2EController{}
		controller.InitController(echoCtx)
		// Middlewares beforeOperationMiddlewares section
		for _, middleware := range beforeOperationMiddlewares {
			middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx)
			setRequestContext(echoCtx, middlewareCtx)
			if !continueOperation {
				return nil
			}
		}
		// End middlewares beforeOperationMiddlewares section
		// before operation routes extension placeholder
		value, opError := controller.TestResponseValidationPtr()
		for key, value := range controller.GetHeaders() {
			echoCtx.Response().Header().Set(key, value)
		}
		// response headers extension placeholder
		statusCode := getStatusCode(&controller, true, opError)
		if opError != nil {
			// Middlewares onErrorMiddlewares section
			for _, middleware := range onErrorMiddlewares {
				middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx, opError)
				setRequestContext(echoCtx, middlewareCtx)
				if !continueOperation {
					return nil
				}
			}
			// End middlewares onErrorMiddlewares section
			stdError := runtime.Rfc7807Error{
				Type:       http.StatusText(statusCode),
				Detail:     "Encountered an error during operation 'TestResponseValidationPtr'",
				Status:     statusCode,
				Instance:   "/controller/error/TestResponseValidationPtr",
				Extensions: map[string]string{"error": opError.Error()},
			}
			// json error response extension placeholder
			return echoCtx.JSON(statusCode, stdError)
		}
		// json response extension placeholder
		// Middlewares afterOperationSuccessMiddlewares section
		for _, middleware := range afterOperationSuccessMiddlewares {
			middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx)
			setRequestContext(echoCtx, middlewareCtx)
			if !continueOperation {
				return nil
			}
		}
		// End middlewares afterOperationSuccessMiddlewares section
		// after operation routes extension placeholder
		echoCtx.JSON(statusCode, value)
		// route end routes extension placeholder
		return nil
	})
	engine.POST(toEchoUrl("/e2e/test-response-validation-null"), func(echoCtx echo.Context) error {
		// route start routes extension placeholder
		authErr := authorize(
			echoCtx,
			[]SecurityCheckList{
				{
					Relation: SecurityListRelationAnd,
					Checks: []runtime.SecurityCheck{
						{
							SchemaName: "securitySchemaName2",
							Scopes: []string{
								"config",
							},
						},
					},
				},
			},
		)
		if authErr != nil {
			return handleAuthorizationError(echoCtx, authErr, "TestResponseValidationNull")
		}
		controller := E2EControllerImport.E2EController{}
		controller.InitController(echoCtx)
		// Middlewares beforeOperationMiddlewares section
		for _, middleware := range beforeOperationMiddlewares {
			middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx)
			setRequestContext(echoCtx, middlewareCtx)
			if !continueOperation {
				return nil
			}
		}
		// End middlewares beforeOperationMiddlewares section
		// before operation routes extension placeholder
		value, opError := controller.TestResponseValidationNull()
		for key, value := range controller.GetHeaders() {
			echoCtx.Response().Header().Set(key, value)
		}
		// response headers extension placeholder
		statusCode := getStatusCode(&controller, true, opError)
		if opError != nil {
			// Middlewares onErrorMiddlewares section
			for _, middleware := range onErrorMiddlewares {
				middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx, opError)
				setRequestContext(echoCtx, middlewareCtx)
				if !continueOperation {
					return nil
				}
			}
			// End middlewares onErrorMiddlewares section
			stdError := runtime.Rfc7807Error{
				Type:       http.StatusText(statusCode),
				Detail:     "Encountered an error during operation 'TestResponseValidationNull'",
				Status:     statusCode,
				Instance:   "/controller/error/TestResponseValidationNull",
				Extensions: map[string]string{"error": opError.Error()},
			}
			// json error response extension placeholder
			return echoCtx.JSON(statusCode, stdError)
		}
		// json response extension placeholder
		// Middlewares afterOperationSuccessMiddlewares section
		for _, middleware := range afterOperationSuccessMiddlewares {
			middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx)
			setRequestContext(echoCtx, middlewareCtx)
			if !continueOperation {
				return nil
			}
		}
		// End middlewares afterOperationSuccessMiddlewares section
		// after operation routes extension placeholder
		echoCtx.JSON(statusCode, value)
		// route end routes extension placeholder
		return nil
	})
	engine.POST(toEchoUrl("/e2e/test-primitive-conversions"), func(echoCtx echo.Context) error {
		// route start routes extension placeholder
		authErr := authorize(
			echoCtx,
			[]SecurityCheckList{
				{
					Relation: SecurityListRelationAnd,
					Checks: []runtime.SecurityCheck{
						{
							SchemaName: "securitySchemaName2",
							Scopes: []string{
								"config",
							},
						},
					},
				},
			},
		)
		if authErr != nil {
			return handleAuthorizationError(echoCtx, authErr, "TestPrimitiveConversions")
		}
		controller := E2EControllerImport.E2EController{}
		controller.InitController(echoCtx)
		var value1RawPtr *int64 = nil
		value1Raw := echoCtx.QueryParam("value1")
		isvalue1Exists := echoCtx.Request().URL.Query().Has("value1")
		if isvalue1Exists {
			value1Uint64, conversionErr := strconv.ParseInt(value1Raw, 10, 64)
			if conversionErr != nil {
				// Middlewares onInputValidationMiddlewares section
				for _, middleware := range onInputValidationMiddlewares {
					middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx, conversionErr)
					setRequestContext(echoCtx, middlewareCtx)
					if !continueOperation {
						return nil
					}
				}
				// End middlewares onInputValidationMiddlewares section
				validationError := runtime.Rfc7807Error{
					Type: http.StatusText(http.StatusUnprocessableEntity),
					Detail: fmt.Sprintf(
						"A request was made to operation 'TestPrimitiveConversions' but parameter '%s' was not properly sent - Expected %s but got %s",
						"value1",
						"int64",
						reflect.TypeOf(value1Raw).String(),
					),
					Status:     http.StatusUnprocessableEntity,
					Instance:   "/validation/error/TestPrimitiveConversions",
					Extensions: map[string]string{"error": conversionErr.Error()},
				}
				// params validation error response extension placeholder
				return echoCtx.JSON(http.StatusUnprocessableEntity, validationError)
			}
			value1 := int64(value1Uint64)
			value1RawPtr = &value1
		}
		if validatorErr := validatorInstance.Var(value1RawPtr, "required"); validatorErr != nil {
			// Middlewares onInputValidationMiddlewares section
			for _, middleware := range onInputValidationMiddlewares {
				middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx, validatorErr)
				setRequestContext(echoCtx, middlewareCtx)
				if !continueOperation {
					return nil
				}
			}
			// End middlewares onInputValidationMiddlewares section
			fieldName := "value1"
			validationError := wrapValidatorError(validatorErr, "TestPrimitiveConversions", fieldName)
			// validation error response extension placeholder
			return echoCtx.JSON(http.StatusUnprocessableEntity, validationError)
		}
		var value2RawPtr *bool = nil
		value2Raw := echoCtx.QueryParam("value2")
		isvalue2Exists := echoCtx.Request().URL.Query().Has("value2")
		if isvalue2Exists {
			value2, conversionErr := strconv.ParseBool(value2Raw)
			if conversionErr != nil {
				// Middlewares onInputValidationMiddlewares section
				for _, middleware := range onInputValidationMiddlewares {
					middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx, conversionErr)
					setRequestContext(echoCtx, middlewareCtx)
					if !continueOperation {
						return nil
					}
				}
				// End middlewares onInputValidationMiddlewares section
				validationError := runtime.Rfc7807Error{
					Type: http.StatusText(http.StatusUnprocessableEntity),
					Detail: fmt.Sprintf(
						"A request was made to operation 'TestPrimitiveConversions' but parameter '%s' was not properly sent - Expected %s but got %s",
						"value2",
						"bool",
						reflect.TypeOf(value2Raw).String(),
					),
					Status:     http.StatusUnprocessableEntity,
					Instance:   "/validation/error/TestPrimitiveConversions",
					Extensions: map[string]string{"error": conversionErr.Error()},
				}
				// params validation error response extension placeholder
				return echoCtx.JSON(http.StatusUnprocessableEntity, validationError)
			}
			value2RawPtr = &value2
		}
		if validatorErr := validatorInstance.Var(value2RawPtr, "required"); validatorErr != nil {
			// Middlewares onInputValidationMiddlewares section
			for _, middleware := range onInputValidationMiddlewares {
				middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx, validatorErr)
				setRequestContext(echoCtx, middlewareCtx)
				if !continueOperation {
					return nil
				}
			}
			// End middlewares onInputValidationMiddlewares section
			fieldName := "value2"
			validationError := wrapValidatorError(validatorErr, "TestPrimitiveConversions", fieldName)
			// validation error response extension placeholder
			return echoCtx.JSON(http.StatusUnprocessableEntity, validationError)
		}
		var value3RawPtr *int = nil
		value3Raw := echoCtx.QueryParam("value3")
		isvalue3Exists := echoCtx.Request().URL.Query().Has("value3")
		if isvalue3Exists {
			value3Uint64, conversionErr := strconv.Atoi(value3Raw)
			if conversionErr != nil {
				// Middlewares onInputValidationMiddlewares section
				for _, middleware := range onInputValidationMiddlewares {
					middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx, conversionErr)
					setRequestContext(echoCtx, middlewareCtx)
					if !continueOperation {
						return nil
					}
				}
				// End middlewares onInputValidationMiddlewares section
				validationError := runtime.Rfc7807Error{
					Type: http.StatusText(http.StatusUnprocessableEntity),
					Detail: fmt.Sprintf(
						"A request was made to operation 'TestPrimitiveConversions' but parameter '%s' was not properly sent - Expected %s but got %s",
						"value3",
						"int",
						reflect.TypeOf(value3Raw).String(),
					),
					Status:     http.StatusUnprocessableEntity,
					Instance:   "/validation/error/TestPrimitiveConversions",
					Extensions: map[string]string{"error": conversionErr.Error()},
				}
				// params validation error response extension placeholder
				return echoCtx.JSON(http.StatusUnprocessableEntity, validationError)
			}
			value3 := int(value3Uint64)
			value3RawPtr = &value3
		}
		if validatorErr := validatorInstance.Var(value3RawPtr, "required"); validatorErr != nil {
			// Middlewares onInputValidationMiddlewares section
			for _, middleware := range onInputValidationMiddlewares {
				middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx, validatorErr)
				setRequestContext(echoCtx, middlewareCtx)
				if !continueOperation {
					return nil
				}
			}
			// End middlewares onInputValidationMiddlewares section
			fieldName := "value3"
			validationError := wrapValidatorError(validatorErr, "TestPrimitiveConversions", fieldName)
			// validation error response extension placeholder
			return echoCtx.JSON(http.StatusUnprocessableEntity, validationError)
		}
		var value4RawPtr *float64 = nil
		value4Raw := echoCtx.QueryParam("value4")
		isvalue4Exists := echoCtx.Request().URL.Query().Has("value4")
		if isvalue4Exists {
			value4, conversionErr := strconv.ParseFloat(value4Raw, 64)
			if conversionErr != nil {
				// Middlewares onInputValidationMiddlewares section
				for _, middleware := range onInputValidationMiddlewares {
					middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx, conversionErr)
					setRequestContext(echoCtx, middlewareCtx)
					if !continueOperation {
						return nil
					}
				}
				// End middlewares onInputValidationMiddlewares section
				validationError := runtime.Rfc7807Error{
					Type: http.StatusText(http.StatusUnprocessableEntity),
					Detail: fmt.Sprintf(
						"A request was made to operation 'TestPrimitiveConversions' but parameter '%s' was not properly sent - Expected %s but got %s",
						"value4",
						"float64",
						reflect.TypeOf(value4Raw).String(),
					),
					Status:     http.StatusUnprocessableEntity,
					Instance:   "/validation/error/TestPrimitiveConversions",
					Extensions: map[string]string{"error": conversionErr.Error()},
				}
				// params validation error response extension placeholder
				return echoCtx.JSON(http.StatusUnprocessableEntity, validationError)
			}
			value4RawPtr = &value4
		}
		if validatorErr := validatorInstance.Var(value4RawPtr, "required"); validatorErr != nil {
			// Middlewares onInputValidationMiddlewares section
			for _, middleware := range onInputValidationMiddlewares {
				middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx, validatorErr)
				setRequestContext(echoCtx, middlewareCtx)
				if !continueOperation {
					return nil
				}
			}
			// End middlewares onInputValidationMiddlewares section
			fieldName := "value4"
			validationError := wrapValidatorError(validatorErr, "TestPrimitiveConversions", fieldName)
			// validation error response extension placeholder
			return echoCtx.JSON(http.StatusUnprocessableEntity, validationError)
		}
		// Middlewares beforeOperationMiddlewares section
		for _, middleware := range beforeOperationMiddlewares {
			middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx)
			setRequestContext(echoCtx, middlewareCtx)
			if !continueOperation {
				return nil
			}
		}
		// End middlewares beforeOperationMiddlewares section
		// before operation routes extension placeholder
		value, opError := controller.TestPrimitiveConversions(*value1RawPtr, *value2RawPtr, *value3RawPtr, *value4RawPtr)
		for key, value := range controller.GetHeaders() {
			echoCtx.Response().Header().Set(key, value)
		}
		// response headers extension placeholder
		statusCode := getStatusCode(&controller, true, opError)
		if opError != nil {
			// Middlewares onErrorMiddlewares section
			for _, middleware := range onErrorMiddlewares {
				middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx, opError)
				setRequestContext(echoCtx, middlewareCtx)
				if !continueOperation {
					return nil
				}
			}
			// End middlewares onErrorMiddlewares section
			stdError := runtime.Rfc7807Error{
				Type:       http.StatusText(statusCode),
				Detail:     "Encountered an error during operation 'TestPrimitiveConversions'",
				Status:     statusCode,
				Instance:   "/controller/error/TestPrimitiveConversions",
				Extensions: map[string]string{"error": opError.Error()},
			}
			// json error response extension placeholder
			return echoCtx.JSON(statusCode, stdError)
		}
		// json response extension placeholder
		// Middlewares afterOperationSuccessMiddlewares section
		for _, middleware := range afterOperationSuccessMiddlewares {
			middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx)
			setRequestContext(echoCtx, middlewareCtx)
			if !continueOperation {
				return nil
			}
		}
		// End middlewares afterOperationSuccessMiddlewares section
		// after operation routes extension placeholder
		echoCtx.JSON(statusCode, value)
		// route end routes extension placeholder
		return nil
	})
	engine.POST(toEchoUrl("/e2e/test-enums"), func(echoCtx echo.Context) error {
		// route start routes extension placeholder
		authErr := authorize(
			echoCtx,
			[]SecurityCheckList{
				{
					Relation: SecurityListRelationAnd,
					Checks: []runtime.SecurityCheck{
						{
							SchemaName: "securitySchemaName2",
							Scopes: []string{
								"config",
							},
						},
					},
				},
			},
		)
		if authErr != nil {
			return handleAuthorizationError(echoCtx, authErr, "TestEnums")
		}
		controller := E2EControllerImport.E2EController{}
		controller.InitController(echoCtx)
		var conversionErr error
		var value1RawPtr *Param100value1.StatusEnumeration = nil
		value1Raw := echoCtx.QueryParam("value1")
		isvalue1Exists := echoCtx.Request().URL.Query().Has("value1")
		if isvalue1Exists {
			value1 := value1Raw
			value1Var := Param100value1.StatusEnumeration(value1)
			value1RawPtr = &value1Var
		}
		if validatorErr := validatorInstance.Var(value1RawPtr, "required"); validatorErr != nil {
			// Middlewares onInputValidationMiddlewares section
			for _, middleware := range onInputValidationMiddlewares {
				middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx, validatorErr)
				setRequestContext(echoCtx, middlewareCtx)
				if !continueOperation {
					return nil
				}
			}
			// End middlewares onInputValidationMiddlewares section
			fieldName := "value1"
			validationError := wrapValidatorError(validatorErr, "TestEnums", fieldName)
			// validation error response extension placeholder
			return echoCtx.JSON(http.StatusUnprocessableEntity, validationError)
		}
		var value2RawPtr *Param101value2.NumberEnumeration = nil
		value2Raw := echoCtx.QueryParam("value2")
		isvalue2Exists := echoCtx.Request().URL.Query().Has("value2")
		if isvalue2Exists {
			value2Uint64, conversionErr := strconv.Atoi(value2Raw)
			if conversionErr != nil {
				// Middlewares onInputValidationMiddlewares section
				for _, middleware := range onInputValidationMiddlewares {
					middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx, conversionErr)
					setRequestContext(echoCtx, middlewareCtx)
					if !continueOperation {
						return nil
					}
				}
				// End middlewares onInputValidationMiddlewares section
				validationError := runtime.Rfc7807Error{
					Type: http.StatusText(http.StatusUnprocessableEntity),
					Detail: fmt.Sprintf(
						"A request was made to operation 'TestEnums' but parameter '%s' was not properly sent - Expected %s but got %s",
						"value2",
						"NumberEnumeration",
						reflect.TypeOf(value2Raw).String(),
					),
					Status:     http.StatusUnprocessableEntity,
					Instance:   "/validation/error/TestEnums",
					Extensions: map[string]string{"error": conversionErr.Error()},
				}
				// params validation error response extension placeholder
				return echoCtx.JSON(http.StatusUnprocessableEntity, validationError)
			}
			value2 := int(value2Uint64)
			value2Var := Param101value2.NumberEnumeration(value2)
			value2RawPtr = &value2Var
		}
		if validatorErr := validatorInstance.Var(value2RawPtr, "required"); validatorErr != nil {
			// Middlewares onInputValidationMiddlewares section
			for _, middleware := range onInputValidationMiddlewares {
				middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx, validatorErr)
				setRequestContext(echoCtx, middlewareCtx)
				if !continueOperation {
					return nil
				}
			}
			// End middlewares onInputValidationMiddlewares section
			fieldName := "value2"
			validationError := wrapValidatorError(validatorErr, "TestEnums", fieldName)
			// validation error response extension placeholder
			return echoCtx.JSON(http.StatusUnprocessableEntity, validationError)
		}
		var value3RawPtr *Param102value3.ObjectWithEnum = nil
		conversionErr = bindAndValidateBody(echoCtx, "application/json", "required", &value3RawPtr)
		if conversionErr != nil {
			// Middlewares onInputValidationMiddlewares section
			for _, middleware := range onInputValidationMiddlewares {
				middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx, conversionErr)
				setRequestContext(echoCtx, middlewareCtx)
				if !continueOperation {
					return nil
				}
			}
			// End middlewares onInputValidationMiddlewares section
			validationError := runtime.Rfc7807Error{
				Type: http.StatusText(http.StatusUnprocessableEntity),
				Detail: fmt.Sprintf(
					"A request was made to operation 'TestEnums' but body parameter '%s' did not pass validation of '%s' - %s",
					"value3",
					"ObjectWithEnum",
					extractValidationErrorMessage(conversionErr, nil),
				),
				Status:   http.StatusUnprocessableEntity,
				Instance: "/validation/error/TestEnums",
			}
			// json body validation error response extension placeholder
			return echoCtx.JSON(http.StatusUnprocessableEntity, validationError)
		}
		// Middlewares beforeOperationMiddlewares section
		for _, middleware := range beforeOperationMiddlewares {
			middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx)
			setRequestContext(echoCtx, middlewareCtx)
			if !continueOperation {
				return nil
			}
		}
		// End middlewares beforeOperationMiddlewares section
		// before operation routes extension placeholder
		value, opError := controller.TestEnums(*value1RawPtr, *value2RawPtr, *value3RawPtr)
		for key, value := range controller.GetHeaders() {
			echoCtx.Response().Header().Set(key, value)
		}
		// response headers extension placeholder
		statusCode := getStatusCode(&controller, true, opError)
		if opError != nil {
			// Middlewares onErrorMiddlewares section
			for _, middleware := range onErrorMiddlewares {
				middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx, opError)
				setRequestContext(echoCtx, middlewareCtx)
				if !continueOperation {
					return nil
				}
			}
			// End middlewares onErrorMiddlewares section
			stdError := runtime.Rfc7807Error{
				Type:       http.StatusText(statusCode),
				Detail:     "Encountered an error during operation 'TestEnums'",
				Status:     statusCode,
				Instance:   "/controller/error/TestEnums",
				Extensions: map[string]string{"error": opError.Error()},
			}
			// json error response extension placeholder
			return echoCtx.JSON(statusCode, stdError)
		}
		// json response extension placeholder
		// Middlewares afterOperationSuccessMiddlewares section
		for _, middleware := range afterOperationSuccessMiddlewares {
			middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx)
			setRequestContext(echoCtx, middlewareCtx)
			if !continueOperation {
				return nil
			}
		}
		// End middlewares afterOperationSuccessMiddlewares section
		// after operation routes extension placeholder
		echoCtx.JSON(statusCode, value)
		// route end routes extension placeholder
		return nil
	})
	engine.POST(toEchoUrl("/e2e/test-enums-in-all/{value1}"), func(echoCtx echo.Context) error {
		// route start routes extension placeholder
		authErr := authorize(
			echoCtx,
			[]SecurityCheckList{
				{
					Relation: SecurityListRelationAnd,
					Checks: []runtime.SecurityCheck{
						{
							SchemaName: "securitySchemaName2",
							Scopes: []string{
								"config",
							},
						},
					},
				},
			},
		)
		if authErr != nil {
			return handleAuthorizationError(echoCtx, authErr, "TestEnumsInAll")
		}
		controller := E2EControllerImport.E2EController{}
		controller.InitController(echoCtx)
		var value1RawPtr *Param105value1.StatusEnumeration = nil
		value1Raw := echoCtx.Param("value1")
		isvalue1Exists := true // if parameter is in route but not provided, it won't reach this handler
		if isvalue1Exists {
			value1 := value1Raw
			value1Var := Param105value1.StatusEnumeration(value1)
			value1RawPtr = &value1Var
		}
		if validatorErr := validatorInstance.Var(value1RawPtr, "required"); validatorErr != nil {
			// Middlewares onInputValidationMiddlewares section
			for _, middleware := range onInputValidationMiddlewares {
				middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx, validatorErr)
				setRequestContext(echoCtx, middlewareCtx)
				if !continueOperation {
					return nil
				}
			}
			// End middlewares onInputValidationMiddlewares section
			fieldName := "value1"
			validationError := wrapValidatorError(validatorErr, "TestEnumsInAll", fieldName)
			// validation error response extension placeholder
			return echoCtx.JSON(http.StatusUnprocessableEntity, validationError)
		}
		var value2RawPtr *Param106value2.NumberEnumeration = nil
		value2Raw := echoCtx.Request().Header.Get("value2")
		_, isvalue2Exists := echoCtx.Request().Header["value2"]
		if !isvalue2Exists {
			// In echo, the echoCtx.Request().Header["key"] is not 100% reliable, so we need other check, but only if is was not found in the first method
			headerValues := echoCtx.Request().Header.Values("value2")
			isvalue2Exists = len(headerValues) > 0
		}
		if isvalue2Exists {
			value2Uint64, conversionErr := strconv.Atoi(value2Raw)
			if conversionErr != nil {
				// Middlewares onInputValidationMiddlewares section
				for _, middleware := range onInputValidationMiddlewares {
					middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx, conversionErr)
					setRequestContext(echoCtx, middlewareCtx)
					if !continueOperation {
						return nil
					}
				}
				// End middlewares onInputValidationMiddlewares section
				validationError := runtime.Rfc7807Error{
					Type: http.StatusText(http.StatusUnprocessableEntity),
					Detail: fmt.Sprintf(
						"A request was made to operation 'TestEnumsInAll' but parameter '%s' was not properly sent - Expected %s but got %s",
						"value2",
						"NumberEnumeration",
						reflect.TypeOf(value2Raw).String(),
					),
					Status:     http.StatusUnprocessableEntity,
					Instance:   "/validation/error/TestEnumsInAll",
					Extensions: map[string]string{"error": conversionErr.Error()},
				}
				// params validation error response extension placeholder
				return echoCtx.JSON(http.StatusUnprocessableEntity, validationError)
			}
			value2 := int(value2Uint64)
			value2Var := Param106value2.NumberEnumeration(value2)
			value2RawPtr = &value2Var
		}
		if validatorErr := validatorInstance.Var(value2RawPtr, "required"); validatorErr != nil {
			// Middlewares onInputValidationMiddlewares section
			for _, middleware := range onInputValidationMiddlewares {
				middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx, validatorErr)
				setRequestContext(echoCtx, middlewareCtx)
				if !continueOperation {
					return nil
				}
			}
			// End middlewares onInputValidationMiddlewares section
			fieldName := "value2"
			validationError := wrapValidatorError(validatorErr, "TestEnumsInAll", fieldName)
			// validation error response extension placeholder
			return echoCtx.JSON(http.StatusUnprocessableEntity, validationError)
		}
		echoCtx.Request().ParseForm()
		var value3RawPtr *Param107value3.StatusEnumeration = nil
		value3RawArr, isvalue3Exists := echoCtx.Request().PostForm["value3"]
		value3Raw := ""
		if isvalue3Exists {
			value3Raw = value3RawArr[0] // Get first value since form values are slices
		}
		if isvalue3Exists {
			value3 := value3Raw
			value3Var := Param107value3.StatusEnumeration(value3)
			value3RawPtr = &value3Var
		}
		if validatorErr := validatorInstance.Var(value3RawPtr, "required"); validatorErr != nil {
			// Middlewares onInputValidationMiddlewares section
			for _, middleware := range onInputValidationMiddlewares {
				middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx, validatorErr)
				setRequestContext(echoCtx, middlewareCtx)
				if !continueOperation {
					return nil
				}
			}
			// End middlewares onInputValidationMiddlewares section
			fieldName := "value3"
			validationError := wrapValidatorError(validatorErr, "TestEnumsInAll", fieldName)
			// validation error response extension placeholder
			return echoCtx.JSON(http.StatusUnprocessableEntity, validationError)
		}
		// Middlewares beforeOperationMiddlewares section
		for _, middleware := range beforeOperationMiddlewares {
			middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx)
			setRequestContext(echoCtx, middlewareCtx)
			if !continueOperation {
				return nil
			}
		}
		// End middlewares beforeOperationMiddlewares section
		// before operation routes extension placeholder
		value, opError := controller.TestEnumsInAll(*value1RawPtr, *value2RawPtr, *value3RawPtr)
		for key, value := range controller.GetHeaders() {
			echoCtx.Response().Header().Set(key, value)
		}
		// response headers extension placeholder
		statusCode := getStatusCode(&controller, true, opError)
		if opError != nil {
			// Middlewares onErrorMiddlewares section
			for _, middleware := range onErrorMiddlewares {
				middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx, opError)
				setRequestContext(echoCtx, middlewareCtx)
				if !continueOperation {
					return nil
				}
			}
			// End middlewares onErrorMiddlewares section
			stdError := runtime.Rfc7807Error{
				Type:       http.StatusText(statusCode),
				Detail:     "Encountered an error during operation 'TestEnumsInAll'",
				Status:     statusCode,
				Instance:   "/controller/error/TestEnumsInAll",
				Extensions: map[string]string{"error": opError.Error()},
			}
			// json error response extension placeholder
			return echoCtx.JSON(statusCode, stdError)
		}
		// json response extension placeholder
		// Middlewares afterOperationSuccessMiddlewares section
		for _, middleware := range afterOperationSuccessMiddlewares {
			middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx)
			setRequestContext(echoCtx, middlewareCtx)
			if !continueOperation {
				return nil
			}
		}
		// End middlewares afterOperationSuccessMiddlewares section
		// after operation routes extension placeholder
		echoCtx.JSON(statusCode, value)
		// route end routes extension placeholder
		return nil
	})
	engine.POST(toEchoUrl("/e2e/test-enums-optional"), func(echoCtx echo.Context) error {
		// route start routes extension placeholder
		authErr := authorize(
			echoCtx,
			[]SecurityCheckList{
				{
					Relation: SecurityListRelationAnd,
					Checks: []runtime.SecurityCheck{
						{
							SchemaName: "securitySchemaName2",
							Scopes: []string{
								"config",
							},
						},
					},
				},
			},
		)
		if authErr != nil {
			return handleAuthorizationError(echoCtx, authErr, "TestEnumsOptional")
		}
		controller := E2EControllerImport.E2EController{}
		controller.InitController(echoCtx)
		var value1RawPtr *Param110value1.StatusEnumeration = nil
		value1Raw := echoCtx.Request().Header.Get("value1")
		_, isvalue1Exists := echoCtx.Request().Header["value1"]
		if !isvalue1Exists {
			// In echo, the echoCtx.Request().Header["key"] is not 100% reliable, so we need other check, but only if is was not found in the first method
			headerValues := echoCtx.Request().Header.Values("value1")
			isvalue1Exists = len(headerValues) > 0
		}
		if isvalue1Exists {
			value1 := value1Raw
			value1Var := Param110value1.StatusEnumeration(value1)
			value1RawPtr = &value1Var
		}
		// Middlewares beforeOperationMiddlewares section
		for _, middleware := range beforeOperationMiddlewares {
			middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx)
			setRequestContext(echoCtx, middlewareCtx)
			if !continueOperation {
				return nil
			}
		}
		// End middlewares beforeOperationMiddlewares section
		// before operation routes extension placeholder
		value, opError := controller.TestEnumsOptional(value1RawPtr)
		for key, value := range controller.GetHeaders() {
			echoCtx.Response().Header().Set(key, value)
		}
		// response headers extension placeholder
		statusCode := getStatusCode(&controller, true, opError)
		if opError != nil {
			// Middlewares onErrorMiddlewares section
			for _, middleware := range onErrorMiddlewares {
				middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx, opError)
				setRequestContext(echoCtx, middlewareCtx)
				if !continueOperation {
					return nil
				}
			}
			// End middlewares onErrorMiddlewares section
			stdError := runtime.Rfc7807Error{
				Type:       http.StatusText(statusCode),
				Detail:     "Encountered an error during operation 'TestEnumsOptional'",
				Status:     statusCode,
				Instance:   "/controller/error/TestEnumsOptional",
				Extensions: map[string]string{"error": opError.Error()},
			}
			// json error response extension placeholder
			return echoCtx.JSON(statusCode, stdError)
		}
		// json response extension placeholder
		// Middlewares afterOperationSuccessMiddlewares section
		for _, middleware := range afterOperationSuccessMiddlewares {
			middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx)
			setRequestContext(echoCtx, middlewareCtx)
			if !continueOperation {
				return nil
			}
		}
		// End middlewares afterOperationSuccessMiddlewares section
		// after operation routes extension placeholder
		echoCtx.JSON(statusCode, value)
		// route end routes extension placeholder
		return nil
	})
	engine.POST(toEchoUrl("/e2e/external-packages"), func(echoCtx echo.Context) error {
		// route start routes extension placeholder
		authErr := authorize(
			echoCtx,
			[]SecurityCheckList{
				{
					Relation: SecurityListRelationAnd,
					Checks: []runtime.SecurityCheck{
						{
							SchemaName: "securitySchemaName2",
							Scopes: []string{
								"config",
							},
						},
					},
				},
			},
		)
		if authErr != nil {
			return handleAuthorizationError(echoCtx, authErr, "ExternalPackages")
		}
		controller := E2EControllerImport.E2EController{}
		controller.InitController(echoCtx)
		var conversionErr error
		var unitRawPtr *Param113unit.LengthUnits = nil
		unitRaw := echoCtx.QueryParam("unit")
		isunitExists := echoCtx.Request().URL.Query().Has("unit")
		if isunitExists {
			unit := unitRaw
			unitVar := Param113unit.LengthUnits(unit)
			unitRawPtr = &unitVar
		}
		var dataRawPtr *Param114data.LengthDto = nil
		conversionErr = bindAndValidateBody(echoCtx, "application/json", "required", &dataRawPtr)
		if conversionErr != nil {
			// Middlewares onInputValidationMiddlewares section
			for _, middleware := range onInputValidationMiddlewares {
				middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx, conversionErr)
				setRequestContext(echoCtx, middlewareCtx)
				if !continueOperation {
					return nil
				}
			}
			// End middlewares onInputValidationMiddlewares section
			validationError := runtime.Rfc7807Error{
				Type: http.StatusText(http.StatusUnprocessableEntity),
				Detail: fmt.Sprintf(
					"A request was made to operation 'ExternalPackages' but body parameter '%s' did not pass validation of '%s' - %s",
					"data",
					"LengthDto",
					extractValidationErrorMessage(conversionErr, nil),
				),
				Status:   http.StatusUnprocessableEntity,
				Instance: "/validation/error/ExternalPackages",
			}
			// json body validation error response extension placeholder
			return echoCtx.JSON(http.StatusUnprocessableEntity, validationError)
		}
		// Middlewares beforeOperationMiddlewares section
		for _, middleware := range beforeOperationMiddlewares {
			middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx)
			setRequestContext(echoCtx, middlewareCtx)
			if !continueOperation {
				return nil
			}
		}
		// End middlewares beforeOperationMiddlewares section
		// before operation routes extension placeholder
		value, opError := controller.ExternalPackages(unitRawPtr, *dataRawPtr)
		for key, value := range controller.GetHeaders() {
			echoCtx.Response().Header().Set(key, value)
		}
		// response headers extension placeholder
		statusCode := getStatusCode(&controller, true, opError)
		if opError != nil {
			// Middlewares onErrorMiddlewares section
			for _, middleware := range onErrorMiddlewares {
				middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx, opError)
				setRequestContext(echoCtx, middlewareCtx)
				if !continueOperation {
					return nil
				}
			}
			// End middlewares onErrorMiddlewares section
			stdError := runtime.Rfc7807Error{
				Type:       http.StatusText(statusCode),
				Detail:     "Encountered an error during operation 'ExternalPackages'",
				Status:     statusCode,
				Instance:   "/controller/error/ExternalPackages",
				Extensions: map[string]string{"error": opError.Error()},
			}
			// json error response extension placeholder
			return echoCtx.JSON(statusCode, stdError)
		}
		// json response extension placeholder
		// Middlewares afterOperationSuccessMiddlewares section
		for _, middleware := range afterOperationSuccessMiddlewares {
			middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx)
			setRequestContext(echoCtx, middlewareCtx)
			if !continueOperation {
				return nil
			}
		}
		// End middlewares afterOperationSuccessMiddlewares section
		// after operation routes extension placeholder
		echoCtx.JSON(statusCode, value)
		// route end routes extension placeholder
		return nil
	})
	engine.POST(toEchoUrl("/e2e/external-packages-unique-in-struct"), func(echoCtx echo.Context) error {
		// route start routes extension placeholder
		authErr := authorize(
			echoCtx,
			[]SecurityCheckList{
				{
					Relation: SecurityListRelationAnd,
					Checks: []runtime.SecurityCheck{
						{
							SchemaName: "securitySchemaName2",
							Scopes: []string{
								"config",
							},
						},
					},
				},
			},
		)
		if authErr != nil {
			return handleAuthorizationError(echoCtx, authErr, "ExternalPackagesUniqueInStruct")
		}
		controller := E2EControllerImport.E2EController{}
		controller.InitController(echoCtx)
		var conversionErr error
		var dataRawPtr *Param117data.UniqueExternalUsage = nil
		conversionErr = bindAndValidateBody(echoCtx, "application/json", "required", &dataRawPtr)
		if conversionErr != nil {
			// Middlewares onInputValidationMiddlewares section
			for _, middleware := range onInputValidationMiddlewares {
				middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx, conversionErr)
				setRequestContext(echoCtx, middlewareCtx)
				if !continueOperation {
					return nil
				}
			}
			// End middlewares onInputValidationMiddlewares section
			validationError := runtime.Rfc7807Error{
				Type: http.StatusText(http.StatusUnprocessableEntity),
				Detail: fmt.Sprintf(
					"A request was made to operation 'ExternalPackagesUniqueInStruct' but body parameter '%s' did not pass validation of '%s' - %s",
					"data",
					"UniqueExternalUsage",
					extractValidationErrorMessage(conversionErr, nil),
				),
				Status:   http.StatusUnprocessableEntity,
				Instance: "/validation/error/ExternalPackagesUniqueInStruct",
			}
			// json body validation error response extension placeholder
			return echoCtx.JSON(http.StatusUnprocessableEntity, validationError)
		}
		// Middlewares beforeOperationMiddlewares section
		for _, middleware := range beforeOperationMiddlewares {
			middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx)
			setRequestContext(echoCtx, middlewareCtx)
			if !continueOperation {
				return nil
			}
		}
		// End middlewares beforeOperationMiddlewares section
		// before operation routes extension placeholder
		value, opError := controller.ExternalPackagesUniqueInStruct(*dataRawPtr)
		for key, value := range controller.GetHeaders() {
			echoCtx.Response().Header().Set(key, value)
		}
		// response headers extension placeholder
		statusCode := getStatusCode(&controller, true, opError)
		if opError != nil {
			// Middlewares onErrorMiddlewares section
			for _, middleware := range onErrorMiddlewares {
				middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx, opError)
				setRequestContext(echoCtx, middlewareCtx)
				if !continueOperation {
					return nil
				}
			}
			// End middlewares onErrorMiddlewares section
			stdError := runtime.Rfc7807Error{
				Type:       http.StatusText(statusCode),
				Detail:     "Encountered an error during operation 'ExternalPackagesUniqueInStruct'",
				Status:     statusCode,
				Instance:   "/controller/error/ExternalPackagesUniqueInStruct",
				Extensions: map[string]string{"error": opError.Error()},
			}
			// json error response extension placeholder
			return echoCtx.JSON(statusCode, stdError)
		}
		// json response extension placeholder
		// Middlewares afterOperationSuccessMiddlewares section
		for _, middleware := range afterOperationSuccessMiddlewares {
			middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx)
			setRequestContext(echoCtx, middlewareCtx)
			if !continueOperation {
				return nil
			}
		}
		// End middlewares afterOperationSuccessMiddlewares section
		// after operation routes extension placeholder
		echoCtx.JSON(statusCode, value)
		// route end routes extension placeholder
		return nil
	})
	engine.POST(toEchoUrl("/e2e/external-packages-validation"), func(echoCtx echo.Context) error {
		// route start routes extension placeholder
		authErr := authorize(
			echoCtx,
			[]SecurityCheckList{
				{
					Relation: SecurityListRelationAnd,
					Checks: []runtime.SecurityCheck{
						{
							SchemaName: "securitySchemaName2",
							Scopes: []string{
								"config",
							},
						},
					},
				},
			},
		)
		if authErr != nil {
			return handleAuthorizationError(echoCtx, authErr, "ExternalPackagesValidation")
		}
		controller := E2EControllerImport.E2EController{}
		controller.InitController(echoCtx)
		var conversionErr error
		var unitRawPtr *Param120unit.LengthUnits = nil
		unitRaw := echoCtx.QueryParam("unit")
		isunitExists := echoCtx.Request().URL.Query().Has("unit")
		if isunitExists {
			unit := unitRaw
			unitVar := Param120unit.LengthUnits(unit)
			unitRawPtr = &unitVar
		}
		var dataRawPtr *Param121data.LengthDtoWithValidation = nil
		conversionErr = bindAndValidateBody(echoCtx, "application/json", "required", &dataRawPtr)
		if conversionErr != nil {
			// Middlewares onInputValidationMiddlewares section
			for _, middleware := range onInputValidationMiddlewares {
				middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx, conversionErr)
				setRequestContext(echoCtx, middlewareCtx)
				if !continueOperation {
					return nil
				}
			}
			// End middlewares onInputValidationMiddlewares section
			validationError := runtime.Rfc7807Error{
				Type: http.StatusText(http.StatusUnprocessableEntity),
				Detail: fmt.Sprintf(
					"A request was made to operation 'ExternalPackagesValidation' but body parameter '%s' did not pass validation of '%s' - %s",
					"data",
					"LengthDtoWithValidation",
					extractValidationErrorMessage(conversionErr, nil),
				),
				Status:   http.StatusUnprocessableEntity,
				Instance: "/validation/error/ExternalPackagesValidation",
			}
			// json body validation error response extension placeholder
			return echoCtx.JSON(http.StatusUnprocessableEntity, validationError)
		}
		// Middlewares beforeOperationMiddlewares section
		for _, middleware := range beforeOperationMiddlewares {
			middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx)
			setRequestContext(echoCtx, middlewareCtx)
			if !continueOperation {
				return nil
			}
		}
		// End middlewares beforeOperationMiddlewares section
		// before operation routes extension placeholder
		value, opError := controller.ExternalPackagesValidation(unitRawPtr, *dataRawPtr)
		for key, value := range controller.GetHeaders() {
			echoCtx.Response().Header().Set(key, value)
		}
		// response headers extension placeholder
		statusCode := getStatusCode(&controller, true, opError)
		if opError != nil {
			// Middlewares onErrorMiddlewares section
			for _, middleware := range onErrorMiddlewares {
				middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx, opError)
				setRequestContext(echoCtx, middlewareCtx)
				if !continueOperation {
					return nil
				}
			}
			// End middlewares onErrorMiddlewares section
			stdError := runtime.Rfc7807Error{
				Type:       http.StatusText(statusCode),
				Detail:     "Encountered an error during operation 'ExternalPackagesValidation'",
				Status:     statusCode,
				Instance:   "/controller/error/ExternalPackagesValidation",
				Extensions: map[string]string{"error": opError.Error()},
			}
			// json error response extension placeholder
			return echoCtx.JSON(statusCode, stdError)
		}
		// json response extension placeholder
		// Middlewares afterOperationSuccessMiddlewares section
		for _, middleware := range afterOperationSuccessMiddlewares {
			middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx)
			setRequestContext(echoCtx, middlewareCtx)
			if !continueOperation {
				return nil
			}
		}
		// End middlewares afterOperationSuccessMiddlewares section
		// after operation routes extension placeholder
		echoCtx.JSON(statusCode, value)
		// route end routes extension placeholder
		return nil
	})
	engine.POST(toEchoUrl("/e2e/arrays-in-body-and-res"), func(echoCtx echo.Context) error {
		// route start routes extension placeholder
		authErr := authorize(
			echoCtx,
			[]SecurityCheckList{
				{
					Relation: SecurityListRelationAnd,
					Checks: []runtime.SecurityCheck{
						{
							SchemaName: "securitySchemaName2",
							Scopes: []string{
								"config",
							},
						},
					},
				},
			},
		)
		if authErr != nil {
			return handleAuthorizationError(echoCtx, authErr, "ArraysInBodyAndRes")
		}
		controller := E2EControllerImport.E2EController{}
		controller.InitController(echoCtx)
		var conversionErr error
		var dataRawPtr *[]Param124data.LengthDto = nil
		conversionErr = bindAndValidateBody(echoCtx, "application/json", "required", &dataRawPtr)
		if conversionErr != nil {
			// Middlewares onInputValidationMiddlewares section
			for _, middleware := range onInputValidationMiddlewares {
				middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx, conversionErr)
				setRequestContext(echoCtx, middlewareCtx)
				if !continueOperation {
					return nil
				}
			}
			// End middlewares onInputValidationMiddlewares section
			validationError := runtime.Rfc7807Error{
				Type: http.StatusText(http.StatusUnprocessableEntity),
				Detail: fmt.Sprintf(
					"A request was made to operation 'ArraysInBodyAndRes' but body parameter '%s' did not pass validation of '%s' - %s",
					"data",
					"[]LengthDto",
					extractValidationErrorMessage(conversionErr, nil),
				),
				Status:   http.StatusUnprocessableEntity,
				Instance: "/validation/error/ArraysInBodyAndRes",
			}
			// json body validation error response extension placeholder
			return echoCtx.JSON(http.StatusUnprocessableEntity, validationError)
		}
		// Middlewares beforeOperationMiddlewares section
		for _, middleware := range beforeOperationMiddlewares {
			middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx)
			setRequestContext(echoCtx, middlewareCtx)
			if !continueOperation {
				return nil
			}
		}
		// End middlewares beforeOperationMiddlewares section
		// before operation routes extension placeholder
		value, opError := controller.ArraysInBodyAndRes(*dataRawPtr)
		for key, value := range controller.GetHeaders() {
			echoCtx.Response().Header().Set(key, value)
		}
		// response headers extension placeholder
		statusCode := getStatusCode(&controller, true, opError)
		if opError != nil {
			// Middlewares onErrorMiddlewares section
			for _, middleware := range onErrorMiddlewares {
				middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx, opError)
				setRequestContext(echoCtx, middlewareCtx)
				if !continueOperation {
					return nil
				}
			}
			// End middlewares onErrorMiddlewares section
			stdError := runtime.Rfc7807Error{
				Type:       http.StatusText(statusCode),
				Detail:     "Encountered an error during operation 'ArraysInBodyAndRes'",
				Status:     statusCode,
				Instance:   "/controller/error/ArraysInBodyAndRes",
				Extensions: map[string]string{"error": opError.Error()},
			}
			// json error response extension placeholder
			return echoCtx.JSON(statusCode, stdError)
		}
		// json response extension placeholder
		// Middlewares afterOperationSuccessMiddlewares section
		for _, middleware := range afterOperationSuccessMiddlewares {
			middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx)
			setRequestContext(echoCtx, middlewareCtx)
			if !continueOperation {
				return nil
			}
		}
		// End middlewares afterOperationSuccessMiddlewares section
		// after operation routes extension placeholder
		echoCtx.JSON(statusCode, value)
		// route end routes extension placeholder
		return nil
	})
	engine.POST(toEchoUrl("/e2e/arrays-inside-body-and-res"), func(echoCtx echo.Context) error {
		// route start routes extension placeholder
		authErr := authorize(
			echoCtx,
			[]SecurityCheckList{
				{
					Relation: SecurityListRelationAnd,
					Checks: []runtime.SecurityCheck{
						{
							SchemaName: "securitySchemaName2",
							Scopes: []string{
								"config",
							},
						},
					},
				},
			},
		)
		if authErr != nil {
			return handleAuthorizationError(echoCtx, authErr, "ArraysInsideBodyAndRes")
		}
		controller := E2EControllerImport.E2EController{}
		controller.InitController(echoCtx)
		var conversionErr error
		var dataRawPtr *[]Param127data.BlaBla = nil
		conversionErr = bindAndValidateBody(echoCtx, "application/json", "", &dataRawPtr)
		if conversionErr != nil {
			// Middlewares onInputValidationMiddlewares section
			for _, middleware := range onInputValidationMiddlewares {
				middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx, conversionErr)
				setRequestContext(echoCtx, middlewareCtx)
				if !continueOperation {
					return nil
				}
			}
			// End middlewares onInputValidationMiddlewares section
			validationError := runtime.Rfc7807Error{
				Type: http.StatusText(http.StatusUnprocessableEntity),
				Detail: fmt.Sprintf(
					"A request was made to operation 'ArraysInsideBodyAndRes' but body parameter '%s' did not pass validation of '%s' - %s",
					"data",
					"[]BlaBla",
					extractValidationErrorMessage(conversionErr, nil),
				),
				Status:   http.StatusUnprocessableEntity,
				Instance: "/validation/error/ArraysInsideBodyAndRes",
			}
			// json body validation error response extension placeholder
			return echoCtx.JSON(http.StatusUnprocessableEntity, validationError)
		}
		// Middlewares beforeOperationMiddlewares section
		for _, middleware := range beforeOperationMiddlewares {
			middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx)
			setRequestContext(echoCtx, middlewareCtx)
			if !continueOperation {
				return nil
			}
		}
		// End middlewares beforeOperationMiddlewares section
		// before operation routes extension placeholder
		value, opError := controller.ArraysInsideBodyAndRes(dataRawPtr)
		for key, value := range controller.GetHeaders() {
			echoCtx.Response().Header().Set(key, value)
		}
		// response headers extension placeholder
		statusCode := getStatusCode(&controller, true, opError)
		if opError != nil {
			// Middlewares onErrorMiddlewares section
			for _, middleware := range onErrorMiddlewares {
				middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx, opError)
				setRequestContext(echoCtx, middlewareCtx)
				if !continueOperation {
					return nil
				}
			}
			// End middlewares onErrorMiddlewares section
			stdError := runtime.Rfc7807Error{
				Type:       http.StatusText(statusCode),
				Detail:     "Encountered an error during operation 'ArraysInsideBodyAndRes'",
				Status:     statusCode,
				Instance:   "/controller/error/ArraysInsideBodyAndRes",
				Extensions: map[string]string{"error": opError.Error()},
			}
			// json error response extension placeholder
			return echoCtx.JSON(statusCode, stdError)
		}
		// json response extension placeholder
		// Middlewares afterOperationSuccessMiddlewares section
		for _, middleware := range afterOperationSuccessMiddlewares {
			middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx)
			setRequestContext(echoCtx, middlewareCtx)
			if !continueOperation {
				return nil
			}
		}
		// End middlewares afterOperationSuccessMiddlewares section
		// after operation routes extension placeholder
		echoCtx.JSON(statusCode, value)
		// route end routes extension placeholder
		return nil
	})
	engine.POST(toEchoUrl("/e2e/deep-arrays-with-validation"), func(echoCtx echo.Context) error {
		// route start routes extension placeholder
		authErr := authorize(
			echoCtx,
			[]SecurityCheckList{
				{
					Relation: SecurityListRelationAnd,
					Checks: []runtime.SecurityCheck{
						{
							SchemaName: "securitySchemaName2",
							Scopes: []string{
								"config",
							},
						},
					},
				},
			},
		)
		if authErr != nil {
			return handleAuthorizationError(echoCtx, authErr, "DeepArraysWithValidation")
		}
		controller := E2EControllerImport.E2EController{}
		controller.InitController(echoCtx)
		var conversionErr error
		var dataRawPtr *[][]Param130data.BlaBla2 = nil
		conversionErr = bindAndValidateBody(echoCtx, "application/json", "required", &dataRawPtr)
		if conversionErr != nil {
			// Middlewares onInputValidationMiddlewares section
			for _, middleware := range onInputValidationMiddlewares {
				middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx, conversionErr)
				setRequestContext(echoCtx, middlewareCtx)
				if !continueOperation {
					return nil
				}
			}
			// End middlewares onInputValidationMiddlewares section
			validationError := runtime.Rfc7807Error{
				Type: http.StatusText(http.StatusUnprocessableEntity),
				Detail: fmt.Sprintf(
					"A request was made to operation 'DeepArraysWithValidation' but body parameter '%s' did not pass validation of '%s' - %s",
					"data",
					"[][]BlaBla2",
					extractValidationErrorMessage(conversionErr, nil),
				),
				Status:   http.StatusUnprocessableEntity,
				Instance: "/validation/error/DeepArraysWithValidation",
			}
			// json body validation error response extension placeholder
			return echoCtx.JSON(http.StatusUnprocessableEntity, validationError)
		}
		// Middlewares beforeOperationMiddlewares section
		for _, middleware := range beforeOperationMiddlewares {
			middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx)
			setRequestContext(echoCtx, middlewareCtx)
			if !continueOperation {
				return nil
			}
		}
		// End middlewares beforeOperationMiddlewares section
		// before operation routes extension placeholder
		value, opError := controller.DeepArraysWithValidation(*dataRawPtr)
		for key, value := range controller.GetHeaders() {
			echoCtx.Response().Header().Set(key, value)
		}
		// response headers extension placeholder
		statusCode := getStatusCode(&controller, true, opError)
		if opError != nil {
			// Middlewares onErrorMiddlewares section
			for _, middleware := range onErrorMiddlewares {
				middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx, opError)
				setRequestContext(echoCtx, middlewareCtx)
				if !continueOperation {
					return nil
				}
			}
			// End middlewares onErrorMiddlewares section
			stdError := runtime.Rfc7807Error{
				Type:       http.StatusText(statusCode),
				Detail:     "Encountered an error during operation 'DeepArraysWithValidation'",
				Status:     statusCode,
				Instance:   "/controller/error/DeepArraysWithValidation",
				Extensions: map[string]string{"error": opError.Error()},
			}
			// json error response extension placeholder
			return echoCtx.JSON(statusCode, stdError)
		}
		// json response extension placeholder
		// Middlewares afterOperationSuccessMiddlewares section
		for _, middleware := range afterOperationSuccessMiddlewares {
			middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx)
			setRequestContext(echoCtx, middlewareCtx)
			if !continueOperation {
				return nil
			}
		}
		// End middlewares afterOperationSuccessMiddlewares section
		// after operation routes extension placeholder
		echoCtx.JSON(statusCode, value)
		// route end routes extension placeholder
		return nil
	})
	engine.POST(toEchoUrl("/e2e/embedded-structs"), func(echoCtx echo.Context) error {
		// route start routes extension placeholder
		authErr := authorize(
			echoCtx,
			[]SecurityCheckList{
				{
					Relation: SecurityListRelationAnd,
					Checks: []runtime.SecurityCheck{
						{
							SchemaName: "securitySchemaName2",
							Scopes: []string{
								"config",
							},
						},
					},
				},
			},
		)
		if authErr != nil {
			return handleAuthorizationError(echoCtx, authErr, "EmbeddedStructs")
		}
		controller := E2EControllerImport.E2EController{}
		controller.InitController(echoCtx)
		var conversionErr error
		var dataRawPtr *Param133data.TheModel = nil
		conversionErr = bindAndValidateBody(echoCtx, "application/json", "required", &dataRawPtr)
		if conversionErr != nil {
			// Middlewares onInputValidationMiddlewares section
			for _, middleware := range onInputValidationMiddlewares {
				middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx, conversionErr)
				setRequestContext(echoCtx, middlewareCtx)
				if !continueOperation {
					return nil
				}
			}
			// End middlewares onInputValidationMiddlewares section
			validationError := runtime.Rfc7807Error{
				Type: http.StatusText(http.StatusUnprocessableEntity),
				Detail: fmt.Sprintf(
					"A request was made to operation 'EmbeddedStructs' but body parameter '%s' did not pass validation of '%s' - %s",
					"data",
					"TheModel",
					extractValidationErrorMessage(conversionErr, nil),
				),
				Status:   http.StatusUnprocessableEntity,
				Instance: "/validation/error/EmbeddedStructs",
			}
			// json body validation error response extension placeholder
			return echoCtx.JSON(http.StatusUnprocessableEntity, validationError)
		}
		// Middlewares beforeOperationMiddlewares section
		for _, middleware := range beforeOperationMiddlewares {
			middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx)
			setRequestContext(echoCtx, middlewareCtx)
			if !continueOperation {
				return nil
			}
		}
		// End middlewares beforeOperationMiddlewares section
		// before operation routes extension placeholder
		value, opError := controller.EmbeddedStructs(*dataRawPtr)
		for key, value := range controller.GetHeaders() {
			echoCtx.Response().Header().Set(key, value)
		}
		// response headers extension placeholder
		statusCode := getStatusCode(&controller, true, opError)
		if opError != nil {
			// Middlewares onErrorMiddlewares section
			for _, middleware := range onErrorMiddlewares {
				middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx, opError)
				setRequestContext(echoCtx, middlewareCtx)
				if !continueOperation {
					return nil
				}
			}
			// End middlewares onErrorMiddlewares section
			stdError := runtime.Rfc7807Error{
				Type:       http.StatusText(statusCode),
				Detail:     "Encountered an error during operation 'EmbeddedStructs'",
				Status:     statusCode,
				Instance:   "/controller/error/EmbeddedStructs",
				Extensions: map[string]string{"error": opError.Error()},
			}
			// json error response extension placeholder
			return echoCtx.JSON(statusCode, stdError)
		}
		// json response extension placeholder
		// Middlewares afterOperationSuccessMiddlewares section
		for _, middleware := range afterOperationSuccessMiddlewares {
			middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx)
			setRequestContext(echoCtx, middlewareCtx)
			if !continueOperation {
				return nil
			}
		}
		// End middlewares afterOperationSuccessMiddlewares section
		// after operation routes extension placeholder
		echoCtx.JSON(statusCode, value)
		// route end routes extension placeholder
		return nil
	})
	engine.POST(toEchoUrl("/e2e/context-injection-empty"), func(echoCtx echo.Context) error {
		// route start routes extension placeholder
		authErr := authorize(
			echoCtx,
			[]SecurityCheckList{
				{
					Relation: SecurityListRelationAnd,
					Checks: []runtime.SecurityCheck{
						{
							SchemaName: "securitySchemaName2",
							Scopes: []string{
								"config",
							},
						},
					},
				},
			},
		)
		if authErr != nil {
			return handleAuthorizationError(echoCtx, authErr, "ContextInjectionEmpty")
		}
		controller := E2EControllerImport.E2EController{}
		controller.InitController(echoCtx)
		// Middlewares beforeOperationMiddlewares section
		for _, middleware := range beforeOperationMiddlewares {
			middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx)
			setRequestContext(echoCtx, middlewareCtx)
			if !continueOperation {
				return nil
			}
		}
		// End middlewares beforeOperationMiddlewares section
		// before operation routes extension placeholder
		opError := controller.ContextInjectionEmpty(getRequestContext(echoCtx))
		for key, value := range controller.GetHeaders() {
			echoCtx.Response().Header().Set(key, value)
		}
		// response headers extension placeholder
		statusCode := getStatusCode(&controller, false, opError)
		if opError != nil {
			// Middlewares onErrorMiddlewares section
			for _, middleware := range onErrorMiddlewares {
				middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx, opError)
				setRequestContext(echoCtx, middlewareCtx)
				if !continueOperation {
					return nil
				}
			}
			// End middlewares onErrorMiddlewares section
			stdError := runtime.Rfc7807Error{
				Type:       http.StatusText(statusCode),
				Detail:     "Encountered an error during operation 'ContextInjectionEmpty'",
				Status:     statusCode,
				Instance:   "/controller/error/ContextInjectionEmpty",
				Extensions: map[string]string{"error": opError.Error()},
			}
			// json error response extension placeholder
			return echoCtx.JSON(statusCode, stdError)
		}
		// json response extension placeholder
		// Middlewares afterOperationSuccessMiddlewares section
		for _, middleware := range afterOperationSuccessMiddlewares {
			middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx)
			setRequestContext(echoCtx, middlewareCtx)
			if !continueOperation {
				return nil
			}
		}
		// End middlewares afterOperationSuccessMiddlewares section
		// after operation routes extension placeholder
		echoCtx.Response().WriteHeader(statusCode)
		// route end routes extension placeholder
		return nil
	})
	engine.POST(toEchoUrl("/e2e/context-injection"), func(echoCtx echo.Context) error {
		// route start routes extension placeholder
		authErr := authorize(
			echoCtx,
			[]SecurityCheckList{
				{
					Relation: SecurityListRelationAnd,
					Checks: []runtime.SecurityCheck{
						{
							SchemaName: "securitySchemaName2",
							Scopes: []string{
								"config",
							},
						},
					},
				},
			},
		)
		if authErr != nil {
			return handleAuthorizationError(echoCtx, authErr, "ContextInjection")
		}
		controller := E2EControllerImport.E2EController{}
		controller.InitController(echoCtx)
		var conversionErr error
		var dataRawPtr *Param137data.TheModel = nil
		conversionErr = bindAndValidateBody(echoCtx, "application/json", "required", &dataRawPtr)
		if conversionErr != nil {
			// Middlewares onInputValidationMiddlewares section
			for _, middleware := range onInputValidationMiddlewares {
				middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx, conversionErr)
				setRequestContext(echoCtx, middlewareCtx)
				if !continueOperation {
					return nil
				}
			}
			// End middlewares onInputValidationMiddlewares section
			validationError := runtime.Rfc7807Error{
				Type: http.StatusText(http.StatusUnprocessableEntity),
				Detail: fmt.Sprintf(
					"A request was made to operation 'ContextInjection' but body parameter '%s' did not pass validation of '%s' - %s",
					"data",
					"TheModel",
					extractValidationErrorMessage(conversionErr, nil),
				),
				Status:   http.StatusUnprocessableEntity,
				Instance: "/validation/error/ContextInjection",
			}
			// json body validation error response extension placeholder
			return echoCtx.JSON(http.StatusUnprocessableEntity, validationError)
		}
		// Middlewares beforeOperationMiddlewares section
		for _, middleware := range beforeOperationMiddlewares {
			middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx)
			setRequestContext(echoCtx, middlewareCtx)
			if !continueOperation {
				return nil
			}
		}
		// End middlewares beforeOperationMiddlewares section
		// before operation routes extension placeholder
		opError := controller.ContextInjection(getRequestContext(echoCtx), *dataRawPtr)
		for key, value := range controller.GetHeaders() {
			echoCtx.Response().Header().Set(key, value)
		}
		// response headers extension placeholder
		statusCode := getStatusCode(&controller, false, opError)
		if opError != nil {
			// Middlewares onErrorMiddlewares section
			for _, middleware := range onErrorMiddlewares {
				middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx, opError)
				setRequestContext(echoCtx, middlewareCtx)
				if !continueOperation {
					return nil
				}
			}
			// End middlewares onErrorMiddlewares section
			stdError := runtime.Rfc7807Error{
				Type:       http.StatusText(statusCode),
				Detail:     "Encountered an error during operation 'ContextInjection'",
				Status:     statusCode,
				Instance:   "/controller/error/ContextInjection",
				Extensions: map[string]string{"error": opError.Error()},
			}
			// json error response extension placeholder
			return echoCtx.JSON(statusCode, stdError)
		}
		// json response extension placeholder
		// Middlewares afterOperationSuccessMiddlewares section
		for _, middleware := range afterOperationSuccessMiddlewares {
			middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx)
			setRequestContext(echoCtx, middlewareCtx)
			if !continueOperation {
				return nil
			}
		}
		// End middlewares afterOperationSuccessMiddlewares section
		// after operation routes extension placeholder
		echoCtx.Response().WriteHeader(statusCode)
		// route end routes extension placeholder
		return nil
	})
	// E2EClassSecController
	engine.GET(toEchoUrl("/e2e/with-default-class-security"), func(echoCtx echo.Context) error {
		// route start routes extension placeholder
		authErr := authorize(
			echoCtx,
			[]SecurityCheckList{
				{
					Relation: SecurityListRelationAnd,
					Checks: []runtime.SecurityCheck{
						{
							SchemaName: "securitySchemaName",
							Scopes: []string{
								"class",
							},
						},
					},
				},
			},
		)
		if authErr != nil {
			return handleAuthorizationError(echoCtx, authErr, "WithDefaultClassSecurity")
		}
		controller := E2EClassSecControllerImport.E2EClassSecController{}
		controller.InitController(echoCtx)
		var headerParamRawPtr *string = nil
		headerParamRaw := echoCtx.Request().Header.Get("x-test-scopes")
		_, isheaderParamExists := echoCtx.Request().Header["x-test-scopes"]
		if !isheaderParamExists {
			// In echo, the echoCtx.Request().Header["key"] is not 100% reliable, so we need other check, but only if is was not found in the first method
			headerValues := echoCtx.Request().Header.Values("x-test-scopes")
			isheaderParamExists = len(headerValues) > 0
		}
		if isheaderParamExists {
			headerParam := headerParamRaw
			headerParamRawPtr = &headerParam
		}
		if validatorErr := validatorInstance.Var(headerParamRawPtr, "required"); validatorErr != nil {
			// Middlewares onInputValidationMiddlewares section
			for _, middleware := range onInputValidationMiddlewares {
				middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx, validatorErr)
				setRequestContext(echoCtx, middlewareCtx)
				if !continueOperation {
					return nil
				}
			}
			// End middlewares onInputValidationMiddlewares section
			fieldName := "headerParam"
			validationError := wrapValidatorError(validatorErr, "WithDefaultClassSecurity", fieldName)
			// validation error response extension placeholder
			return echoCtx.JSON(http.StatusUnprocessableEntity, validationError)
		}
		// Middlewares beforeOperationMiddlewares section
		for _, middleware := range beforeOperationMiddlewares {
			middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx)
			setRequestContext(echoCtx, middlewareCtx)
			if !continueOperation {
				return nil
			}
		}
		// End middlewares beforeOperationMiddlewares section
		// before operation routes extension placeholder
		value, opError := controller.WithDefaultClassSecurity(*headerParamRawPtr)
		for key, value := range controller.GetHeaders() {
			echoCtx.Response().Header().Set(key, value)
		}
		// response headers extension placeholder
		statusCode := getStatusCode(&controller, true, opError)
		if opError != nil {
			// Middlewares onErrorMiddlewares section
			for _, middleware := range onErrorMiddlewares {
				middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx, opError)
				setRequestContext(echoCtx, middlewareCtx)
				if !continueOperation {
					return nil
				}
			}
			// End middlewares onErrorMiddlewares section
			stdError := runtime.Rfc7807Error{
				Type:       http.StatusText(statusCode),
				Detail:     "Encountered an error during operation 'WithDefaultClassSecurity'",
				Status:     statusCode,
				Instance:   "/controller/error/WithDefaultClassSecurity",
				Extensions: map[string]string{"error": opError.Error()},
			}
			// json error response extension placeholder
			return echoCtx.JSON(statusCode, stdError)
		}
		// json response extension placeholder
		// Middlewares afterOperationSuccessMiddlewares section
		for _, middleware := range afterOperationSuccessMiddlewares {
			middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx)
			setRequestContext(echoCtx, middlewareCtx)
			if !continueOperation {
				return nil
			}
		}
		// End middlewares afterOperationSuccessMiddlewares section
		// after operation routes extension placeholder
		echoCtx.JSON(statusCode, value)
		// route end routes extension placeholder
		return nil
	})
	engine.GET(toEchoUrl("/e2e/with-default-override-class-security"), func(echoCtx echo.Context) error {
		// route start routes extension placeholder
		authErr := authorize(
			echoCtx,
			[]SecurityCheckList{
				{
					Relation: SecurityListRelationAnd,
					Checks: []runtime.SecurityCheck{
						{
							SchemaName: "securitySchemaName",
							Scopes: []string{
								"method",
							},
						},
					},
				},
			},
		)
		if authErr != nil {
			return handleAuthorizationError(echoCtx, authErr, "WithOverrideClassSecurity")
		}
		controller := E2EClassSecControllerImport.E2EClassSecController{}
		controller.InitController(echoCtx)
		var headerParamRawPtr *string = nil
		headerParamRaw := echoCtx.Request().Header.Get("x-test-scopes")
		_, isheaderParamExists := echoCtx.Request().Header["x-test-scopes"]
		if !isheaderParamExists {
			// In echo, the echoCtx.Request().Header["key"] is not 100% reliable, so we need other check, but only if is was not found in the first method
			headerValues := echoCtx.Request().Header.Values("x-test-scopes")
			isheaderParamExists = len(headerValues) > 0
		}
		if isheaderParamExists {
			headerParam := headerParamRaw
			headerParamRawPtr = &headerParam
		}
		if validatorErr := validatorInstance.Var(headerParamRawPtr, "required"); validatorErr != nil {
			// Middlewares onInputValidationMiddlewares section
			for _, middleware := range onInputValidationMiddlewares {
				middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx, validatorErr)
				setRequestContext(echoCtx, middlewareCtx)
				if !continueOperation {
					return nil
				}
			}
			// End middlewares onInputValidationMiddlewares section
			fieldName := "headerParam"
			validationError := wrapValidatorError(validatorErr, "WithOverrideClassSecurity", fieldName)
			// validation error response extension placeholder
			return echoCtx.JSON(http.StatusUnprocessableEntity, validationError)
		}
		// Middlewares beforeOperationMiddlewares section
		for _, middleware := range beforeOperationMiddlewares {
			middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx)
			setRequestContext(echoCtx, middlewareCtx)
			if !continueOperation {
				return nil
			}
		}
		// End middlewares beforeOperationMiddlewares section
		// before operation routes extension placeholder
		value, opError := controller.WithOverrideClassSecurity(*headerParamRawPtr)
		for key, value := range controller.GetHeaders() {
			echoCtx.Response().Header().Set(key, value)
		}
		// response headers extension placeholder
		statusCode := getStatusCode(&controller, true, opError)
		if opError != nil {
			// Middlewares onErrorMiddlewares section
			for _, middleware := range onErrorMiddlewares {
				middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx, opError)
				setRequestContext(echoCtx, middlewareCtx)
				if !continueOperation {
					return nil
				}
			}
			// End middlewares onErrorMiddlewares section
			stdError := runtime.Rfc7807Error{
				Type:       http.StatusText(statusCode),
				Detail:     "Encountered an error during operation 'WithOverrideClassSecurity'",
				Status:     statusCode,
				Instance:   "/controller/error/WithOverrideClassSecurity",
				Extensions: map[string]string{"error": opError.Error()},
			}
			// json error response extension placeholder
			return echoCtx.JSON(statusCode, stdError)
		}
		// json response extension placeholder
		// Middlewares afterOperationSuccessMiddlewares section
		for _, middleware := range afterOperationSuccessMiddlewares {
			middlewareCtx, continueOperation := middleware(getRequestContext(echoCtx), echoCtx)
			setRequestContext(echoCtx, middlewareCtx)
			if !continueOperation {
				return nil
			}
		}
		// End middlewares afterOperationSuccessMiddlewares section
		// after operation routes extension placeholder
		echoCtx.JSON(statusCode, value)
		// route end routes extension placeholder
		return nil
	})
}
