
{{#equal PassedIn "Path"}}
	var {{ToLowerCamel Name}}RawPtr *{{{TypeMeta.Name}}} = nil
	{{ToLowerCamel Name}}Raw := chi.URLParam(ctx, "{{{NameInSchema}}}")
	is{{Name}}Exists := true // if parameter is in route but not provided, it won't reach this handler
	{{> RequestSwitchParamType}}
	{{> RunValidator}}
{{/equal}}

{{#equal PassedIn "Query"}}
	var {{ToLowerCamel Name}}RawPtr *{{{TypeMeta.Name}}} = nil

	{{ToLowerCamel Name}}Raw := ctx.URL.Query().Get("{{{NameInSchema}}}")
	is{{Name}}Exists := ctx.URL.Query().Has("{{{NameInSchema}}}")
	{{> RequestSwitchParamType}}
	{{> RunValidator}}
{{/equal}}

{{#equal PassedIn "Header"}}
	var {{ToLowerCamel Name}}RawPtr *{{{TypeMeta.Name}}} = nil
	{{ToLowerCamel Name}}Raw := ctx.Header.Get("{{{NameInSchema}}}")
	_, is{{Name}}Exists := ctx.Header["{{{NameInSchema}}}"]
	if !is{{Name}}Exists {
		// In echo, the ctx..Header["key"] is not 100% reliable, so we need other check, but only if is was not found in the first method
		headerValues := ctx.Header.Values("{{{NameInSchema}}}")
		is{{Name}}Exists = len(headerValues) > 0
	}
	{{> RequestSwitchParamType}}
	{{> RunValidator}}
{{/equal}}

{{#equal PassedIn "Form"}}
	ctx.ParseForm()
	var {{ToLowerCamel Name}}RawPtr *{{{TypeMeta.Name}}} = nil
	{{ToLowerCamel Name}}RawArr, is{{Name}}Exists := ctx.PostForm["{{{NameInSchema}}}"]
	{{ToLowerCamel Name}}Raw := ""
	if is{{Name}}Exists {
		{{ToLowerCamel Name}}Raw = {{ToLowerCamel Name}}RawArr[0] // Get first value since form values are slices
	}

	{{> RequestSwitchParamType}}
	{{> RunValidator}}
{{/equal}}

{{#equal PassedIn "Body"}}
	var {{ToLowerCamel Name}}RawPtr *{{#if TypeMeta.FullyQualifiedPackage}}Param{{{UniqueImportSerial}}}{{{Name}}}.{{/if}}{{{TypeMeta.Name}}} = nil
	conversionErr = bindAndValidateBody(ctx, "{{{ResponseContentType}}}", "{{Validator}}",&{{ToLowerCamel Name}}RawPtr)
	if conversionErr != nil {
		{{> JsonBodyValidationErrorResponse }}
	}
{{/equal}}
