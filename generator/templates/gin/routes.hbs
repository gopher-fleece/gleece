/*
--
This file is automatically generated. Any manual changes to this file may be overwritten.
It includes routes and handlers by the Gleece API Routes Generator.
--
Authors: Haim Kastner & Yuval Pomerchik
Generated by: Gleece Routes Generator
Generated Date: {{{GenerationDate}}}
Target Engine: Gin (https://github.com/gin-gonic/gin)
--
Usage:
Refer to the Gleece documentation for details on how to use the generated routes and handlers.
--
Repository: https://github.com/gopher-fleece/gleece
--
*/

package {{{PackageName}}}

{{> Imports}}

var validatorInstance = validator.New()
var urlParamRegex *regexp.Regexp

{{> TypeDeclarations}}

{{> FunctionDeclarations}}

{{> RegisterMiddleware}}

func RegisterCustomValidator(validateTagName string, validateFunc runtime.ValidationFunc) {
	validatorInstance.RegisterValidation(validateTagName, func(fl validator.FieldLevel) bool {
		return validateFunc(fl)
	})
}

func RegisterRoutes(engine *gin.Engine) {
	urlParamRegex = regexp.MustCompile(`\{([\w\d-_]+)\}`)

	{{> RegisterRoutesExtension }}

{{#each Controllers}}
	// {{{Name}}}

	{{#each Routes}}
		engine.{{{HttpVerb}}}(toGinUrl("{{{../RestMetadata.Path}}}{{{RestMetadata.Path}}}"), func(ctx *gin.Context) {
			{{> RouteStartRoutesExtension }}
			
			authErr := {{> AuthorizationCall}}
			if authErr != nil {
				handleAuthorizationError(ctx, authErr, "{{{OperationId}}}")
				return
			}
			controller := {{{Name}}}Import.{{../Name}}{}
			controller.InitController(ctx)
			{{#ifAnyParamRequiresConversion FuncParams}}
			var conversionErr error
			{{/ifAnyParamRequiresConversion}}
			{{#each FuncParams}}
				{{> RequestArgsParsing}}
			{{/each}}

		{{> Middleware isErrorMiddleware=false middlewares="beforeOperationMiddlewares" }} 
		{{> BeforeOperationRoutesExtension }}
		{{#equal HasReturnValue true}}value, {{/equal}}opError := controller.{{{OperationId}}}({{#each FuncParams}}{{#if TypeMeta.IsByAddress}}{{else}}*{{/if}}{{ToLowerCamel Name}}RawPtr{{#unless @last}}, {{/unless}}{{/each}})
		
		{{> ResponseHeaders }}

		{{> ResponseHeadersExtension}}
		
		{{> ReplyResponse}}
	})

	{{/each}}
{{/each}}
}