{{> JsonResponseExtension}}
{{#equal HasReturnValue true}}
	{{#if ValidateResponsePayload}}
		if outputValidationErr := validatorInstance.Struct(value); outputValidationErr != nil {
			{{> Middleware isErrorMiddleware=true middlewares="onOutputValidationMiddlewares" errorName="outputValidationErr" }}
			outputValidationStatusCode := http.StatusInternalServerError
			outputValidationRfc7807Error := runtime.Rfc7807Error{
				Type:       http.StatusText(outputValidationStatusCode),
				Detail:     "Encountered an error during operation '{{{OperationId}}}'",
				Status:     outputValidationStatusCode,
				Instance:   "/gleece/controller/error/{{{OperationId}}}",
				Extensions: map[string]string{},
			}
			ctx.JSON(outputValidationStatusCode, outputValidationRfc7807Error)
			return
		}
	{{/if}}
	ctx.JSON(statusCode, value)
{{/equal}}
{{#equal HasReturnValue false}}
	ctx.Header("Content-Type", "application/json")
	ctx.Status(statusCode)
{{/equal}}