/*
--
This file is automatically generated. Any manual changes to this file may be overwritten.
It includes routes and handlers by the Gleece API Routes Generator.
--
Authors: Haim Kastner & Yuval Pomerchik
Generated by: Gleece Routes Generator
{{{GenerationDate}}}
Target Engine: Fiber v2 (https://github.com/gofiber/fiber)
--
Usage:
Refer to the Gleece documentation https://docs.gleece.dev for details on how to use the generated routes and handlers.
--
Repository: https://github.com/gopher-fleece/gleece
--
*/

package {{{PackageName}}}

{{> Imports}}

var validatorInstance = validator.New()
var urlParamRegex *regexp.Regexp

{{> TypeDeclarations}}

{{> FunctionDeclarations}}

{{> RegisterMiddleware}}

func RegisterCustomValidator(validateTagName string, validateFunc runtime.ValidationFunc) {
	validatorInstance.RegisterValidation(validateTagName, func(fl validator.FieldLevel) bool {
		return validateFunc(fl)
	})
}

func RegisterRoutes(engine *fiber.App) {
	urlParamRegex = regexp.MustCompile(`\{([\w\d-_]+)\}`)

    {{!-- An experimental feature to auto generate enums validators --}}
	{{#if ExperimentalConfig.GenerateEnumValidator}}
	{{#each Models.Enums}}
		registerEnumValidation(validatorInstance, "{{ToSnakeCase Name}}_enum", []string{ {{#each Values}}"{{{this}}}"{{#unless @last}},{{/unless}}{{/each}} })
	{{/each}}
	{{/if}}
	
	{{> RegisterRoutesExtension }}

{{#each Controllers}}
	// {{{Name}}}
	{{#each Routes}}
		engine.{{{ToUpperCamel HttpVerb}}}(toFiberUrl("{{{../RestMetadata.Path}}}{{{RestMetadata.Path}}}"), func(fiberCtx *fiber.Ctx) error  {
			{{> RouteStartRoutesExtension }}
			
			authErr := {{> AuthorizationCall}}
			if authErr != nil {
				return handleAuthorizationError(fiberCtx, authErr, "{{{OperationId}}}")
							}
			controller := {{{Name}}}Import.{{../Name}}{}
			controller.InitController(fiberCtx)
			{{#ifAnyParamRequiresConversion FuncParams}}
			var conversionErr error
			{{/ifAnyParamRequiresConversion}}
			{{#each FuncParams}}
				{{> RequestArgsParsing}}
			{{/each}}

		{{> Middleware isErrorMiddleware=false middlewares="beforeOperationMiddlewares" }} 
		{{> BeforeOperationRoutesExtension }}
		{{#equal HasReturnValue true}}value, {{/equal}}opError := controller.{{{OperationId}}}({{#CollapseMultiline}}{{> MethodParameterList}}{{/CollapseMultiline}})
		
		{{> ResponseHeaders }}
		
		{{> ResponseHeadersExtension}}

		{{> ReplyResponse}}
	})

	{{/each}}
{{/each}}
}